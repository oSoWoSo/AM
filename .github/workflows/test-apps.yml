name: "Test random üíØ"

env:
  TERM: xterm

on:
  push:
    branches: main
    paths:
      - 'programs/x86_64/**'
      - .github/workflows/test-apps.yml

  #pull_request:
  #  if: github.event.pull_request.head.repo.full_name != github.repository
  #  branches: main
  #  paths:
  #    - 'programs/x86_64/**'
  #    - .github/workflows/test-apps.yml

  workflow_dispatch:
    inputs:
      reset_stats:
        description: "RESET stats"
        required: true
        default: "false"
        type: boolean
      retest_failed:
        description: "Test failed again"
        required: true
        default: "false"
        type: boolean

  schedule:
    - cron: '0 23 * * *'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

permissions:
  actions: write
  contents: write

jobs:
  rebase-testing-branch:
    name: "prepare üí§"
    runs-on: ubuntu-22.04
    steps:
      - name: "Checkout repository"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: testing

      - name: "Git Config"
        run: |
          echo "git config"
          git config --global user.name "ivan-hc"
          git config --global user.email "noreply@github.com"

      - name: "Check if testing exists"
        id: check_testing
        run: |
          if git show-ref --verify --quiet refs/heads/testing; then
            echo "Testing branch exist"
            echo "TESTING_EXISTS=true" >> $GITHUB_ENV
            git checkout testing
          else
            echo "Creating testing branch"
            echo "TESTING_EXISTS=false" >> $GITHUB_ENV
            git checkout -b testing origin/main
            exit 0
          fi

      - name: "Check and update testing branch"
        if: env.TESTING_EXISTS == 'true'
        run: |
          echo "Checking testing branch status..."
          if [[ "${{ github.event.inputs.reset_stats }}" == 'true' ]]; then
            echo "Resetting testing branch to match main"
            git push origin main:testing --force
            exit 0
          fi
          git fetch origin
          if [[ $(git rev-list HEAD...origin/main --count) -gt 0 ]]; then
            echo "Changes detected between 'main' and 'testing'. Attempting rebase..."
            if git rebase -X ours origin/main; then
              echo "Successfully rebased testing on main"
            else
              echo "Rebase failed, resetting testing to main"
              git reset --hard origin/main
            fi
            git push origin HEAD:testing --force
          else
            echo "No changes detected, testing branch is up to date."
          fi

  show-stats:
    name: "stats üìù"
    runs-on: ubuntu-22.04
    needs: rebase-testing-branch

    steps:
      - name: "Checkout repository (for programs count) üèÉ"
        uses: actions/checkout@v4
        with:
          ref: testing

      - name: "Count stats üìä"
        run: |
          x64Count=$(find programs/x86_64/ -type f | wc -l)
          i68Count=$(find programs/i686/ -type f | wc -l)
          a64Count=$(find programs/aarch64/ -type f | wc -l)
          tested=$(wc -l < tested.list 2>/dev/null || echo 0)
          failed=$(wc -l < failed.list 2>/dev/null || echo 0)
          echo "### üé¨ apps" >> $GITHUB_STEP_SUMMARY
          echo "$x64Count x86_64" >> $GITHUB_STEP_SUMMARY
          echo "$i68Count i686" >> $GITHUB_STEP_SUMMARY
          echo "$a64Count aarch64" >> $GITHUB_STEP_SUMMARY
          echo "### üî® tests" >> $GITHUB_STEP_SUMMARY
          echo " üèÅ $tested" >> $GITHUB_STEP_SUMMARY
          echo " ‚ùå $failed" >> $GITHUB_STEP_SUMMARY

  generate-matrix:
    name: "matrix üåÄ"
    needs: rebase-testing-branch
    runs-on: ubuntu-22.04
    outputs:
      skip: ${{ steps.set-matrix.outputs.skip }}
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      count: ${{ steps.am-install.outputs.count }}
    steps:
      - name: "Check out repository üèÉ"
        uses: actions/checkout@v4
        with:
          ref: testing

      - name: "Generate Matrix üèÜ"
        id: set-matrix
        run: |
          if [[ "${{ github.event.inputs.retest_failed }}" != "true" ]]; then
            mkdir -p results
            find programs/x86_64/ -maxdepth 1 -type f -printf "%f\n" | sort > all.list
            if [[ -f tested.list ]]; then
              if diff -q all.list tested.list; then
                echo "Everything tested" >> $GITHUB_STEP_SUMMARY
                echo "skip=true" >> $GITHUB_OUTPUT
                exit 0
              else
                comm -23 all.list tested.list > totest_tmp.list
              fi
            else
              echo "First run!" >> $GITHUB_STEP_SUMMARY
              cp all.list totest_tmp.list
            fi
            if [[ -f failed.list ]]; then
              comm -23 totest_tmp.list failed.list > totest.list
              echo "### Excluding failed:" >> $GITHUB_STEP_SUMMARY
              cat failed.list >> $GITHUB_STEP_SUMMARY
              if [ ! -s totest.list ]; then
                echo " üèÅ Nothing to test üèÅ" >> $GITHUB_STEP_SUMMARY
                echo "skip=true" >> $GITHUB_OUTPUT
                exit 0
              fi
            else
              mv totest_tmp.list totest.list
            fi
            FILES=$(shuf -n 100 totest.list | sort || cat totest.list | sort)
            MATRIX="{\"include\": ["
            for file in $FILES; do
              MATRIX+="{\"file\": \"$file\"},"
            done
            MATRIX="${MATRIX%,}]}"
            echo "matrix=$MATRIX" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event.inputs.retest_failed }}" == "true" ]]; then
            find programs/x86_64/ -maxdepth 1 -type f -printf "%f\n" | sort > all.list
            grep -Fxf failed.list all.list > retest.list
            echo "### Retesting failed" >> $GITHUB_STEP_SUMMARY
            echo "Previously failed, removed: $(grep -vFxf all.list failed.list)" >> $GITHUB_STEP_SUMMARY
            FILES=$(cat retest.list)
            MATRIX="{\"include\": ["
            for file in $FILES; do
              MATRIX+="{\"file\": \"$file\"},"
            done
            MATRIX="${MATRIX%,}]}"
            echo "matrix=$MATRIX" >> $GITHUB_OUTPUT
            echo "Removing failed.list"
            git rm failed.list
          fi

  run-actions:
    name: "üî®"
    needs: generate-matrix
    runs-on: ubuntu-22.04
    if: ${{ needs.generate-matrix.outputs.skip != 'true' }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.generate-matrix.outputs.matrix) }}
    env:
      TIMEOUT: 23
    steps:
      - name: "Check out repository üèÉ"
        uses: actions/checkout@v4
        with:
          ref: testing

      - name: "Install dependencies üì¶Ô∏è"
        run: |
          sudo apt-get -y update 2> /dev/null || apt-get -y update
          sudo apt-get -y install wget curl torsocks zsync 2> /dev/null || apt-get -y install git wget curl torsocks zsync

      - name: "Install AM üéÅ"
        run: |
          mkdir -p results /usr/local/bin
          chmod +x ./INSTALL
          sudo ./INSTALL 2> /dev/null || ./INSTALL

      - name: "test ${{ matrix.file }} üöß"
        run: |
          set -uo pipefail
          mkdir -p results
          script_content=$(curl -Ls https://raw.githubusercontent.com/ivan-hc/AM/main/programs/x86_64/"${{ matrix.file }}")
          pure_arg=$(echo "${{ matrix.file }}" | sed 's/\.appimage//g; s/\^debian-testing-//g; s/\-appimage$//g' | sed 's:.*/::')
          if timeout "$TIMEOUT"m am -i "${{ matrix.file }}" --debug 2>&1 | tee -a results/log-"${{ matrix.file }}"; then
            echo ""
            echo " Structure of the directory in /opt"
            echo ""
            if test -d /opt/kdegames; then
               ls /opt/kdegames | tee -a results/log-"${{ matrix.file }}"
            elif test -d /opt/kdeutils; then
               ls /opt/kdeutils | tee -a results/log-"${{ matrix.file }}"
            elif test -d /opt/platform-tools; then
               ls /opt/platform-tools | tee -a results/log-"${{ matrix.file }}"
            elif test -d /opt/"$pure_arg"; then
               ls /opt/"$pure_arg" | tee -a results/log-"${{ matrix.file }}"
            elif [ "$pure_arg" = avidemux ]; then
               echo /opt/avidemux | tee -a results/log-"${{ matrix.file }}"
            elif [[ "$pure_arg" =~ (bat-extras|code|deadbeef*|libfuse2|libreoffice|microsoft-edge*|mpv|node|npm|swift|wine) ]]; then
               echo "App not installed, this is a Known error related to GitHub Actions" | tee -a results/log-"${{ matrix.file }}"
            elif test -d /opt/"$pure_arg"*; then
               ls /opt/"$pure_arg"* | tee -a results/log-"${{ matrix.file }}"
            elif echo "$script_content" | grep -q "spooky"; then
               echo "App not installed because marked as \"spooky\", require to be tested manually" | tee -a results/log-"${{ matrix.file }}"
            else
               ls /opt/"${{ matrix.file }}" | tee -a results/log-"${{ matrix.file }}"
            fi
            echo ""
            echo "-------------------------------------------------------------"
            echo ""
            echo " Command in \$PATH"
            echo ""
            command -v "$pure_arg" | tee -a results/log-"${{ matrix.file }}" || ls /usr/local/bin | tee -a results/log-"${{ matrix.file }}"
            echo ""
            echo "-------------------------------------------------------------"
            echo ""
            echo " Launchers in /usr/local/share/applications" | tee -a results/log-"${{ matrix.file }}"
            echo ""
            if test -f /usr/local/share/applications/*AM.desktop 2>/dev/null; then
               ls /usr/local/share/applications | grep "AM.desktop$" | tee -a results/log-"${{ matrix.file }}"
            else
               ls /usr/local/share/applications | tee -a results/log-"${{ matrix.file }}"
            fi
            echo ""
            echo "-------------------------------------------------------------"
            am -R "${{ matrix.file }}" && echo "${{ matrix.file }}" >> results/ok-${{ matrix.file }} || echo "${{ matrix.file }}" >> results/log-${{ matrix.file }}
          else
            if [[ $? -eq 124 ]]; then
               echo "### üí• ${{ matrix.file }} timeout!" >> $GITHUB_STEP_SUMMARY
               echo "Installation timeout in 23 minutes" >> results/log-"${{ matrix.file }}"
               echo "${{ matrix.file }}" >> results/log-${{ matrix.file }}
            else
               echo "### üíÄ ${{ matrix.file }}" >> $GITHUB_STEP_SUMMARY
               echo "${{ matrix.file }}" >> results/log-${{ matrix.file }}
            fi
            exit 1
          fi

      - name: "Rename Failed Results ‚òùÔ∏è"
        if: failure()
        run: |
          mv results/log-${{ matrix.file }} results/ko-${{ matrix.file }}

      - name: "Upload KO Results ‚òùÔ∏è"
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: ko-${{ matrix.file }}
          path: results/ko-${{ matrix.file }}

      - name: "Upload OK Results ‚¨ÜÔ∏è"
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: ok-${{ matrix.file }}
          path: results/ok-${{ matrix.file }}

  update-tested-list:
    name: "results üì∞"
    needs: run-actions
    runs-on: ubuntu-22.04
    if: always()
    steps:
      - name: "Check out repository üèÉ"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: testing

      - name: "Download Test Results ‚¨áÔ∏è"
        uses: actions/download-artifact@v4
        with:
          path: results
          merge-multiple: true
      - run: ls -R results || echo "Nothing tested"

      - name: "Git Config"
        run: |
          git config --global user.name "ivan-hc"
          git config --global user.email "noreply@github.com"

      - name: "Aggregate and push results"
        run: |
          if compgen -G "results/ok-*" > /dev/null; then
            echo "Getting results"
            cat results/ok-* >> tested.list
            sort -u tested.list -o tested.list
            git add tested.list
          else
            echo "Nothing tested successfully?"
          fi
          if compgen -G "results/ko-*" > /dev/null; then
            mkdir -p logs
            for file in results/ko-*; do
              appname=$(basename "$file" | cut -d'-' -f2-)
              cp "results/ko-$file" "logs/$appname"
              echo "$appname" >> fail.list
              echo "$appname" >> failed.list
            done
            sort -u failed.list -o failed.list
            git add failed.list logs
          else
            echo "Nothing failed? Great!"
          fi
          if [[ "$GITHUB_REF" == 'refs/pull/*' ]]; then
            echo "This is a Pull Request. Not saving results."
          else
            echo "Creating new commit"
            git commit -m "update results"
            git push origin testing --force-with-lease
          fi

      - name: "Rebase again"
        if: success()
        run: |
          LAST_MSG=$(git log -1 --pretty=%s)
          PREV_MSG=$(git log -2 --pretty=%s | tail -n1)
          echo "LAST: $LAST_MSG"
          echo "PREV: $PREV_MSG"
          if [[ "$LAST_MSG" == 'update results' ]] && [[ "$PREV_MSG" == 'update results' ]]; then
            git checkout testing
            echo "Merging last two update commits..."
            git reset --soft HEAD~2
            git commit -m "update results"
            git push origin testing --force
            echo "Done!"
          fi

      - name: "Show Results üèÅ"
        if: always()
        run: |
          tested=$(wc -l < tested.list 2>/dev/null || echo 0)
          failed=$(wc -l < failed.list 2>/dev/null || echo 0)
          fail=$(wc -l < fail.list 2>/dev/null || echo 0)
          count=$(find programs/x86_64/ -type f | wc -l)
          remaining=$((count - tested - failed - fail))
          (( remaining < 0 )) && remaining=0
          echo "### üèÅ $tested tested" >> $GITHUB_STEP_SUMMARY
          echo "## üõÖ $remaining to test" >> $GITHUB_STEP_SUMMARY
          echo "üò± $failed fails listed" >> $GITHUB_STEP_SUMMARY
          echo ":x: $fail failed now" >> $GITHUB_STEP_SUMMARY
          if [[ -f fail.list ]]; then
            echo "üíÄ" >> $GITHUB_STEP_SUMMARY
            cat fail.list >> $GITHUB_STEP_SUMMARY
          fi

  delete-all-artifacts:
    name: "cleanup üßπ"
    runs-on: ubuntu-22.04
    needs: update-tested-list
    if: always()
    steps:
      - name: "Check out repository üèÉ"
        uses: actions/checkout@v4

      - name: "Delete Artifacts üôà"
        env:
          REPO_NAME: ${{ github.repository }}
          RUN_ID: ${{ github.run_id }}
          TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Fetching and deleting all artifacts for run ID: $RUN_ID"
          PAGE=1
          DELETED=0
          while true; do
            RESPONSE=$(curl -s -H "Authorization: token $TOKEN" \
             "https://api.github.com/repos/$REPO_NAME/actions/runs/$RUN_ID/artifacts?per_page=100&page=$PAGE")
            ARTIFACT_IDS=$(echo "$RESPONSE" | jq -r '.artifacts[].id')
            if [[ -z "$ARTIFACT_IDS" ]]; then
              echo "No more artifacts to delete. Total deleted: $DELETED"
              break
            fi
            for ARTIFACT_ID in $ARTIFACT_IDS; do
              echo "Deleting artifact with ID: $ARTIFACT_ID"
              curl -X DELETE -s -H "Authorization: token $TOKEN" \
               "https://api.github.com/repos/$REPO_NAME/actions/artifacts/$ARTIFACT_ID"
              ((DELETED+=1))
            done
            ((PAGE+=1))
          done
          echo "Successfully deleted $DELETED artifacts."

  already-tested:
    name: "all üèÅ"
    runs-on: ubuntu-22.04
    needs: generate-matrix
    if: ${{ needs.generate-matrix.outputs.skip == 'true' }}
    steps:
      - name: "Mark as Successfull"
        run: echo "All apps already tested..." >> $GITHUB_STEP_SUMMARY
