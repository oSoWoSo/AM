#!/usr/bin/env bash

AMPATH="/opt/am"
AMREPO="https://raw.githubusercontent.com/ivan-hc/AM-application-manager/main"
arch=$(printf '%s\n' "$HOSTTYPE")
currentuser=$(printf '%s\n' "$USER")

for name in "ar" "cat" "chmod" "chown" "curl" "grep" "sed" "tar" "unzip" "wget" "zsync"; do
  test -x "$(command -v $name 2>/dev/null)" \
  || { printf "\n%s\n" "ERROR: $name not found, required by some installation scripts."; deps=1; };
done; [ "$deps" != "1" ] || { printf "\nInstall the above and try again\n\n"; exit 1; }

rm -rf "$AMPATH/options"
printf \
  "%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n" \
  "about" "backup" "clean" "download" "files" "install" "list" \
  "lock" "overwrite" "query" "remove" "sync" "template" "unlock" \
  "update" "web" "--disable-completion" "--enable-completion" "--home" \
  >> $AMPATH/options

case "$1" in
  '') printf "\n USAGE: 'am [option]'\n        'am [option] [argument]'\n\n Run the 'am -h' command to find out more\n\n";;
  '-h'|'help') echo '
 ---------------------------------------------------------------------------
                    _____                    _____                                                                           
                   /\    \                  /\    \         
                  /::\    \                /::\____\        
                 /::::\    \              /::::|   |        
                /::::::\    \            /:::::|   |        
               /:::/\:::\    \          /::::::|   |        
              /:::/__\:::\    \        /:::/|::|   |        
             /::::\   \:::\    \      /:::/ |::|   |        
            /::::::\   \:::\    \    /:::/  |::|___|______  
           /:::/\:::\   \:::\    \  /:::/   |::::::::\    \ 
          /:::/  \:::\   \:::\____\/:::/    |:::::::::\____\
          \::/    \:::\  /:::/    /\::/    / ~~~~~/:::/    /
           \/____/ \:::\/:::/    /  \/____/      /:::/    / 
                    \::::::/    /               /:::/    /  
                     \::::/    /               /:::/    /   
                     /:::/    /               /:::/    /    
                    /:::/    /               /:::/    /     
                   /:::/    /               /:::/    /      
                  /:::/    /               /:::/    /       
                  \::/    /                \::/    /        
                   \/____/                  \/____/         


 ▄▀█ █▀█ █▀█ █░░ █ █▀▀ ▄▀█ ▀█▀ █ █▀█ █▄░█   █▀▄▀█ ▄▀█ █▄░█ ▄▀█ █▀▀ █▀▀ █▀█
 █▀█ █▀▀ █▀▀ █▄▄ █ █▄▄ █▀█ ░█░ █ █▄█ █░▀█   █░▀░█ █▀█ █░▀█ █▀█ █▄█ ██▄ █▀▄

                             by Ivan Alex HC

 ---------------------------------------------------------------------------

 >> The database of all AppImage packages and portable apps for GNU/Linux << 
  
 ---------------------------------------------------------------------------
  
 USAGE: 
 
    am {OPTION}
    
    am {OPTION} {PROGRAM}
 
 OPTIONS:
    
    -a, about		Shows more info about one or more apps, each page 
    			comes from https://portable-linux-apps.github.io
    
    -b, backup		Save the current version of one or more apps, each
    			snapshot is stored into a dedicated directory in
    			your $HOME (i.e. ~/.am-snapshots/$PROGRAM). To 
    			restore the snapshots see the "-o" option. 
    
    -c, clean		Removes all the unnecessary files and folders.
    
    -d, download	Download one or more installation scripts from the 
    			repository.
    
    -f, files		Shows the installed programs.
    
    -h, help		Prints this message.
    
    -H, --home		Set a dedicated $HOME directory for one or more 
    			AppImage packages.
    			
    -i, install		Install one or more programs.
    
    -l, list		Shows the list of apps available in the repository.
    
    -o, overwrite	Overwrite the existing version of the program with
    			a previously saved snapshot (see "-b").
    			
    -q, query		Use one or more keywords to search for in the list 
    			of available applications.
    			
    -r, remove		Removes one or more apps (requires confirmation).
    
    -R			Removes one or more apps without asking.
    
    -s, sync		Updates "AM" to a more recent version.
    
    -t, template	This option allows you to generate a custom script
    			from a list of different templates that may be vary
    			according to the kind of program you want to upload
    			a script for.
    			
    -u, -U, update	Update all apps (included this script) or just one.
    
    -v, version		Shows the version of "AM".
    
    -w, web		Shows the URLs of the sites/sources of then app.
    
    --disable-completion Removes the /etc/bash_completion.d/am-completion.sh 
    			script needed to use bash-completion in AM.
    			
    --enable-completion	Create a bash completion script in /etc to complete 
    			a keyword with the TAB key using the names of all 
    			installable applications in the "AM" repository.
    			
    lock		Lock the selected app to the current version, this 
    			only works if exists a dedicated "AM-updater".
    			
    unlock		Unlock updates for the selected program. This option
    			nulls the option "lock".
  		
  --------------------------------------------------------------------------
  
  For more information and tutorials visit the main repository on Github
  
  SITE: https://github.com/IVAN-HC/AM-APPLICATION-MANAGER
  
  ' | less ;;
  '-a'|'about')
  	if [ -n "$SUDO_COMMAND" ]; then echo -e "\n WARNING: You don't need to run the option '$1' with SUDO.\n"; exit; fi
	while [ -n "$1" ]
	do
	rm -f $AMPATH/.cache/about-args
	echo $@ | tr ' ' '\n' >> $AMPATH/.cache/about-args && echo STOP >> $AMPATH/.cache/about-args
	ARGS=$(tail +2 $AMPATH/.cache/about-args)
	for arg in $ARGS; do
	for var in $arg; do
	if [ $arg == STOP ]; then
	exit
	else
	if curl --output /dev/null --silent --head --fail https://raw.githubusercontent.com/Portable-Linux-Apps/Portable-Linux-Apps.github.io/main/apps/$arg.md  1>/dev/null; then
	echo "-----------------------------------------------------------------------"
	case $arg in
	*) rm -R -f $AMPATH/.cache/about; mkdir $AMPATH/.cache/about;
		cd $AMPATH/.cache/about && wget -q https://raw.githubusercontent.com/Portable-Linux-Apps/Portable-Linux-Apps.github.io/main/apps/$arg.md &&
		sed -i '/^\s*#/ d' $arg.md; sed -i '/^\s*!/ d' $arg.md; sed -i '/\[Applications]/d' $arg.md; sed -i '/\ --- /d' $arg.md
		echo " PACKAGE: $(echo $arg | tr a-z A-Z)"
		if test -f /opt/$arg/remove; then
			echo " STATUS: INSTALLED, ABOUT $(du -sm /opt/$arg | awk '{print $1}' ) MB OF DISK SPACE IN USE"
		else
			echo " STATUS: NOT INSTALLED"
		fi
		cat ./$arg.md &&
		echo "-----------------------------------------------------------------------" && break
	esac
	else
	echo ' "'$arg'" is not a valid argument' | tr a-z A-Z && break
	fi
	fi
	done
	done
	done
	shift;;
  '-b'|'backup')
    	if [ -n "$SUDO_COMMAND" ]; then echo -e "\n WARNING: You don't need to run the option '$1' with SUDO.\n"; exit; fi
	while [ -n "$1" ]
	do
	rm -f $AMPATH/.cache/backup-args
	echo $@ | tr ' ' '\n' >> $AMPATH/.cache/backup-args && echo STOP >> $AMPATH/.cache/backup-args
	ARGS=$(tail +2 $AMPATH/.cache/backup-args)
	for arg in $ARGS; do
	for var in $arg; do
	if [ $arg == STOP ]; then
	exit
	else
	case $arg in
	'') echo " Specify the name of a program to back up"; echo ""; exit;;
	*) if test -f /opt/$arg/remove; then
		echo ""; read -p " Do you wish to backup the current version of $arg (y,N)?" yn
		case $yn in
		[Yy]* ) mkdir -p "$(xdg-user-dir USER)/.am-snapshots/$arg"; cp -r /opt/$arg "$(xdg-user-dir USER)/.am-snapshots/$arg/$(date +%F-%X)"; echo ""; echo " SAVED in $(xdg-user-dir USER)/.am-snapshots/$arg"; echo "" ; break;;
		[Nn]*|* ) echo ""; echo " OPERATION ABORTED!"; echo ""; break;;	
		esac
	else
		echo ""; echo " '$arg' is not a valid argument or is not installed."; echo ""; break;
	fi
	esac
	fi
	done
	done
	done
	shift;;
  '-c'|'clean') 
    	if [ -n "$SUDO_COMMAND" ]; then echo -e "\n WARNING: You don't need to run the option '$1' with SUDO.\n"; exit; fi
  	echo -e "\n Cleaning of temporary files and folders in progress...\n" && sleep 0.1 &&
  	for i in {1000..0000}; do echo -ne " $i\r" && sleep 0.0001; done
  	rm -R -f $AMPATH/appdb; rm -R -f $AMPATH/.cache/*; rm -R -f /opt/*/tmp; echo -e "\n DONE!\n";;
  '-d'|'download')
    	if [ -n "$SUDO_COMMAND" ]; then echo -e "\n WARNING: You don't need to run the option '$1' with SUDO.\n"; exit; fi
	while [ -n "$1" ]
	do
	rm -f $AMPATH/.cache/download-args
	echo $@ | tr ' ' '\n' >> $AMPATH/.cache/download-args && echo STOP >> $AMPATH/.cache/download-args
	ARGS=$(tail +2 $AMPATH/.cache/download-args)
	for arg in $ARGS; do
	for var in $arg; do
	if [ $arg == STOP ]; then
	exit
	else
	case $arg in
	am) for var in $arg;
		do read -p ' Do you wish to open the main script of "AM" (y,N)?' yn
			case $yn in
			[Yy]* ) xdg-open $AMPATH/APP-MANAGER; break;;
			[Nn]*|* ) break;;
		esac
	done;; 
	*) if curl --output /dev/null --silent --head --fail $AMREPO/programs/$arch/$arg  1>/dev/null; then
		echo ""; echo ' "'$arg'" installation script downloaded! ' | tr a-z A-Z
		cd $(xdg-user-dir DESKTOP); wget -q $AMREPO/programs/$arch/$arg; echo ""; break;
	elif curl --output /dev/null --silent --head --fail $AMREPO/testing/$arch/$arg  1>/dev/null; then
		echo ""; echo '  "'$arg'" downloaded from "testing", the unstable branch ' | tr a-z A-Z; echo ""; echo ' WARNING! PROGRAMS COMING FROM "TESTING" ARE BROKEN, USE AT YOUR OWN RISK!'
		cd $(xdg-user-dir DESKTOP); wget -q $AMREPO/testing/$arch/$arg; echo ""; break;
	else
		echo ""; echo ' "'$arg'" is NOT a valid argument, check the list (command "am -l")'; echo ""; break;
	fi
	esac
	fi
	done
	done
	done
	shift;;
  '-f'|'files')
    	if [ -n "$SUDO_COMMAND" ]; then echo -e "\n WARNING: You don't need to run the option '$1' with SUDO.\n"; exit; fi
  	echo ""; echo $(echo "YOU HAVE INSTALLED "; cd /opt && find . -type f -name 'remove' 2>/dev/null | sed -r 's|/[^/]+$||' | sort | uniq | wc -l;
  	echo " STANDALONE PROGRAMS MANAGED BY THE 'AM' COMMAND:"); echo "";
  	cd /opt && find -name 'remove' -printf "%h\n" 2>/dev/null | sort -u | echo $(xargs -n 1 basename 2> /dev/null) | du -sh $(find . -type f -name 'remove' 2>/dev/null | sed -r 's|/[^/]+$||' | sort | uniq | cut -c 3-) | awk '{ print " ◆ "$2 " - " $1"iB of disk space used"}' | grep -w -v "◆ ."; echo "" ;;
  '-H'|'--home')
    	if [ -n "$SUDO_COMMAND" ]; then echo -e "\n WARNING: You don't need to run the option '$1' with SUDO.\n"; exit; fi
    	while [ -n "$1" ]
	do
	rm -f $AMPATH/.cache/home-args
	echo $@ | tr ' ' '\n' >> $AMPATH/.cache/home-args && echo STOP >> $AMPATH/.cache/home-args
	ARGS=$(tail +2 $AMPATH/.cache/home-args)
	for arg in $ARGS; do
	for var in $arg; do
	if [ $arg == STOP ]; then
		exit
	else
	cd /opt
	if ! test -d ./$arg; then
		echo ' ERROR: "'$arg'" is not installed'
	else
	case $arg in
    	*) keyword=$(grep -hios appimage ./$arg/AM-updater ./$arg/version | tail -1 | tr A-Z a-z 2> /dev/null)
    	if [ "$keyword" = "appimage" ]; then
  		cd ./$arg
    		./$arg --appimage-extract AppRun > /dev/null 2>&1
    		if test -f ./squashfs-root/AppRun; then
    			mkdir -p ./$arg.home
    			echo ' Setting $HOME to /opt/'$arg'/'$arg'.home for this AppImage'
    			rm -R -f ./squashfs-root; break
    		elif test -h ./squashfs-root/AppRun; then
    			mkdir -p ./$arg.home
    			echo ' Setting $HOME to /opt/'$arg'/'$arg'.home for this AppImage'
    			rm -R -f ./squashfs-root; break
    		else
    			echo ' ERROR: "'$arg'" is NOT an AppImage'; break
    		fi
    		else echo ' ERROR: "'$arg'" is NOT an AppImage'; break
    	fi
    	esac
    	fi
    	fi
    	done
    	done
    	done;;
  '-i'|'install')
	while [ -n "$1" ]
	do
	sudo echo ""
	echo -e "-----------------------------------------------------------------------\n >> START OF ALL INSTALLATION PROCESSES <<\n-----------------------------------------------------------------------"
	rm -f $AMPATH/.cache/install-args
	rm -R -f $AMPATH/.cache/installed
	echo $@ | tr ' ' '\n' >> $AMPATH/.cache/install-args 
	echo STOP >> $AMPATH/.cache/install-args
	ARGS=$(tail +2 $AMPATH/.cache/install-args)
	for arg in $ARGS; do
	for var in $arg; do
	if [ $arg == STOP ]; then
		if test -f $AMPATH/.cache/installed; then
			echo -e "\n-----------------------------------------------------------------------\n >> END OF ALL INSTALLATION PROCESSES <<\n-----------------------------------------------------------------------\n\n THE FOLLOWING NEW PROGRAMS HAVE BEEN INSTALLED:\n"
			echo -e "\n-----------------------------------------------------------------------" >> $AMPATH/.cache/installed
			cat $AMPATH/.cache/installed | grep -w -v "◆ am"
			exit
		else
			exit
		fi
	else
	echo ""
	case $arg in
	am) echo '"AM" IS ALREADY INSTALLED!'; break;;
	*) if test -f /opt/$arg/remove; then
		echo ' ERROR: "'$arg'" is already installed, please try to remove it first' && echo ""; break;
	else
		if curl --output /dev/null --silent --head --fail $AMREPO/programs/$arch/$arg  1>/dev/null; then
		case $arg in
		*) for var in $arg;
			do cd $AMPATH/.cache; mkdir -p tmp; cd tmp; wget -q $AMREPO/programs/$arch/$arg; cd ..; mv ./tmp/$arg ./$arg; rmdir ./tmp;
			chmod a+x ./$arg
			sed -i "s#wget #wget -q --show-progress #g" ./$arg
			sed -i 's#$(wget -q --show-progress #$(wget -q #g' ./$arg
			sed -i 's#wget http#wget -q http#g' ./$arg
			sed -i "s#rm #rm -f #g" ./$arg
			sed -i "s#form -f #form #g" ./$arg
			sed -i "s#unzip #unzip -qq #g" ./$arg
			sed -i 's/currentuser=/#currentuser=/g' ./$arg
			sed -i 's/chown -R $currentuser/#chown -R $currentuser/g' ./$arg
			sed -i '/# MESSAGE/,$d' ./$arg
			sed -i 's# /opt/$APP/icons/$APP# /opt/$APP/icons/$APP 2> /dev/null#g' ./$arg
			sed -i 's#.svg;#.svg 2> /dev/null;#g' ./$arg
			sed -i 's#programs/.icons/$APP.svg#programs/.icons/$APP.svg 2> /dev/null;#g' ./$arg
			sed -i 's#*.desktop ./$APP.desktop#*.desktop ./$APP.desktop 2> /dev/null;#g' ./$arg
			echo -ne " ◆ RUNNING THE INSTALLATION SCRIPT FOR $(echo '"'$arg'"' | tr a-z A-Z)... \r" && sleep 3 &&
			sudo ./$arg | less -E && echo -ne "                                                                          \r" &&
			echo -ne " ◆ CONFIGURING $(echo '"'$arg'"' | tr a-z A-Z)...\r" && sleep 2 && echo -ne "                                                                          \r" &&
			sudo chown -R $currentuser /opt/$(cd /opt && ls -td * | head -1) 2> /dev/null
			echo -ne " ◆ $(echo '"'$arg'"' | tr a-z A-Z) INSTALLED ($(du -sm /opt/$(cd /opt && ls -td * | head -1) | awk '{print $1}' ) MB OF DISK SPACE)\n"
			sudo rm $AMPATH/.cache/$arg
			unset $LATESTDIR
			LATESTDIR=$(cd /opt && ls -td * | head -1)
				if test -f /opt/$LATESTDIR/remove; then
					echo " ◆ $LATESTDIR" >> $AMPATH/.cache/installed &&
					chown -R $currentuser $AMPATH/.cache/about 2> /dev/null;
				else
					echo " INSTALLATION ABORTED!";
				fi
			break; done
			esac
		else
			echo ' "'$arg'" is NOT a valid argument, please try again!'; echo ""; break;
		fi			
	fi
	esac
	fi
	done
	done
	done
	shift;;
  '-l'|'list')
    	if [ -n "$SUDO_COMMAND" ]; then echo -e "\n WARNING: You don't need to run the option '$1' with SUDO.\n"; exit; fi
  	rm -R -f $AMPATH/$arch-apps $AMPATH/list && wget -q $AMREPO/programs/$arch-apps -P $AMPATH && echo -e "$(cat $AMPATH/$arch-apps | awk -v FS="(◆ | : )" '{print $2}')" >> $AMPATH/list
	cd $AMPATH && cat options >> list 2>/dev/null
	MESSAGE=$(echo " YOU HAVE INSTALLED $(cd /opt && find -name 'remove' -printf "%h\n" 2>/dev/null | sort -u | wc -l) APPLICATIONS OUT OF $(grep -e "$" -c $AMPATH/$arch-apps) AVAILABLE")
	echo -e "\n$MESSAGE\n\n LIST OF THE $(grep -e "$" -c $AMPATH/$arch-apps) APPLICATIONS AVAILABLE IN THE 'AM' REPOSITORY:\n\n$(cat $AMPATH/$arch-apps)" | less -I
	echo -e "\n $MESSAGE\n";;
  '-o'|'overwrite')
    	if [ -n "$SUDO_COMMAND" ]; then echo -e "\n WARNING: You don't need to run the option '$1' with SUDO.\n"; exit; fi
	while [ -n "$1" ]
	do
	rm -f $AMPATH/.cache/overwrite-args
	echo $@ | tr ' ' '\n' >> $AMPATH/.cache/overwrite-args && echo STOP >> $AMPATH/.cache/overwrite-args
	ARGS=$(tail +2 $AMPATH/.cache/overwrite-args)
	for arg in $ARGS; do
	for var in $arg; do
	if [ $arg == STOP ]; then
	exit
	else
	case $arg in
	am) am -s; break;;
	'') echo " Specify the name of a program to overwrite"; echo ""; break;;
	*) if test -f /opt/$arg/remove; then
		echo ""; read -p " Do you wish to overwrite this version of $arg with an old one (y,N)?" yn
		case $yn in
		[Yy]* ) echo ""; echo " Please, select a snapshot:"; sleep 1; echo ""; snaps=$(ls "$(xdg-user-dir USER)/.am-snapshots/$arg/" | sort -u); echo "$snaps"; echo ""
			read -p " ENTER THE NAME OF THE SNAPSHOT?" response;
			case $response in
			'') echo ""; echo " NO SNAPSHOT SELECTED, OPERATION ABORTED!"; echo ""; exit;;
			*) for var in $(echo $snaps); do
				if [ -d $(xdg-user-dir USER)/.am-snapshots/$arg/$response ]; then
					cp -r --backup=t $(xdg-user-dir USER)/.am-snapshots/$arg/$response/* /opt/$arg/
	  				rm -R -f /opt/$arg/*~; echo ""; echo " RESTORE COMPLETED SUCCESSFULLY!"; echo ""; break;
				else
					echo ""; echo " NO SNAPSHOT SELECTED, RETRY!" >&2;
				fi
				done;;
			esac;;
		[Nn]*|* ) echo ""; echo " OPERATION ABORTED!"; echo ""; break;;	
		esac
	else
		echo ""; echo " '$arg' is not a valid argument or is not installed."; echo ""; break;
	fi
	esac
	fi
	done
	done
	done
	shift;;
  '-q'|'query')
    	if [ -n "$SUDO_COMMAND" ]; then echo -e "\n WARNING: You don't need to run the option '$1' with SUDO.\n"; exit; fi
  	rm -R -f $AMPATH/$arch-apps $AMPATH/list && wget -q $AMREPO/programs/$arch-apps -P $AMPATH && echo -e "$(cat $AMPATH/$arch-apps | awk -v FS="(◆ | : )" '{print $2}')" >> $AMPATH/list
	cd $AMPATH && cat options >> list
	ARGS=$(echo "$@" | sed 's/-q //')
	echo ""
	echo ' Search results for "'$ARGS'" in the list of available programs:' | tr a-z A-Z
	echo ""
	grep -i -E "$2" $AMPATH/$arch-apps | grep -i -E "$3" | grep -i -E "$4" | grep -i -E "$5" | grep -i -E "$6" | grep -i -E "$7" | grep -i -E "$8" | grep -i -E "$9"
	echo ""
	exit;;
  '-r'|'remove')
	while [ -n "$1" ]
	do
	rm -f $AMPATH/.cache/remove-args
	echo $@ | tr ' ' '\n' >> $AMPATH/.cache/remove-args && echo STOP >> $AMPATH/.cache/remove-args
	ARGS=$(tail +2 $AMPATH/.cache/remove-args)
	for arg in $ARGS; do
	for var in $arg; do
	if [ $arg == STOP ]; then
	exit
	else
	if ls /opt/$arg > /dev/null 2>&1; then
	case $arg in
	*) for var in $arg; do
	sudo echo "" > /dev/null; read -p ' ◆ DO YOU WISH TO REMOVE "'$(echo $arg | tr a-z A-Z)'" (Y,n)?' yn
		case $yn in
		[Nn]* ) echo ' - "'$(echo $arg | tr a-z A-Z)'" HAS NOT BEEN REMOVED!'; echo ""; break;;
		[Yy]*|* ) sudo /opt/$arg/remove && echo "" && echo ' ◆ "'$(echo $arg | tr a-z A-Z)'" HAS BEEN SUCCESSFULLY REMOVED!' && break; break;;
	esac
	done;;
	esac
	else
	echo -e " ERROR: '$arg' is not a valid argument or is not installed! \n\n List of the installed programs / valid arguments:\n"
	cd /opt && find -name 'remove' -printf "%h\n" 2>/dev/null | sort -u | xargs -n 1 basename; echo "" ; break;
	fi
	fi
	done
	done
	done
	shift;;
  '-R')
	while [ -n "$1" ]
	do
	rm -f $AMPATH/.cache/remove-args
	echo $@ | tr ' ' '\n' >> $AMPATH/.cache/remove-args && echo STOP >> $AMPATH/.cache/remove-args
	ARGS=$(tail +2 $AMPATH/.cache/remove-args)
	for arg in $ARGS; do
	for var in $arg; do
	if [ $arg == STOP ]; then
	exit
	else
	if ls /opt/$arg > /dev/null 2>&1; then
	case $arg in
	*) for var in $arg; do
	sudo /opt/$arg/remove && echo "" && echo ' ◆ "'$(echo $arg | tr a-z A-Z)'" HAS BEEN SUCCESSFULLY REMOVED!' && break; break
	done;;
	esac
	else
	echo -e " ERROR: '$arg' is not a valid argument or is not installed! \n\n List of the installed programs / valid arguments:\n"
	cd /opt && find -name 'remove' -printf "%h\n" 2>/dev/null | sort -u | xargs -n 1 basename; echo "" ; break;
	fi
	fi
	done
	done
	done
	shift;;
  '-s'|'sync')
    	if [ -n "$SUDO_COMMAND" ]; then echo -e "\n WARNING: You don't need to run the option '$1' with SUDO.\n"; exit; fi
  	rm -R -f $AMPATH/$arch-apps $AMPATH/list && wget -q $AMREPO/programs/$arch-apps -P $AMPATH && echo -e "$(cat $AMPATH/$arch-apps | awk -v FS="(◆ | : )" '{print $2}')" >> $AMPATH/list
	cd $AMPATH && cat options >> list
	echo ""; echo ' SYNCHRONIZING "AM" VERSION '$(am -v)'...'; sleep 0.5; echo "";
  	rm -R -f $AMPATH/.cache/* 1>/dev/null; cd $AMPATH/.cache; wget -q $AMREPO/APP-MANAGER && chmod a+x ./APP-MANAGER; cd ..;
  	mv $AMPATH/.cache/APP-MANAGER $AMPATH; chmod 777 $AMPATH; echo ' THE "AM" SCRIPT IS NOW UPDATED TO THE '$(am -v)' VERSION! '; echo "";;
  '-t'|'template'|'convert')
    	if [ -n "$SUDO_COMMAND" ]; then echo -e "\n WARNING: You don't need to run the option '$1' with SUDO.\n"; exit; fi
	while [ -n "$1" ]
	do
	rm -f $AMPATH/.cache/template-args
	echo $@ | tr ' ' '\n' >> $AMPATH/.cache/template-args && echo STOP >> $AMPATH/.cache/template-args
	ARGS=$(tail +2 $AMPATH/.cache/template-args)
	for arg in $ARGS; do
	for var in $arg; do
	if [ $arg == STOP ]; then
	exit
	else
	case $arg in
	*) for var in $arg
	do
	cd $(xdg-user-dir DESKTOP)
	echo "##############################################################"; echo ""
	echo ' Create templates for "'$arg'"
	' | tr a-z A-Z
	echo "--------------------------------------------------------------"; echo "" 
	echo " EACH MODEL IS BASED ON A DIFFERENT METHOD OF BUILDING/UPDATING THE PROGRAM.
	"
	echo ' PLEASE, SELECT A TEMPLATE FOR "'$(echo $arg | tr a-z A-Z)'": 
	'
	echo '  0) APPIMAGE updatable with "appimageupdatetool"' | tr a-z A-Z
	echo '  1) APPIMAGE updatable using a separated zsync file' | tr a-z A-Z
	echo "  2) ANY ARCHIVE from github.com (always updatable)" | tr a-z A-Z
	echo "  3) ANY ARCHIVE from AUR (always updatable)" | tr a-z A-Z
	echo "  4) APPIMAGE, build your own with pkg2appimage and appimagetool" | tr a-z A-Z
	echo "  5) APPIMAGE, build your own with pkg2appimage using a custom AppRun" | tr a-z A-Z
	echo '  6) WEBAPP based on a Firefox profile (requires "firefox" in $PATH)' | tr a-z A-Z
	echo "  7) APPIMAGE from github.com (always updatable)" | tr a-z A-Z
	echo "  8) APPIMAGE from any website out there (for advanced users)" | tr a-z A-Z
	echo "  9) APPIMAGE from the AUR (always updatable)" | tr a-z A-Z
	echo "  10) ANY PROGRAM from any website (for advanced users)" | tr a-z A-Z
	echo " "
	read -r -p " WHAT KIND OF PROGRAM DO YOU WANT TO WRITE A SCRIPT FOR? : " response
	case "$response" in
    	# APPIMAGE UPDATABLE USING APPIMAGEUPDATETOOL
    	0) mkdir -p ./am-scripts ./am-scripts/$arch ./am-scripts/WEBPAGE &&
    		# DOWNLOAD THE TEMPLATE AND CONVERT THE ARGUMENT INTO A COMMAND
    		wget -c -q $AMREPO/templates/AM-SAMPLE-for-appimageupdate -O ./am-scripts/$arch/$arg &&
    		sed -i s/SAMPLE/$arg/g ./am-scripts/$arch/$arg &&
    		# IF YOU CAN, USE A ONE-LINE COMMAND TO DOWNLOAD THE APPIMAGE
    		read -r -ep " USE A ONE-LINE COMMAND TO DOWNLOAD THE LATEST APPIMAGE $(echo -e '\n :') " response
    		case $response in
			*) mv ./am-scripts/$arch/$arg ./am-scripts/$arch/$arg.old
			sed -n '1,17p' ./am-scripts/$arch/$arg.old >> ./am-scripts/$arch/$arg
			echo ''$response'' >> ./am-scripts/$arch/$arg
			sed -n '19,105p' ./am-scripts/$arch/$arg.old >> ./am-scripts/$arch/$arg
			rm -f ./am-scripts/$arch/$arg.old;;
		esac   		
    		# ADD THE URL TO THE MAIN PAGE OF THE WEBSITE
		read -r -ep " ◆ ADD THE URL TO THE MAIN PAGE OF THE WEBSITE $(echo -e '\n : ')" RESPONSE
		case "$RESPONSE" in
		*) sed -i s#REPLACETHIS#$RESPONSE#g ./am-scripts/$arch/$arg
		esac
		echo "-----------------------------------------------------------------------"
		# ADD A DESCRIPTION FOR THIS APPLICATION
		read -r -ep " ◆ ADD A BRIEF DESCRIPTION FOR THIS APPLICATION $(echo -e '\n : ')" COMMENT
		case "$COMMENT" in
		*) 
		# CREATE A WEBPAGE FOR https://portable-linux-apps.github.io CONTAINING ALL THE INFO ABOUT THIS APP
		echo "# $(echo $arg | tr a-z A-Z)" >> ./am-scripts/WEBPAGE/$arg.md
		echo -e "\n $COMMENT\n\n SITE: $RESPONSE\n\n | [Applications](https://portable-linux-apps.github.io/apps.html) | [Home](https://portable-linux-apps.github.io)\n | --- | --- |" >> ./am-scripts/WEBPAGE/$arg.md &&
		# CREATE A NEW LINE FOR THE APPLICATION'S LIST
		echo "◆ $arg : $COMMENT" >> ./am-scripts/list
		esac
		echo "-----------------------------------------------------------------------"
		# END OF THIS FUNCTION
		echo -e "\n All files are saved in $(xdg-user-dir DESKTOP)/am-scripts\n";;
    	# APPIMAGE UPDATABLE USING ZSYNC
    	1) mkdir -p ./am-scripts ./am-scripts/$arch ./am-scripts/WEBPAGE &&
    		# DOWNLOAD THE TEMPLATE AND CONVERT THE ARGUMENT INTO A COMMAND
    		wget -c -q $AMREPO/templates/AM-SAMPLE-for-zsync -O ./am-scripts/$arch/$arg &&
    		sed -i s/SAMPLE/$arg/g ./am-scripts/$arch/$arg &&
    		# IF YOU CAN, USE A ONE-LINE COMMAND TO DOWNLOAD THE APPIMAGE
    		read -r -ep " USE A ONE-LINE COMMAND TO CHECK ONLY THE URL TO THE APPIMAGE $(echo -e '\n THE DEFAULT PROGRAM ASSIGNED TO DOWNLOAD THIS LINK WILL BE "WGET"\n USE YOUR BEST SKILLS TO GET THE URL OF THE LATEST VERSION AVAILABLE\n :') " response
    		case $response in
			*) mv ./am-scripts/$arch/$arg ./am-scripts/$arch/$arg.old
			sed -n '1,3p' ./am-scripts/$arch/$arg.old >> ./am-scripts/$arch/$arg
			echo 'URL=$('$response')' >> ./am-scripts/$arch/$arg
			sed -n '5,36p' ./am-scripts/$arch/$arg.old >> ./am-scripts/$arch/$arg
			echo 'URL=$('$response')' >> ./am-scripts/$arch/$arg
			sed -n '38,118p' ./am-scripts/$arch/$arg.old >> ./am-scripts/$arch/$arg
			rm -f ./am-scripts/$arch/$arg.old;;
		esac 	  
    		# ADD THE URL TO THE MAIN PAGE OF THE WEBSITE
		read -r -ep " ◆ ADD THE URL TO THE MAIN PAGE OF THE WEBSITE $(echo -e '\n : ')" RESPONSE
		case "$RESPONSE" in
		*) sed -i s#REPLACETHIS#$RESPONSE#g ./am-scripts/$arch/$arg
		esac
		echo "-----------------------------------------------------------------------"
		# ADD A DESCRIPTION FOR THIS APPLICATION
		read -r -ep " ◆ ADD A BRIEF DESCRIPTION FOR THIS APPLICATION $(echo -e '\n : ')" COMMENT
		case "$COMMENT" in
		*) 
		# CREATE A WEBPAGE FOR https://portable-linux-apps.github.io CONTAINING ALL THE INFO ABOUT THIS APP
		echo "# $(echo $arg | tr a-z A-Z)" >> ./am-scripts/WEBPAGE/$arg.md
		echo -e "\n $COMMENT\n\n SITE: $RESPONSE\n\n | [Applications](https://portable-linux-apps.github.io/apps.html) | [Home](https://portable-linux-apps.github.io)\n | --- | --- |" >> ./am-scripts/WEBPAGE/$arg.md &&
		# CREATE A NEW LINE FOR THE APPLICATION'S LIST
		echo "◆ $arg : $COMMENT" >> ./am-scripts/list
		esac
		echo "-----------------------------------------------------------------------"
		# END OF THIS FUNCTION
		echo -e "\n All files are saved in $(xdg-user-dir DESKTOP)/am-scripts\n";;
    	# DOWNLOAD ANY ARCHIVE FROM GITHUB
    	2) mkdir -p ./am-scripts ./am-scripts/$arch ./am-scripts/WEBPAGE &&
    		# DOWNLOAD THE TEMPLATE AND CONVERT THE ARGUMENT INTO A COMMAND
    		wget -c -q $AMREPO/templates/AM-SAMPLE-GitHub-generic -O ./am-scripts/$arch/$arg &&
    		sed -i s/SAMPLE/$arg/g ./am-scripts/$arch/$arg &&
		echo "-----------------------------------------------------------------------"
		# ADD THE NAME OF THE GITHUB REPOSITORY, ALSO ADD SOME BASIC INFO IF AVAILABLE
		read -r -ep " ◆ ADD THE NAME OF THE REPOSITORY (EXAMPLE 'NAME/REPOSITORY') $(echo -e '\n https://github.com/')" GITHUBREPO
		case "$GITHUBREPO" in
		*) sed -i s#REPLACETHIS#$GITHUBREPO#g ./am-scripts/$arch/$arg
		# GET THE DESCRIPTION OF THIS REPOSITORY TO ADD IN ALL CREATED FILES
		COMMENT=$(curl https://api.github.com/repos/$GITHUBREPO 2>/dev/null | grep description | sed 's/"description": "//' | sed 's/",//')
		# CREATE A WEBPAGE FOR https://portable-linux-apps.github.io CONTAINING ALL THE INFO ABOUT THIS APP
		echo "# $(echo $arg | tr a-z A-Z)" >> ./am-scripts/WEBPAGE/$arg.md
		echo -e "\n $COMMENT\n\n SITE: https://github.com/$GITHUBREPO\n\n | [Applications](https://portable-linux-apps.github.io/apps.html) | [Home](https://portable-linux-apps.github.io)\n | --- | --- |" >> ./am-scripts/WEBPAGE/$arg.md && 
		# CREATE A NEW LINE FOR THE APPLICATION'S LIST
		echo "◆ $arg : $COMMENT" >> ./am-scripts/list
		esac
		# ADD AN EXTENSION OR AN UNIQUE PART OF THE NAME OF THE ARCHIVE
		read -r -ep " ◆ ADD THE EXTENSION OR AN UNIQUE PART OF THE ARCHIVE'S NAME $(echo -e '\n EXAMPLE, "amd64.zip" OR "x64.tar" ): ')" EXTENSION
		case "$EXTENSION" in
		*) sed -i s#FILENAMEEXTENSION#$EXTENSION#g ./am-scripts/$arch/$arg
		esac
		# CHECK THE DOWNLOAD LINK, THE ONE THAT POINTS TO THE LATEST RELEASE, NOTE THAT IT MAY BE A DEVELOPMENT VERSION, ADD "/latest" AFTER "/releases" TO POINT TO THE LAST STABLE VERSION
		read -p ' Do you wish to check the link to the latest version (Y,n)?' yn
		case $yn in
			'N'|'n') ;;
			'Y'|'y'|*) echo ""; wget -q https://api.github.com/repos/$GITHUBREPO/releases -O - | grep -w -v i386 | grep -w -v i686 | grep -w -v aarch64 | grep -w -v arm64 | grep -w -v armv7l | grep browser_download_url | grep -i "$EXTENSION" | cut -d '"' -f 4 | head -1
			echo -e "\n The URL above is an example of what both\n the install and update scripts will point to.\n";;
		esac
		read -p ' If correct, press "ENTER", otherwise press "N": ' yn
		case $yn in
			'N'|'n') read -p ' Press 1 to add something or 2 to remove something: ' response
				case "$response" in
				1) read -r -ep ' URL must contain ("x64", "x86_64"... or leave blank): ' response
					case "$response" in
					'') ;;
					*) sed -i 's#browser_download_url#browser_download_url | grep -i '$response' #g' ./am-scripts/$arch/$arg
					read -p ' Do you wish to check the link for the last time (Y,n)?' yn
					case $yn in
					'N'|'n') ;;
					'Y'|'y'|*) echo ""; wget -q https://api.github.com/repos/$GITHUBREPO/releases -O - | grep -w -v i386 | grep -w -v i686 | grep -w -v aarch64 | grep -w -v arm64 | grep -w -v armv7l | grep browser_download_url | grep -i "$response" | grep -i $EXTENSION | cut -d '"' -f 4 | head -1
					echo -e "\n The URL above is an example of what both\n the install and update scripts will point to.\n";;
					esac;;
					esac;;
				2) read -r -ep ' URL must NOT contain ("txt", "ARM"... or leave blank): ' response
					case "$response" in
					'') ;;
					*) sed -i 's#browser_download_url#browser_download_url | grep -w -v '$response' #g' ./am-scripts/$arch/$arg
					read -p ' Do you wish to check the link for the last time (Y,n)?' yn
					case $yn in
					'N'|'n') ;;
					'Y'|'y'|*) echo ""; wget -q https://api.github.com/repos/$GITHUBREPO/releases -O - | grep -w -v i386 | grep -w -v i686 | grep -w -v aarch64 | grep -w -v arm64 | grep -w -v armv7l | grep browser_download_url | grep -w -v "$response" | grep -i $EXTENSION | cut -d '"' -f 4 | head -1
					echo -e "\n The URL above is an example of what both\n the install and update scripts will point to.\n";;
					esac;;
					esac;;
				esac;;
			'Y'|'y'|*) ;;
		esac
		echo "-----------------------------------------------------------------------"
		# IF YOU CAN, USE A ONE-LINE COMMAND TO EXTRACT THE ARCHIVE, CREATE ICONS AN MORE
    		echo -e "\n NOW, SUPPOSE YOU DOWNLOADED THE ARCHIVE TO './tmp', THEN RUN \n THE COMMAND 'cd ..'. WE WILL STILL NEED TO:\n\n  - extract the archive;\n  - transfer content into the directory we are in;\n  - include an icon and .desktop file in the same place (if needed).\n\n WHAT ARE THE COMMANDS TO RUN BEFORE './tmp' IS REMOVED?\n" 
    		read -r -ep " IF YOU CAN, RESUME EVERYTHING IN ONE LINE COMMAND $(echo -e '\n :') " response
    		case $response in
			*) mv ./am-scripts/$arch/$arg ./am-scripts/$arch/$arg.old
			sed -n '1,22p' ./am-scripts/$arch/$arg.old >> ./am-scripts/$arch/$arg
			echo "$response" >> ./am-scripts/$arch/$arg
			sed -n '24,43p' ./am-scripts/$arch/$arg.old >> ./am-scripts/$arch/$arg
			echo "  $response" >> ./am-scripts/$arch/$arg
			sed -n '45,80p' ./am-scripts/$arch/$arg.old >> ./am-scripts/$arch/$arg
			rm -f ./am-scripts/$arch/$arg.old;;
		esac
		echo "-----------------------------------------------------------------------"
		# END OF THIS FUNCTION
		echo -e "\n All files are saved in $(xdg-user-dir DESKTOP)/am-scripts\n";;
    	# DOWNLOAD ANY ARCHIVE FROM THE ARCH USER REPOSITORY
	3) mkdir -p ./am-scripts ./am-scripts/$arch ./am-scripts/WEBPAGE &&
		# DOWNLOAD THE TEMPLATE AND CONVERT THE ARGUMENT INTO A COMMAND, ALSO ADD SOME BASIC INFO IF AVAILABLE
		wget -c -q $AMREPO/templates/AM-SAMPLE-AUR-generic -O ./am-scripts/$arch/$arg &&
		sed -i s/SAMPLE/$arg/g ./am-scripts/$arch/$arg &&
		echo "-----------------------------------------------------------------------"
		read -r -ep " ◆ ADD THE REAL NAME OF THE PACKAGE BASE, ON AUR$(echo -e '\n : ')" AUR
		case "$AUR" in
		*) sed -i s#AURREPO#$AUR#g ./am-scripts/$arch/$arg
		esac
		# ADD AN EXTENSION OR AN UNIQUE PART OF THE NAME OF THE ARCHIVE
		read -r -ep " ◆ ADD THE EXTENSION OR AN UNIQUE PART OF THE ARCHIVE'S NAME $(echo -e '\n EXAMPLE, "amd64", "x86_64", "tar.gz"... ): ')" EXTENSION
		case "$EXTENSION" in
		*) sed -i s#FILENAMEEXTENSION#$EXTENSION#g ./am-scripts/$arch/$arg
		esac
		# ADD THE URL TO THE MAIN PAGE OF THE WEBSITE
		UPSTREAMURL=$(wget -q https://aur.archlinux.org/packages/$AUR -O - | grep -A3 "Upstream URL" | tail -1 | cut -c 30- | cut -f1 -d'"')
		sed -i s#REPLACETHIS#$UPSTREAMURL#g ./am-scripts/$arch/$arg
		# ADD A DESCRIPTION FOR THIS APPLICATION
		COMMENT=$(wget -q https://aur.archlinux.org/packages/$AUR -O - | grep -A1 Description | tail -1 | cut -c 30- | rev | cut -c 6- | rev) 
		# CREATE A WEBPAGE FOR https://portable-linux-apps.github.io CONTAINING ALL THE INFO ABOUT THIS APP
		echo "# $(echo $arg | tr a-z A-Z)" >> ./am-scripts/WEBPAGE/$arg.md
		echo -e "\n $COMMENT\n\n SITE: $UPSTREAMURL\n\n SOURCE: https://aur.archlinux.org/packages/$AUR\n\n | [Applications](https://portable-linux-apps.github.io/apps.html) | [Home](https://portable-linux-apps.github.io)\n | --- | --- |" >> ./am-scripts/WEBPAGE/$arg.md &&
		# CREATE A NEW LINE FOR THE APPLICATION'S LIST
		echo "◆ $arg : $COMMENT" >> ./am-scripts/list
		echo "-----------------------------------------------------------------------"
		echo " THIS IS A PREVIEW OF THE DOWNLOAD LINK:"
		echo "$(echo $(wget -q https://aur.archlinux.org/packages/$AUR -O - | grep -Eo "(http|https)://[a-zA-Z0-9./?=_%:-]*" | grep -i "$EXTENSION" | grep -w -v ".asc" | grep -w -v ".zsync" | grep -w -v "archlinux.org" | head -1))"
		echo "-----------------------------------------------------------------------"
		# IF YOU CAN, USE A ONE-LINE COMMAND TO EXTRACT THE ARCHIVE, CREATE ICONS AN MORE
    		echo -e "\n NOW, SUPPOSE YOU DOWNLOADED THE ARCHIVE TO './tmp', THEN RUN \n THE COMMAND 'cd ..'. WE WILL STILL NEED TO:\n\n  - extract the archive;\n  - transfer content into the directory we are in;\n  - include an icon and .desktop file in the same place (if needed).\n\n WHAT ARE THE COMMANDS TO RUN BEFORE './tmp' IS REMOVED?\n" 
    		read -r -ep " IF YOU CAN, RESUME EVERYTHING IN ONE LINE COMMAND $(echo -e '\n :') " response
    		case $response in
			*) mv ./am-scripts/$arch/$arg ./am-scripts/$arch/$arg.old
			sed -n '1,22p' ./am-scripts/$arch/$arg.old >> ./am-scripts/$arch/$arg
			echo "$response" >> ./am-scripts/$arch/$arg
			sed -n '24,42p' ./am-scripts/$arch/$arg.old >> ./am-scripts/$arch/$arg
			echo "  $response" >> ./am-scripts/$arch/$arg
			sed -n '44,79p' ./am-scripts/$arch/$arg.old >> ./am-scripts/$arch/$arg
			rm -f ./am-scripts/$arch/$arg.old;;
		esac
		echo "-----------------------------------------------------------------------"
		# END OF THIS FUNCTION
		echo -e "\n All files are saved in $(xdg-user-dir DESKTOP)/am-scripts\n";;
    	# CREATE AN APPIMAGE ON-THE-FLY USING DEFAULT TOOLS
    	4) mkdir -p ./am-scripts ./am-scripts/$arch ./am-scripts/WEBPAGE &&
    		# DOWNLOAD THE TEMPLATE AND CONVERT THE ARGUMENT INTO A COMMAND
    		wget -c -q $AMREPO/templates/AM-SAMPLE-pkg2appimage -O ./am-scripts/$arch/$arg &&
    		sed -i s/SAMPLE/$arg/g ./am-scripts/$arch/$arg &&
		# CREATE A WEBPAGE FOR https://portable-linux-apps.github.io CONTAINING ALL THE INFO ABOUT THIS APP
		echo "# $(echo $arg | tr a-z A-Z)" >> ./am-scripts/WEBPAGE/$arg.md
		echo "\n $COMMENT\n\n SITE: \n\n | [Applications](https://portable-linux-apps.github.io/apps.html) | [Home](https://portable-linux-apps.github.io)\n | --- | --- |" >> ./am-scripts/WEBPAGE/$arg.md &&  
		# CREATE A NEW LINE FOR THE APPLICATION'S LIST
		echo '◆ '$arg' : '$COMMENT'' >> ./am-scripts/list
		# END OF THIS FUNCTION
		echo -e "\n All files are saved in $(xdg-user-dir DESKTOP)/am-scripts\n";;
    	# CREATE AN APPIMAGE ON-THE-FLY USING CUSTOM OPTIONS
    	5) mkdir -p ./am-scripts ./am-scripts/$arch ./am-scripts/WEBPAGE &&
    		# DOWNLOAD THE TEMPLATE AND CONVERT THE ARGUMENT INTO A COMMAND
    		wget -c -q $AMREPO/templates/AM-SAMPLE-pkg2appimage-custom -O ./am-scripts/$arch/$arg &&
    		sed -i s/SAMPLE/$arg/g ./am-scripts/$arch/$arg &&
		# LIBUNIONPRELOAD
		read -p ' Do you wish to add libunionpreload (y,N)?' yn
		case $yn in
			'Y'|'y') sed -i 's/#export LD_PRELOAD/export LD_PRELOAD/g' ./am-scripts/$arch/$arg
				sed -i 's/#chmod/chmod/g' ./am-scripts/$arch/$arg
				sed -i 's/#mv ./mv ./g' ./am-scripts/$arch/$arg
				sed -i 's/#wget/wget/g' ./am-scripts/$arch/$arg;;
			'N'|'n'|*) ;;
		esac
		# SYSTEM LIBRARIES
		read -p ' Do you wish to include system libraries (Y,n)?' yn
		case $yn in
			'N'|'n') sed -i 's/##export LD_LIBRARY_PATH/export LD_LIBRARY_PATH/g' ./am-scripts/$arch/$arg;;
			'Y'|'y'|*) sed -i 's/#export LD_LIBRARY_PATH/export LD_LIBRARY_PATH/g' ./am-scripts/$arch/$arg;;
		esac
		# BINARY PATH
		read -p ' Do you wish to specify the binary`s path manually (y,N)?' yn
		case $yn in 
			'Y'|'y') read -r -ep " ◆ ADD THE PATH (EXAMPLE '/usr/lib.../$arg') $(echo -e '\n: ')" RESPONSE
				case "$RESPONSE" in
				*) sed -i s/#exec/exec/g ./am-scripts/$arch/$arg
				sed -i s#CUSTOMPATH#$RESPONSE#g ./am-scripts/$arch/$arg
				esac;;
			'N'|'n'|*) sed -i s/##exec/exec/g ./am-scripts/$arch/$arg;;
		esac
		# CREATE A WEBPAGE FOR https://portable-linux-apps.github.io CONTAINING ALL THE INFO ABOUT THIS APP
		echo "# $(echo $arg | tr a-z A-Z)" >> ./am-scripts/WEBPAGE/$arg.md
		echo -e "\n $COMMENT\n\n SITE: \n\n | [Applications](https://portable-linux-apps.github.io/apps.html) | [Home](https://portable-linux-apps.github.io)\n | --- | --- |" >> ./am-scripts/WEBPAGE/$arg.md &&  
		# CREATE A NEW LINE FOR THE APPLICATION'S LIST
		echo '◆ '$arg' : '$COMMENT'' >> ./am-scripts/list; echo ""
		# END OF THIS FUNCTION
		echo -e "\n All files are saved in $(xdg-user-dir DESKTOP)/am-scripts\n";;
    	# CREATE A CUSTOM FIREFOX PROFILE ("firefox" MUST BE IN "$PATH" TO MADE IT WORK)
    	6) mkdir -p ./am-scripts ./am-scripts/$arch ./am-scripts/WEBPAGE &&
    		# DOWNLOAD THE TEMPLATE AND CONVERT THE ARGUMENT INTO A COMMAND
    		wget -c -q $AMREPO/templates/AM-SAMPLE-Firefox-webapp -O ./am-scripts/$arch/ffwa-$arg &&
    		sed -i s/SAMPLE/$arg/g ./am-scripts/$arch/ffwa-$arg &&
		echo "-----------------------------------------------------------------------"
		read -r -ep " ◆ NAME OF THE APP: " RESPONSE
		case "$RESPONSE" in
		*) sed -i s#GIVEMEANAME#$RESPONSE#g ./am-scripts/$arch/ffwa-$arg
		# CREATE A WEBPAGE FOR https://portable-linux-apps.github.io CONTAINING ALL THE INFO ABOUT THIS APP
		echo "# $(echo ffwa-$arg | tr a-z A-Z)" >> ./am-scripts/WEBPAGE/ffwa-$arg.md
		echo -e "\n WebApp & Firefox Profile for $RESPONSE.\n\n SITE: MYWEBSITE\n\n | [Applications](https://portable-linux-apps.github.io/apps.html) | [Home](https://portable-linux-apps.github.io)\n | --- | --- |" >> ./am-scripts/WEBPAGE/ffwa-$arg.md &&  
		# CREATE A NEW LINE FOR THE APPLICATION'S LIST
		echo "◆ ffwa-$arg : WebApp & Firefox Profile for $RESPONSE." >> ./am-scripts/list
		esac
		# PUT THE APP INTO A CATEGORY, THIS IS NEEDED FOR OUR CUSTOM DESKTOP FILE
		echo -e " LIST OF CATEGORIES:\n 0) AudioVideo\n 1) Audio\n 2) Video\n 3) Development\n 4) Education\n 5) Game\n 6) Graphics\n 7) Network\n 8) Office\n 9) Science\n 10) Settings\n 11) System\n 12) Utility (default)\n "
		read -r -p " CHOOSE A CATEGORY : " response
		case "$response" in
		0) sed -i s/YOURCATEGORY/AudioVideo/g ./am-scripts/$arch/$arg;;	1) sed -i s/YOURCATEGORY/Audio/g ./am-scripts/$arch/$arg;; 2) sed -i s/YOURCATEGORY/Video/g ./am-scripts/$arch/$arg;; 3) sed -i s/YOURCATEGORY/Development/g ./am-scripts/$arch/$arg;;
		4) sed -i s/YOURCATEGORY/Education/g ./am-scripts/$arch/$arg;; 5) sed -i s/YOURCATEGORY/Game/g ./am-scripts/$arch/$arg;; 6) sed -i s/YOURCATEGORY/Graphics/g ./am-scripts/$arch/$arg;; 7) sed -i s/YOURCATEGORY/Network/g ./am-scripts/$arch/$arg;;
		8) sed -i s/YOURCATEGORY/Office/g ./am-scripts/$arch/$arg;; 9) sed -i s/YOURCATEGORY/Science/g ./am-scripts/$arch/$arg;; 10) sed -i s/YOURCATEGORY/Settings/g ./am-scripts/$arch/$arg;; 11) sed -i s/YOURCATEGORY/System/g ./am-scripts/$arch/$arg;;
		12|*) sed -i s/YOURCATEGORY/Utility/g ./am-scripts/$arch/$arg;;
		esac
		echo "-----------------------------------------------------------------------"
		# ENTER THE URL OF THE SITE YOU WANT TO CREATE A CUSTOM FIREFOX PROFILE FOR
		read -r -ep " ◆ URL OF THE WEBAPP: " RESPONSE
		case "$RESPONSE" in
		*) sed -i s#MYWEBSITE#$RESPONSE#g ./am-scripts/$arch/ffwa-$arg; sed -i s#MYWEBSITE#$RESPONSE#g ./am-scripts/WEBPAGE/ffwa-$arg.md;;
		esac 
		echo "-----------------------------------------------------------------------"
		# ENTER THE URL OF THE ICON THAT WILL APPEAR IN THE MENU
		read -r -ep " ◆ COPY/PASTE THE URL OF THE ICON HERE $(echo -e '\n URL: ')" RESPONSE
		case "$RESPONSE" in
		*) sed -i s#YOURICONURL#$RESPONSE#g ./am-scripts/$arch/ffwa-$arg
		esac
		echo "-----------------------------------------------------------------------"
		# END OF THIS FUNCTION
		echo -e "\n All files are saved in $(xdg-user-dir DESKTOP)/am-scripts\n";;
	# DOWNLOAD THE APPIMAGE FROM GITHUB AND KEEP IT ALWAYS UPDATED (BEST WAY)
	7) mkdir -p ./am-scripts ./am-scripts/$arch ./am-scripts/WEBPAGE &&
		# DOWNLOAD THE TEMPLATE AND CONVERT THE ARGUMENT INTO A COMMAND, ALSO ADD SOME BASIC INFO IF AVAILABLE
		wget -c -q $AMREPO/templates/AM-SAMPLE-AppImage-from-GitHub -O ./am-scripts/$arch/$arg &&
		sed -i s/SAMPLE/$arg/g ./am-scripts/$arch/$arg &&
		echo "-----------------------------------------------------------------------"
		# ADD THE NAME OF THE GITHUB REPOSITORY
		read -r -ep " ◆ ADD THE NAME OF THE REPOSITORY (EXAMPLE 'NAME/REPOSITORY') $(echo -e '\n https://github.com/')" RESPONSE
		case "$RESPONSE" in
		*) sed -i s#REPLACETHIS#$RESPONSE#g ./am-scripts/$arch/$arg
		# GET THE DESCRIPTION OF THIS REPOSITORY TO ADD IN ALL CREATED FILES
		COMMENT=$(curl https://api.github.com/repos/$RESPONSE 2>/dev/null | grep description | sed 's/"description": "//' | sed 's/",//')
		# CREATE A WEBPAGE FOR https://portable-linux-apps.github.io CONTAINING ALL THE INFO ABOUT THIS APP
		echo "# $(echo $arg | tr a-z A-Z)" >> ./am-scripts/WEBPAGE/$arg.md
		echo -e "\n $COMMENT\n\n SITE: https://github.com/$RESPONSE\n\n | [Applications](https://portable-linux-apps.github.io/apps.html) | [Home](https://portable-linux-apps.github.io)\n | --- | --- |" >> ./am-scripts/WEBPAGE/$arg.md &&
		# CREATE A NEW LINE FOR THE APPLICATION'S LIST
		echo "◆ $arg : $COMMENT" >> ./am-scripts/list
		esac
		echo "-----------------------------------------------------------------------"
		# CHECK THE DOWNLOAD LINK, THE ONE THAT POINTS TO THE LATEST RELEASE, NOTE THAT IT MAY BE A DEVELOPMENT VERSION, ADD "/latest" AFTER "/releases" TO POINT TO THE LAST STABLE VERSION
		read -p ' Do you wish to check the link to the latest version (Y,n)?' yn
		APIGITHUB="https://api.github.com/repos"
		EXCLUDED="grep -w -v i386 | grep -w -v i686 | grep -w -v aarch64 | grep -w -v arm64 | grep -w -v armv7l"
		case $yn in
			'N'|'n') ;;
			'Y'|'y'|*) echo ""; wget -q https://api.github.com/repos/$RESPONSE/releases -O - | grep -w -v i386 | grep -w -v i686 | grep -w -v aarch64 | grep -w -v arm64 | grep -w -v armv7l | grep browser_download_url | grep -i appimage | cut -d '"' -f 4 | head -1
			echo -e "\n The URL above is an example of what both\n the install and update scripts will point to.\n";;
		esac
		read -p ' If correct, press "ENTER", otherwise press "N": ' yn
		case $yn in
			'N'|'n') read -p ' Press 1 to add something or 2 to remove something: ' response
				case "$response" in
				1) read -r -ep ' URL must contain ("x64", "x86_64"... or leave blank): ' response
					case "$response" in
					'') ;;
					*) sed -i 's#browser_download_url#browser_download_url | grep -i '$response' #g' ./am-scripts/$arch/$arg
					read -p ' Do you wish to check the link for the last time (Y,n)?' yn
					case $yn in
					'N'|'n') ;;
					'Y'|'y'|*) echo ""; wget -q https://api.github.com/repos/$RESPONSE/releases -O - | grep -w -v i386 | grep -w -v i686 | grep -w -v aarch64 | grep -w -v arm64 | grep -w -v armv7l | grep browser_download_url | grep -i "$response" | grep -i appimage | cut -d '"' -f 4 | head -1
					echo -e "\n The URL above is an example of what both\n the install and update scripts will point to.\n";;
					esac;;
					esac;;
				2) read -r -ep ' URL must NOT contain ("txt", "ARM"... or leave blank): ' response
					case "$response" in
					'') ;;
					*) sed -i 's#browser_download_url#browser_download_url | grep -w -v '$response' #g' ./am-scripts/$arch/$arg
					read -p ' Do you wish to check the link for the last time (Y,n)?' yn
					case $yn in
					'N'|'n') ;;
					'Y'|'y'|*) echo ""; wget -q https://api.github.com/repos/$RESPONSE/releases -O - | grep -w -v i386 | grep -w -v i686 | grep -w -v aarch64 | grep -w -v arm64 | grep -w -v armv7l | grep browser_download_url | grep -w -v "$response" | grep -i appimage | cut -d '"' -f 4 | head -1
					echo -e "\n The URL above is an example of what both\n the install and update scripts will point to.\n";;
					esac;;
					esac;;
				esac;;
			'Y'|'y'|*) ;;
		esac
		echo "-----------------------------------------------------------------------"
		# END OF THIS FUNCTION
		echo -e "\n All files are saved in $(xdg-user-dir DESKTOP)/am-scripts\n";;
	# DOWNLOAD THE APPIMAGE FROM ANY WEBSITE
	8) mkdir -p ./am-scripts ./am-scripts/$arch ./am-scripts/WEBPAGE &&
		# DOWNLOAD THE TEMPLATE AND CONVERT THE ARGUMENT INTO A COMMAND, ALSO ADD SOME BASIC INFO IF AVAILABLE
		wget -c -q $AMREPO/templates/AM-SAMPLE-AppImage-from-Anywhere -O ./am-scripts/$arch/$arg &&
		sed -i s/SAMPLE/$arg/g ./am-scripts/$arch/$arg &&
		echo "-----------------------------------------------------------------------"
		# ADD THE URL TO THE MAIN PAGE OF THE WEBSITE
		read -r -ep " ◆ ADD THE URL TO THE MAIN PAGE OF THE WEBSITE $(echo -e '\n : ')" RESPONSE
		case "$RESPONSE" in
		*) sed -i s#REPLACETHIS#$RESPONSE#g ./am-scripts/$arch/$arg
		esac
		echo "-----------------------------------------------------------------------"
		# ADD A DESCRIPTION FOR THIS APPLICATION
		read -r -ep " ◆ ADD A BRIEF DESCRIPTION FOR THIS APPLICATION $(echo -e '\n : ')" COMMENT
		case "$COMMENT" in
		*) 
		# CREATE A WEBPAGE FOR https://portable-linux-apps.github.io CONTAINING ALL THE INFO ABOUT THIS APP
		echo "# $(echo $arg | tr a-z A-Z)" >> ./am-scripts/WEBPAGE/$arg.md
		echo -e "\n $COMMENT\n\n SITE: $RESPONSE\n\n | [Applications](https://portable-linux-apps.github.io/apps.html) | [Home](https://portable-linux-apps.github.io)\n | --- | --- |" >> ./am-scripts/WEBPAGE/$arg.md &&
		# CREATE A NEW LINE FOR THE APPLICATION'S LIST
		echo "◆ $arg : $COMMENT" >> ./am-scripts/list
		esac
		echo "-----------------------------------------------------------------------"
		# IF YOU CAN, USE A ONE-LINE COMMAND TO DOWNLOAD THE APPIMAGE
    		read -r -ep " USE A ONE-LINE COMMAND TO CHECK ONLY THE URL TO THE APPIMAGE $(echo -e '\n THE DEFAULT PROGRAM ASSIGNED TO DOWNLOAD THIS LINK WILL BE "WGET"\n USE YOUR BEST SKILLS TO GET THE URL OF THE LATEST VERSION AVAILABLE\n :') " response
    		case $response in
			*) mv ./am-scripts/$arch/$arg ./am-scripts/$arch/$arg.old
			sed -n '1,18p' ./am-scripts/$arch/$arg.old >> ./am-scripts/$arch/$arg
			echo 'version=$('$response')' >> ./am-scripts/$arch/$arg
			sed -n '20,34p' ./am-scripts/$arch/$arg.old >> ./am-scripts/$arch/$arg
			echo 'version=$('$response')' >> ./am-scripts/$arch/$arg
			sed -n '36,118p' ./am-scripts/$arch/$arg.old >> ./am-scripts/$arch/$arg
			rm -f ./am-scripts/$arch/$arg.old;;
		esac
		echo "-----------------------------------------------------------------------"
		# END OF THIS FUNCTION
		echo -e "\n All files are saved in $(xdg-user-dir DESKTOP)/am-scripts\n";;
	# DOWNLOAD THE APPIMAGE FROM THE ARCH USER REPOSITORY
	9) mkdir -p ./am-scripts ./am-scripts/$arch ./am-scripts/WEBPAGE &&
		# DOWNLOAD THE TEMPLATE AND CONVERT THE ARGUMENT INTO A COMMAND, ALSO ADD SOME BASIC INFO IF AVAILABLE
		wget -c -q $AMREPO/templates/AM-SAMPLE-AppImage-from-AUR -O ./am-scripts/$arch/$arg &&
		sed -i s/SAMPLE/$arg/g ./am-scripts/$arch/$arg &&
		echo "-----------------------------------------------------------------------"
		read -r -ep " ◆ ADD THE REAL NAME OF THE PACKAGE BASE, ON AUR$(echo -e '\n : ')" AUR
		case "$AUR" in
		*) sed -i s#AURREPO#$AUR#g ./am-scripts/$arch/$arg
		esac
		# ADD THE URL TO THE MAIN PAGE OF THE WEBSITE
		UPSTREAMURL=$(wget -q https://aur.archlinux.org/packages/$AUR -O - | grep -A3 "Upstream URL" | tail -1 | cut -c 30- | cut -f1 -d'"')
		sed -i s#REPLACETHIS#$UPSTREAMURL#g ./am-scripts/$arch/$arg
		# ADD A DESCRIPTION FOR THIS APPLICATION
		COMMENT=$(wget -q https://aur.archlinux.org/packages/$AUR -O - | grep -A1 Description | tail -1 | cut -c 30- | rev | cut -c 6- | rev) 
		# CREATE A WEBPAGE FOR https://portable-linux-apps.github.io CONTAINING ALL THE INFO ABOUT THIS APP
		echo "# $(echo $arg | tr a-z A-Z)" >> ./am-scripts/WEBPAGE/$arg.md
		echo -e "\n $COMMENT\n\n SITE: $UPSTREAMURL\n\n SOURCE: https://aur.archlinux.org/packages/$AUR\n\n | [Applications](https://portable-linux-apps.github.io/apps.html) | [Home](https://portable-linux-apps.github.io)\n | --- | --- |" >> ./am-scripts/WEBPAGE/$arg.md &&
		# CREATE A NEW LINE FOR THE APPLICATION'S LIST
		echo "◆ $arg : $COMMENT" >> ./am-scripts/list
		echo "-----------------------------------------------------------------------"
		echo " THIS IS A PREVIEW OF THE DOWNLOAD LINK:"
		echo "$(echo $(wget -q https://aur.archlinux.org/packages/$AUR -O - | grep -Eo "(http|https)://[a-zA-Z0-9./?=_%:-]*" | grep -i ".appimage" | grep -w -v ".asc" | grep -w -v ".zsync" | grep -w -v "archlinux.org" | head -1))"
		echo "-----------------------------------------------------------------------"
		# END OF THIS FUNCTION
		echo -e "\n All files are saved in $(xdg-user-dir DESKTOP)/am-scripts\n";;
	# DOWNLOAD ANY ARCHIVE FROM ANY WEBSITE
	10) mkdir -p ./am-scripts ./am-scripts/$arch ./am-scripts/WEBPAGE &&
		# DOWNLOAD THE TEMPLATE AND CONVERT THE ARGUMENT INTO A COMMAND, ALSO ADD SOME BASIC INFO IF AVAILABLE
		wget -c -q $AMREPO/templates/AM-SAMPLE-Anywhere-generic -O ./am-scripts/$arch/$arg &&
		sed -i s/SAMPLE/$arg/g ./am-scripts/$arch/$arg &&
		echo "-----------------------------------------------------------------------"
		# ADD THE URL TO THE MAIN PAGE OF THE WEBSITE
		read -r -ep " ◆ ADD THE URL TO THE MAIN PAGE OF THE WEBSITE $(echo -e '\n : ')" RESPONSE
		case "$RESPONSE" in
		*) sed -i s#REPLACETHIS#$RESPONSE#g ./am-scripts/$arch/$arg
		esac
		echo "-----------------------------------------------------------------------"
		# ADD A DESCRIPTION FOR THIS APPLICATION
		read -r -ep " ◆ ADD A BRIEF DESCRIPTION FOR THIS APPLICATION $(echo -e '\n : ')" COMMENT
		case "$COMMENT" in
		*) 
		# CREATE A WEBPAGE FOR https://portable-linux-apps.github.io CONTAINING ALL THE INFO ABOUT THIS APP
		echo "# $(echo $arg | tr a-z A-Z)" >> ./am-scripts/WEBPAGE/$arg.md
		echo -e "\n $COMMENT\n\n SITE: $RESPONSE\n\n | [Applications](https://portable-linux-apps.github.io/apps.html) | [Home](https://portable-linux-apps.github.io)\n | --- | --- |" >> ./am-scripts/WEBPAGE/$arg.md &&
		# CREATE A NEW LINE FOR THE APPLICATION'S LIST
		echo "◆ $arg : $COMMENT" >> ./am-scripts/list
		esac
		echo "-----------------------------------------------------------------------"
		# IF YOU CAN, USE A ONE-LINE COMMAND TO CHECK THE DOWNLOAD LINK TO THE LAST RELEASE OR FROM THE DOWNLOAD PAGE OF THE WEBSITE
    		read -r -ep " USE A ONE-LINE COMMAND ONLY TO SHOW THE DOWNLOAD URL, NOTHING MORE. $(echo -e '\n THE DEFAULT PROGRAM ASSIGNED TO DOWNLOAD THIS LINK WILL BE "WGET"\n USE YOUR BEST SKILLS TO GET THE URL OF THE LATEST VERSION AVAILABLE\n :') " DOWNLOADURL
    		case "$DOWNLOADURL" in
			*) mv ./am-scripts/$arch/$arg ./am-scripts/$arch/$arg.old
			sed -n '1,18p' ./am-scripts/$arch/$arg.old >> ./am-scripts/$arch/$arg
			echo 'version=$('$DOWNLOADURL')' >> ./am-scripts/$arch/$arg
			sed -n '20,33p' ./am-scripts/$arch/$arg.old >> ./am-scripts/$arch/$arg
			echo 'version=$('$DOWNLOADURL')' >> ./am-scripts/$arch/$arg
			sed -n '35,80p' ./am-scripts/$arch/$arg.old >> ./am-scripts/$arch/$arg
			rm -f ./am-scripts/$arch/$arg.old;;
		esac 	 
		echo "-----------------------------------------------------------------------"
		# IF YOU CAN, USE A ONE-LINE COMMAND TO EXTRACT THE ARCHIVE, CREATE ICONS AN MORE
    		echo -e "\n NOW, SUPPOSE YOU DOWNLOADED THE ARCHIVE TO './tmp', THEN RUN \n THE COMMAND 'cd ..'. WE WILL STILL NEED TO:\n\n  - extract the archive;\n  - transfer content into the directory we are in;\n  - include an icon and .desktop file in the same place (if needed).\n\n WHAT ARE THE COMMANDS TO RUN BEFORE './tmp' IS REMOVED?\n" 
    		read -r -ep " IF YOU CAN, RESUME EVERYTHING IN ONE LINE COMMAND $(echo -e '\n :') " response
    		case $response in
			*) mv ./am-scripts/$arch/$arg ./am-scripts/$arch/$arg.old
			sed -n '1,22p' ./am-scripts/$arch/$arg.old >> ./am-scripts/$arch/$arg
			echo "$response" >> ./am-scripts/$arch/$arg
			sed -n '24,42p' ./am-scripts/$arch/$arg.old >> ./am-scripts/$arch/$arg
			echo "  $response" >> ./am-scripts/$arch/$arg
			sed -n '44,80p' ./am-scripts/$arch/$arg.old >> ./am-scripts/$arch/$arg
			rm -f ./am-scripts/$arch/$arg.old;;
		esac
		echo "-----------------------------------------------------------------------"
		# END OF THIS FUNCTION
		echo -e "\n All files are saved in $(xdg-user-dir DESKTOP)/am-scripts\n";;
    	*) echo -e "\n No valid argument was chosen: process aborted! \n" | tr a-z A-Z; break;;
	esac
	done
	esac
	fi
	done
	done
	done
	shift;;
  '-u'|'-U'|'update') 
    	if [ -n "$SUDO_COMMAND" ]; then echo -e "\n WARNING: You don't need to run the option '$1' with SUDO.\n"; exit; fi
	while [ -n "$1" ]
	do
	case $2 in
	'') echo ""; echo -e ' "AM" CAN MANAGE UPDATES FOR THE FOLLOWING PROGRAMS: \n'
  		cd /opt && find -name 'AM-updater' -printf " %h\n" 2>/dev/null | sort -u | xargs -n 1 basename 2>/dev/null
		echo -e '\n ALL OTHERS ARE FIXED VERSIONS OR CAN MANAGE UPDATES BY THEMSELF'; sleep 0.1
		echo -e "\n THE UPDATE VERIFICATION PROCESS IS IN PROGRESS, PLEASE WAIT..."; sleep 0.2; echo -e "\n-----------------------------------------------------------------------"
		echo -e " >> START OF ALL PROCESSES <<\n-----------------------------------------------------------------------"
		for f in /opt/*/; do 
			cd $f 2>/dev/null && 
			if test -f ./AM-updater; then
				start=$(date +%s); $(sh -x ./AM-updater > /dev/null 2>&1) | echo -ne ' Updating "'$(echo $f | cut -c 5- | tr -d '/')'"...\r'; end=$(date +%s)
				echo -e " ◆ $(echo $f | cut -c 5- | tr -d '/' | tr a-z A-Z) is updated, $(($end-$start)) seconds elapsed! \n"
			else
				echo ""  > /dev/null 2>&1
			fi
			done
			rm -R -f $AMPATH/.cache/* /opt/*/tmp; echo "-----------------------------------------------------------------------"
			am -s 
			echo -e "-----------------------------------------------------------------------\n >> END OF ALL PROCESSES << \n-----------------------------------------------------------------------\n"; sleep 0.2
		echo -e ' ALL THE PROGRAMS MANAGED BY "AM" ARE UPDATED! \n'
		exit;;
	*) if test -f /opt/$2/AM-updater; then
		start=$(date +%s); /opt/$2/AM-updater > /dev/null 2>&1 | echo -ne "\n UPDATING $(echo $2 | tr a-z A-Z)\r"; end=$(date +%s)
		echo -e " ◆ $(echo $2 | tr a-z A-Z) is updated, $(($end-$start)) seconds elapsed! \n" && break
	else
		echo -e '\n "AM" CANNOT MANAGE UPDATES FOR "'$(echo $2 | tr a-z A-Z)'"'
		UPDATERS=$(cd /opt/$2 2>/dev/null && find . -name "*update*" -print 2>/dev/null)
		if [ -n "$UPDATERS" ]; then
			echo ' This program probably includes its own update system!'
		else
			break
		fi
		exit
	fi
	esac
	shift
	done;;
  '-w'|'web')
    	if [ -n "$SUDO_COMMAND" ]; then echo -e "\n WARNING: You don't need to run the option '$1' with SUDO.\n"; exit; fi
	while [ -n "$1" ]
	do
	if curl --output /dev/null --silent --head --fail https://raw.githubusercontent.com/Portable-Linux-Apps/Portable-Linux-Apps.github.io/main/apps/$2.md  1>/dev/null; then
	case $2 in
	*) for var in $2;
	do rm -R -f $AMPATH/.cache/about; mkdir $AMPATH/.cache/about;
		cd $AMPATH/.cache/about && wget -q https://raw.githubusercontent.com/Portable-Linux-Apps/Portable-Linux-Apps.github.io/main/apps/$2.md && echo "" && echo " SITE/SOURCES:" && echo "" &&
		sed -i '/^\s*#/ d' $2.md; sed -i '/^\s*!/ d' $2.md; sed -i '/\[Go back]/d' $2.md
		grep -o " http[^ ]*" ./$2.md && echo "" && exit; done
	esac
	else
	echo ""; 
	echo ' "'$2'" IS NOT A VALID ARGUMENT, PLEASE RUN THE "am -l" COMMAND'; echo ""; 
	echo ' TO SEE THE LIST OF ALL THE APPLICATIONS AVAILABLE FOR '$arch''; echo "";
	echo ' OR START A SEARCH (WITH KEYWORDS) BY USING THE "am -q" COMMAND'; echo "";
	exit;
	fi
	done
	shift;;
  '--disable-completion')
	if test -f /etc/bash_completion.d/am-completion.sh; then
	sudo rm -R -f /etc/bash_completion.d/am-completion.sh;
	else
	echo " Completion script is NOT enabled! "
	fi;;
  '--enable-completion')
	if test -f /etc/bash_completion.d/am-completion.sh; then
	echo " Completion script is already enabled!";
	else
	echo " Bash completion is a functionality through which bash helps users "
	echo " type their commands faster and easier. It accomplishes that by " 
	echo " presenting possible options when users press the TAB key while typing"
	echo " a command."
	echo " If you want to enable the completion for all users, you can just put"
	echo " the script under /etc/bash_completion.d/ and it will automatically be"
	echo " loaded by Bash, ROOT REQUIRED!"; echo ""
	read -p ' Do you wish to create a bash completion script for "AM" (y,N)?' yn
	case $yn in
		'N'|'n') exit;;
		'Y'|'y') echo '#!/usr/bin/env bash' >> $AMPATH/am-completion.sh; echo 'complete -W "$(cat $AMPATH/list 2>/dev/null)" am' >> $AMPATH/am-completion.sh
			 chmod a+x $AMPATH/am-completion.sh
			 rm -R -f $AMPATH/remove; echo '#!/bin/sh' >> $AMPATH/remove
			 echo 'rm -R -f /usr/local/bin/am $AMPATH /etc/bash_completion.d/am-completion.sh' >> $AMPATH/remove
			 chmod a+x $AMPATH/remove; chown -R $currentuser $AMPATH/remove 2>/dev/null 
			 if test -f /etc/bash_completion.d; then
				sudo mv $AMPATH/am-completion.sh /etc/bash_completion.d/
			 else
				sudo mkdir -p /etc/bash_completion.d; sudo mv $AMPATH/am-completion.sh /etc/bash_completion.d/
			 fi;;
		*) exit;;
	esac 
	fi;;
  'lock')
    	if [ -n "$SUDO_COMMAND" ]; then echo -e "\n WARNING: You don't need to run the option '$1' with SUDO.\n"; exit; fi
	while [ -n "$1" ]
	do
	if test -f /opt/$2/AM-updater; then
	case $2 in
	*) for var in $2;
	do echo ""; read -p " Do you wish to keep $2  at the current version (y,N)?" yn
		case $yn in
		[Yy]* ) echo "";  mv /opt/$2/AM-updater /opt/$2/AM-LOCK 1>/dev/null &&
			echo " $2 has been locked at current version!" && echo "" && exit; break;;
		[Nn]*|* ) echo ""; echo " $2 is still updatable, exiting!"; echo ""; exit;; esac done;;
	esac
	else
	echo ""; echo ' AM cannot manage updates for '$2', "AM-updater" file not found!'; echo ""; exit;
	fi
	done
	shift;;
  'unlock')
    	if [ -n "$SUDO_COMMAND" ]; then echo -e "\n WARNING: You don't need to run the option '$1' with SUDO.\n"; exit; fi
	while [ -n "$1" ]
	do
	if test -f /opt/$2/AM-LOCK; then
	case $2 in
	*) for var in $2;
	do echo ""; read -p " Do you wish to unlock updates for $2 (Y,n)?" yn
		case $yn in
		[Nn]* ) echo ""; echo " $2 is still locked at current version!"; echo ""; exit;;
		[Yy]*|* ) echo "";  mv /opt/$2/AM-LOCK /opt/$2/AM-updater 1>/dev/null &&
			echo ' '$2' can now receive updates, use the "am -u" command to update everything!' && echo "" && exit; break;; esac done;;
	esac
	else
	echo ""; echo ' '$2' cannot be unlocked, "AM-LOCK" file not found!'; echo ""; exit;
	fi
	done
	shift;;
  'version'|'-v'|'--version')
  	echo "4.3.2~2";;
  *) exec $AMPATH/APP-MANAGER ;;
esac
