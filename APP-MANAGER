#!/usr/bin/env bash

for name in "ar" "cat" "chmod" "chown" "curl" "echo" "egrep" "grep" "sed" "tar" "test" "unzip" "wget" "zsync"
do
  [[ $(which $name 2>/dev/null) ]] || { echo "" && echo -e 'ERROR: "'$name'" not found, required by some installation scripts.';deps=1; }
done
[[ $deps -ne 1 ]] || { echo -e "\nInstall the above and try again\n";exit 1; }

URL="https://raw.githubusercontent.com/ivan-hc/AM-application-manager/main"
arch=$(uname -m)
currentuser=$(who | awk '{print $1}')

rm -R -f /opt/am/options
echo "about
backup
clean
download
files
install
list
lock
overwrite
query
remove
sync
template
unlock
update
web
--disable-completion
--enable-completion" >> /opt/am/options

case "$1" in
  '') echo "" && echo ' USAGE: "am [option]"' && echo "" && echo ' Run the "am -h" command to find out more' && echo "";;
  '-h'|'help') echo '
 ------------------------------------------------------------------------
                    _____                    _____                                                                           
                   /\    \                  /\    \         
                  /::\    \                /::\____\        
                 /::::\    \              /::::|   |        
                /::::::\    \            /:::::|   |        
               /:::/\:::\    \          /::::::|   |        
              /:::/__\:::\    \        /:::/|::|   |        
             /::::\   \:::\    \      /:::/ |::|   |        
            /::::::\   \:::\    \    /:::/  |::|___|______  
           /:::/\:::\   \:::\    \  /:::/   |::::::::\    \ 
          /:::/  \:::\   \:::\____\/:::/    |:::::::::\____\
          \::/    \:::\  /:::/    /\::/    / ~~~~~/:::/    /
           \/____/ \:::\/:::/    /  \/____/      /:::/    / 
                    \::::::/    /               /:::/    /  
                     \::::/    /               /:::/    /   
                     /:::/    /               /:::/    /    
                    /:::/    /               /:::/    /     
                   /:::/    /               /:::/    /      
                  /:::/    /               /:::/    /       
                  \::/    /                \::/    /        
                   \/____/                  \/____/         


 ▄▀█ █▀█ █▀█ █░░ █ █▀▀ ▄▀█ ▀█▀ █ █▀█ █▄░█   █▀▄▀█ ▄▀█ █▄░█ ▄▀█ █▀▀ █▀▀ █▀█
 █▀█ █▀▀ █▀▀ █▄▄ █ █▄▄ █▀█ ░█░ █ █▄█ █░▀█   █░▀░█ █▀█ █░▀█ █▀█ █▄█ ██▄ █▀▄

                             by Ivan Alex HC

 ------------------------------------------------------------------------

  >>  Enjoy your applications without thinking about anything else   <<   
  
 ------------------------------------------------------------------------
  
  ALL THE OPTIONS:
    
  -a, about
  USAGE: "am -a $PROGRAM"
  DESCRIPTION: Shows the basic information, links and source of each app.

  -b, backup
  USAGE: "am -b $PROGRAM"
  DESCRIPTION: Save the current version of a program you are interested in,
  the snapshot will be stored in /home/$USER/.am-snapshots/$PROGRAM
  (see "-o"). 

  -c, clean
  USAGE: "am -c"
  DESCRIPTION: Removes all the unnecessary files and temporary folders.

  -d, download
  USAGE: "am -d $PROGRAM"
  DESCRIPTION: Download an installation script from the "AM" repository to 
  your desktop without installing it. This option can download scripts from
  both "programs" (stable scripts on the repository) and "testing" (where 
  scripts are unstable and not complete at all), for your architecture.

  -f, files
  USAGE: "am -f"
  DESCRIPTION: Shows the installed programs managed by "AM".

  -h, help
  USAGE: "am -h"
  DESCRIPTION: Prints this message. 
  
  -i, install
  USAGE: "[sudo] am -i $PROGRAM"
  DESCRIPTION: Install a program. This will be downloader/created into a
  dedicated /opt/$PROGRAM directory (containing a script to remove it and
  another one to update it), the command is linked to a $PATH and a launcher
  $PROGRAM.desktop will be created in /usr/share/applications.

  -l, list
  USAGE: "am -l"
  DESCRIPTION: Shows the list of apps available in the repository.

  -o, overwrite
  USAGE: "am -o $PROGRAM"
  DESCRIPTION: Overwrite the existing version of the program with a saved
  snapshot from /home/$USER/.am-snapshots/$PROGRAM (see "-b").
  
  -q, query
  USAGE: "am -q $KEYWORD"
  DESCRIPTION: Use one or more keywords to search for in the list of 
  available applications.
		
  -r, remove
  USAGE: "[sudo] am -r $PROGRAM"
  DESCRIPTION: Removes the program and all the other files listed above 
  using the instructions in /opt/$PROGRAM/remove. Confirmation is required
  (Y or N, default is Y).

  -s, sync
  USAGE: "am -s"
  DESCRIPTION: Updates "AM" to a more recent version.
  		
  -t, template
  USAGE: "am -t $PROGRAM"
  DESCRIPTION: This option allows you to generate a custom script from a 
  list of different templates that may be vary according to the kind of 
  $PROGRAM you want to create/install/update. Once you choose a number,
  the script will download the template by renaming it using the argument 
  "$PROGRAM" you provided above. Please, consider submitting your custom
  script to https://github.com/ivan-hc/AM-application-manager/pulls.

  -u, update
  USAGE: "am -u"
  DESCRIPTION: Update all the installed programs.
  -u, update
  USAGE: "am -u $PROGRAM"
  DESCRIPTION: Update the selected program, this also allows you to see
  all the logs during the installation process.

  -v, --version, version
  USAGE: "am -v"
  DESCRIPTION: Shows the version of "AM".

  -w, web
  USAGE: "am -w $PROGRAM"
  DESCRIPTION: Shows the URLs of the sites/sources of $PROGRAM.

  --disable-completion
  USAGE: "[sudo] am --disable-completion"
  DESCRIPTION: Removes the /etc/bash_completion.d/am-completion.sh script
  previously created with the "[sudo] am --enable-completion" command.

  --enable-completion
  USAGE: "[sudo] am --enable-completion"
  DESCRIPTION: Create a bash completion script in /etc/bash_completion.d
  to complete a keyword with the TAB key using the names of all installable
  applications in the "AM" repository.

  lock
  USAGE: "am lock $PROGRAM"
  DESCRIPTION: Lock the selected $PROGRAM to the current installed version,
  this only works if a dedicated "AM-updater" script exists.

  unlock
  USAGE: "am unlock $PROGRAM"
  DESCRIPTION: Unlock updates for the selected $PROGRAM. This option nulls 
  "lock", the update file is renamed as "AM-updater" again, so that it can
  be intercepted when executing the "am -u" command (see "-u").
  		
  -----------------------------------------------------------------------
   
  SITE: https://github.com/IVAN-HC/AM-APPLICATION-MANAGER
  
  ' ;;
  '-a'|'about')
	while [ -n "$1" ]
	do
	rm -f /opt/am/.cache/about-args
	echo $@ | tr ' ' '\n' >> /opt/am/.cache/about-args && echo STOP >> /opt/am/.cache/about-args
	ARGS=$(sed '1d' /opt/am/.cache/about-args)
	for arg in $ARGS; do
	for var in $arg; do
	if [ $arg == STOP ]; then
	exit
	else
	if curl --output /dev/null --silent --head --fail $URL/programs/.about/$arg  1>/dev/null; then
	echo "-----------------------------------------------------------------------"
	case $arg in
	*) rm -R -f /opt/am/.cache/about; mkdir /opt/am/.cache/about;
		cd /opt/am/.cache/about && wget -q $URL/programs/.about/$arg &&
		echo " PACKAGE: $(echo $arg | tr a-z A-Z)"
		if test -f /opt/$arg/remove; then
			echo " STATUS: INSTALLED, ABOUT $(du -sm /opt/$arg | awk '{print $1}' ) MB OF DISK SPACE IN USE"
		else
			echo " STATUS: NOT INSTALLED"
		fi
		cat ./$arg && echo "" &&
		echo "-----------------------------------------------------------------------" && break
	esac
	else
	echo ' "'$arg'" is not a valid argument' | tr a-z A-Z && break
	fi
	fi
	done
	done
	done
	shift;;
  '-b'|'backup')
	while [ -n "$1" ]
	do
	rm -f /opt/am/.cache/backup-args
	echo $@ | tr ' ' '\n' >> /opt/am/.cache/backup-args && echo STOP >> /opt/am/.cache/backup-args
	ARGS=$(sed '1d' /opt/am/.cache/backup-args)
	for arg in $ARGS; do
	for var in $arg; do
	if [ $arg == STOP ]; then
	exit
	else
	case $arg in
	'') echo " Specify the name of a program to back up"; echo ""; exit;;
	*) if test -f /opt/$arg/remove; then
		echo ""; read -p " Do you wish to backup the current version of $arg (y,N)?" yn
		case $yn in
		[Yy]* ) mkdir -p "$(xdg-user-dir USER)/.am-snapshots/$arg"; cp -r /opt/$arg "$(xdg-user-dir USER)/.am-snapshots/$arg/$(date +%F-%X)"; echo ""; echo " SAVED in $(xdg-user-dir USER)/.am-snapshots/$arg"; echo "" ; break;;
		[Nn]*|* ) echo ""; echo " OPERATION ABORTED!"; echo ""; break;;	
		esac
	else
		echo ""; echo " '$arg' is not a valid argument or is not installed."; echo ""; break;
	fi
	esac
	fi
	done
	done
	done
	shift;;
  '-c'|'clean') echo ""; echo " CLEANING OF TEMPORARY FILES AND FOLDERS IN PROGRESS" && sleep 1 && echo "" && echo " PRESS CTRL+C TO ABORT." && sleep 1 &&
	echo "" && for i in {5..1}; do echo -ne " $i\r" && sleep 1; done &&
	echo ""; rm -R -f /opt/am/appdb; rm -R -f /opt/am/.cache/*; rm -R -f /opt/*/tmp; echo "" && echo " DONE!"; echo "" ;;
  '-d'|'download')
	while [ -n "$1" ]
	do
	rm -f /opt/am/.cache/download-args
	echo $@ | tr ' ' '\n' >> /opt/am/.cache/download-args && echo STOP >> /opt/am/.cache/download-args
	ARGS=$(sed '1d' /opt/am/.cache/download-args)
	for arg in $ARGS; do
	for var in $arg; do
	if [ $arg == STOP ]; then
	exit
	else
	case $arg in
	am) for var in $arg;
		do read -p ' Do you wish to open the main script of "AM" (y,N)?' yn
			case $yn in
			[Yy]* ) xdg-open /opt/am/APP-MANAGER; break;;
			[Nn]*|* ) break;;
		esac
	done;; 
	*) if curl --output /dev/null --silent --head --fail $URL/programs/$arch/$arg  1>/dev/null; then
		echo ""; echo ' "'$arg'" installation script downloaded! ' | tr a-z A-Z
		cd $(xdg-user-dir DESKTOP); wget -q $URL/programs/$arch/$arg; echo ""; break;
	elif curl --output /dev/null --silent --head --fail $URL/testing/$arch/$arg  1>/dev/null; then
		echo ""; echo '  "'$arg'" downloaded from "testing", the unstable branch ' | tr a-z A-Z; echo ""; echo ' WARNING! PROGRAMS COMING FROM "TESTING" ARE BROKEN, USE AT YOUR OWN RISK!'
		cd $(xdg-user-dir DESKTOP); wget -q $URL/testing/$arch/$arg; echo ""; break;
	else
		echo ""; echo ' "'$arg'" is NOT a valid argument, check the list (command "am -l")'; echo ""; break;
	fi
	esac
	fi
	done
	done
	done
	shift;;
  '-f'|'files') echo ""; echo $(echo "YOU HAVE INSTALLED "; cd /opt && find -name 'remove' -printf "%h\n" | sort -u | wc -l;
  	echo " STANDALONE PROGRAMS MANAGED BY THE 'AM' COMMAND:"); echo "";
  	cd /opt && find -name 'remove' -printf "%h\n" | sort -u | $(xargs -n 1 basename) | du -sh * | awk '{ print " ◆ "$2 " - " $1"iB of disk space used"}'; echo "" ;;
  '-i'|'install')
	while [ -n "$1" ]
	do
	rm -f /opt/am/.cache/install-args
	rm -R -f /opt/am/.cache/installed
	echo $@ | tr ' ' '\n' >> /opt/am/.cache/install-args && echo STOP >> /opt/am/.cache/install-args
	ARGS=$(sed '1d' /opt/am/.cache/install-args)
	for arg in $ARGS; do
	for var in $arg; do
	if [ $arg == STOP ]; then
		if test -f /opt/am/.cache/installed; then
			echo "--------------------------------------------------------------------------------"
			echo ""; echo " INSTALLATION PROCESS COMPLETED!"; echo "";
			echo " The following NEW programs have been installed: " | tr a-z A-Z; echo ""
			echo "" >> /opt/am/.cache/installed
			echo "--------------------------------------------------------------------------------" >> /opt/am/.cache/installed
			cat /opt/am/.cache/installed
			exit
		else
			exit
		fi
	else
	echo ""
	case $arg in
	am) echo '"AM" IS ALREADY INSTALLED!'; break;;
	*) if test -f /opt/$arg/remove; then
		echo ' ERROR: "'$arg'" is already installed, please try to remove it first' && echo ""; break;
	else
		if curl --output /dev/null --silent --head --fail $URL/programs/$arch/$arg  1>/dev/null; then
		case $arg in
		*) for var in $arg;
			do cd /opt/am/.cache; mkdir tmp; cd tmp; wget -q $URL/programs/$arch/$arg; cd ..; mv ./tmp/$arg ./$arg; rmdir ./tmp;
			chmod a+x /opt/am/.cache/$arg
			sed -i "s#wget #wget -q --show-progress #g" /opt/am/.cache/$arg
			sed -i "s#rm #rm -f #g" /opt/am/.cache/$arg; sed -i "s#form -f #form #g" /opt/am/.cache/$arg
			sed -i "s#unzip #unzip -qq #g" /opt/am/.cache/$arg
			sed -i 's/currentuser=/#currentuser=/g' /opt/am/.cache/$arg
			sed -i 's/chown -R $currentuser/#chown -R $currentuser/g' /opt/am/.cache/$arg
			sed -i '/# MESSAGE/,$d' /opt/am/.cache/$arg
			sed -i 's# /opt/$APP/icons/$APP# /opt/$APP/icons/$APP 2> /dev/null#g' /opt/am/.cache/$arg
			sed -i 's#.svg;#.svg 2> /dev/null;#g' /opt/am/.cache/$arg
			sed -i 's#programs/.icons/$APP.svg#programs/.icons/$APP.svg 2> /dev/null;#g' /opt/am/.cache/$arg
			sudo echo "◆ INSTALLING $(echo $arg | tr a-z A-Z)..."
			sudo /opt/am/.cache/$arg
			sudo chown -R $currentuser /opt/$(cd /opt && ls -td * | head -1)
			echo ""
			echo "INSTALLATION COMPLETE, DOWNLOADED ABOUT $(du -sm /opt/$(cd /opt && ls -td * | head -1) | awk '{print $1}' ) MB OF FILES!"
			echo ""
			echo "--------------------------------------------------------------------------------"
			sudo rm /opt/am/.cache/$arg
			unset $LATESTDIR
			LATESTDIR=$(cd /opt && ls -td * | head -1)
				if test -f /opt/$LATESTDIR/remove; then
					echo " - $LATESTDIR" >> /opt/am/.cache/installed &&
					chown -R $currentuser /opt/am/.cache/about 2> /dev/null;
				else
					echo " INSTALLATION ABORTED!";
				fi
			break; done
			esac
		else
			echo ' "'$arg'" is NOT a valid argument, please try again!'; echo ""; break;
		fi			
	fi
	esac
	fi
	done
	done
	done
	shift;;
  '-l'|'list') rm -R -f /opt/am/$arch-apps /opt/am/list && wget -q $URL/programs/$arch-apps -P /opt/am && echo -e "$(cat /opt/am/$arch-apps | awk -v FS="(◆ | : )" '{print $2}')" >> /opt/am/list
	cd /opt/am && cat options >> list
	echo ""; echo "  LIST OF APPLICATIONS AVAILABLE IN THE 'AM' REPOSITORY:"; echo "";
  	cat /opt/am/$arch-apps; echo "";
  	echo $(echo "ALL:"; grep -e "$" -c /opt/am/$arch-apps);
  	echo $(echo "INSTALLED:"; cd /opt && find -name 'remove' -printf "%h\n" | sort -u | wc -l); echo "";;
  '-o'|'overwrite')
	while [ -n "$1" ]
	do
	rm -f /opt/am/.cache/overwrite-args
	echo $@ | tr ' ' '\n' >> /opt/am/.cache/overwrite-args && echo STOP >> /opt/am/.cache/overwrite-args
	ARGS=$(sed '1d' /opt/am/.cache/overwrite-args)
	for arg in $ARGS; do
	for var in $arg; do
	if [ $arg == STOP ]; then
	exit
	else
	case $arg in
	am) am -s; break;;
	'') echo " Specify the name of a program to overwrite"; echo ""; break;;
	*) if test -f /opt/$arg/remove; then
		echo ""; read -p " Do you wish to overwrite this version of $arg with an old one (y,N)?" yn
		case $yn in
		[Yy]* ) echo ""; echo " Please, select a snapshot:"; sleep 1; echo ""; snaps=$(ls "$(xdg-user-dir USER)/.am-snapshots/$arg/" | sort -u); echo "$snaps"; echo ""
			read -p " ENTER THE NAME OF THE SNAPSHOT?" response;
			case $response in
			*) for var in $(echo $snaps); do
				if [ -d $(xdg-user-dir USER)/.am-snapshots/$arg/$response ]; then
					cp -r --backup=t $(xdg-user-dir USER)/.am-snapshots/$arg/$response/* /opt/$arg/
	  				rm -R -f /opt/$arg/*~; echo ""; echo " RESTORE COMPLETED SUCCESSFULLY!"; echo ""; break;
				else
					echo ""; echo " NO SNAPSHOT SELECTED, RETRY!" >&2;
				fi
				done;;
			'') echo ""; echo " NO SNAPSHOT SELECTED, OPERATION ABORTED!"; echo ""; break;;
			esac;;
		[Nn]*|* ) echo ""; echo " OPERATION ABORTED!"; echo ""; break;;	
		esac
	else
		echo ""; echo " '$arg' is not a valid argument or is not installed."; echo ""; break;
	fi
	esac
	fi
	done
	done
	done
	shift;;
  '-q'|'query') rm -R -f /opt/am/$arch-apps /opt/am/list && wget -q $URL/programs/$arch-apps -P /opt/am && echo -e "$(cat /opt/am/$arch-apps | awk -v FS="(◆ | : )" '{print $2}')" >> /opt/am/list
	cd /opt/am && cat options >> list
	ARGS=$(echo "$@" | sed 's/-q //')
	echo ""
	echo ' Search results for "'$ARGS'" in the list of available programs:' | tr a-z A-Z
	echo ""
	grep -i -E "$2" /opt/am/$arch-apps | grep -i -E "$3" | grep -i -E "$4" | grep -i -E "$5" | grep -i -E "$6" | grep -i -E "$7" | grep -i -E "$8" | grep -i -E "$9"
	echo ""
	exit;;
  '-r'|'remove')
	while [ -n "$1" ]
	do
	echo ""
	rm -f /opt/am/.cache/remove-args
	echo $@ | tr ' ' '\n' >> /opt/am/.cache/remove-args && echo STOP >> /opt/am/.cache/remove-args
	ARGS=$(sed '1d' /opt/am/.cache/remove-args)
	for arg in $ARGS; do
	for var in $arg; do
	if [ $arg == STOP ]; then
	exit
	else
	if ls /opt/$arg 1>/dev/null; then
	case $arg in
	*) for var in $arg; do
	sudo echo "" > /dev/null; read -p ' ◆ DO YOU WISH TO REMOVE "'$(echo $arg | tr a-z A-Z)'" (Y,n)?' yn
		case $yn in
		[Nn]* ) echo " - $arg has not been removed, exiting!"; echo ""; break;;
		[Yy]*|* ) sudo /opt/$arg/remove && echo ' - "'$(echo $arg | tr a-z A-Z)'" HAS BEEN SUCCESSFULLY REMOVED!' && echo "" && break; break;;
	esac
	done;;
	esac
	else
	echo ""; echo " '$arg' is not a valid argument or is not installed."; echo "";
	echo ' LIST OF THE INSTALLED PROGRAMS / VALID ARGUMENTS:'; echo "";
	cd /opt && find -name 'remove' -printf "%h\n" | sort -u | xargs -n 1 basename; echo "" ; break;
	fi
	fi
	done
	done
	done
	shift;;
  '-s'|'sync') rm -R -f /opt/am/$arch-apps /opt/am/list && wget -q $URL/programs/$arch-apps -P /opt/am && echo -e "$(cat /opt/am/$arch-apps | awk -v FS="(◆ | : )" '{print $2}')" >> /opt/am/list
	cd /opt/am && cat options >> list
	echo ""; echo ' SYNCHRONIZING "AM" VERSION '$(am -v)'...'; sleep 1; echo "";
  	rm -R -f /opt/am/.cache/* 1>/dev/null; cd /opt/am/.cache; wget -q $URL/APP-MANAGER && chmod a+x ./APP-MANAGER; cd ..;
  	mv /opt/am/.cache/APP-MANAGER /opt/am; chmod 777 /opt/am; echo ' THE "AM" SCRIPT IS NOW UPDATED TO THE '$(am -v)' VERSION! '; echo "";;
  '-t'|'template'|'convert')
	while [ -n "$1" ]
	do
	rm -f /opt/am/.cache/template-args
	echo $@ | tr ' ' '\n' >> /opt/am/.cache/template-args && echo STOP >> /opt/am/.cache/template-args
	ARGS=$(sed '1d' /opt/am/.cache/template-args)
	for arg in $ARGS; do
	for var in $arg; do
	if [ $arg == STOP ]; then
	exit
	else
	case $arg in
	*) for var in $arg
	do
	cd $(xdg-user-dir DESKTOP)
	echo "##############################################################"; echo ""
	echo ' Create templates for "'$arg'"
	' | tr a-z A-Z
	echo "--------------------------------------------------------------"; echo "" 
	echo " EACH MODEL IS BASED ON A DIFFERENT METHOD OF BUILDING/UPDATING THE PROGRAM.
	"
	echo ' PLEASE, SELECT A TEMPLATE FOR "'$(echo $arg | tr a-z A-Z)'": 
	'
	echo '  0) APPIMAGE updatable with "appimageupdatetool"' | tr a-z A-Z
	echo '  1) APPIMAGE updatable using a separated zsync file' | tr a-z A-Z
	echo "  2) APPIMAGE/deb/tar/zip ARCHIVE from github.com (always updatable)" | tr a-z A-Z
	echo "  3) APPIMAGE/deb/tar/zip ARCHIVE from AUR (always updatable)" | tr a-z A-Z
	echo "  4) APPIMAGE, build your own with pkg2appimage and appimagetool" | tr a-z A-Z
	echo "  5) APPIMAGE, build your own with pkg2appimage using a custom AppRun" | tr a-z A-Z
	echo '  6) WEBAPP based on a Firefox profile (requires "firefox" in $PATH)' | tr a-z A-Z
	echo " "
	read -r -p " WHAT KIND OF PROGRAM DO YOU WANT TO WRITE A SCRIPT FOR? : " response
	case "$response" in
    	0) mkdir -p ./am-scripts ./am-scripts/$arch ./am-scripts/ABOUT && wget -c -q $URL/templates/AM-SAMPLE-for-appimageupdate -O ./am-scripts/$arch/$arg && sed -i s/SAMPLE/$arg/g ./am-scripts/$arch/$arg &&
		echo " " >> ./am-scripts/ABOUT/$arg; echo " $COMMENT" >> ./am-scripts/ABOUT/$arg; echo " " >> ./am-scripts/ABOUT/$arg; echo " SITE: " >> ./am-scripts/ABOUT/$arg && 
		echo '◆ '$arg' : '$COMMENT'' >> ./am-scripts/list; echo ""; echo " All files are saved in $(xdg-user-dir DESKTOP)/am-scripts
		" ;;
    	1) mkdir -p ./am-scripts ./am-scripts/$arch ./am-scripts/ABOUT && wget -c -q $URL/templates/AM-SAMPLE-for-zsync -O ./am-scripts/$arch/$arg && sed -i s/SAMPLE/$arg/g ./am-scripts/$arch/$arg &&
		echo " " >> ./am-scripts/ABOUT/$arg; echo " $COMMENT" >> ./am-scripts/ABOUT/$arg; echo " " >> ./am-scripts/ABOUT/$arg; echo " SITE: " >> ./am-scripts/ABOUT/$arg && 
		echo '◆ '$arg' : '$COMMENT'' >> ./am-scripts/list; echo ""; echo " All files are saved in $(xdg-user-dir DESKTOP)/am-scripts
		" ;;
    	2) mkdir -p ./am-scripts ./am-scripts/$arch ./am-scripts/ABOUT && wget -c -q $URL/templates/AM-SAMPLE-GitHub-generic -O ./am-scripts/$arch/$arg && sed -i s/SAMPLE/$arg/g ./am-scripts/$arch/$arg &&
		echo "-----------------------------------------------------------------------";
		read -r -p " ◆ ADD THE NAME OF THE REPOSITORY (EXAMPLE 'NAME/REPOSITORY') 
 https://github.com/" RESPONSE
		case "$RESPONSE" in
		*) sed -i s#REPLACETHIS#$RESPONSE#g ./am-scripts/$arch/$arg
		COMMENT=$(curl https://api.github.com/repos/$RESPONSE 2>/dev/null | grep description | sed 's/"description": "//' | sed 's/",//')
		echo " " >> ./am-scripts/ABOUT/$arg; echo " $COMMENT" >> ./am-scripts/ABOUT/$arg; echo " " >> ./am-scripts/ABOUT/$arg; echo " SITE: https://github.com/$RESPONSE" >> ./am-scripts/ABOUT/$arg && 
		echo "◆ $arg : $COMMENT" >> ./am-scripts/list
		esac
		echo " LIST OF CATEGORIES:"; echo ""; echo " 0) AudioVideo"; echo " 1) Audio"; echo " 2) Video"; echo " 3) Development"; echo " 4) Education"; echo " 5) Game";
		echo " 6) Graphics"; echo " 7) Network"; echo " 8) Office"; echo " 9) Science"; echo " 10) Settings"; echo " 11) System"; echo " 12) Utility (default)"; echo "";
		read -r -p " CHOOSE A CATEGORY : " response
		case "$response" in
		0) sed -i s/YOURCATEGORY/AudioVideo/g ./am-scripts/$arch/$arg;;	1) sed -i s/YOURCATEGORY/Audio/g ./am-scripts/$arch/$arg;; 2) sed -i s/YOURCATEGORY/Video/g ./am-scripts/$arch/$arg;; 3) sed -i s/YOURCATEGORY/Development/g ./am-scripts/$arch/$arg;;
		4) sed -i s/YOURCATEGORY/Education/g ./am-scripts/$arch/$arg;; 5) sed -i s/YOURCATEGORY/Game/g ./am-scripts/$arch/$arg;; 6) sed -i s/YOURCATEGORY/Graphics/g ./am-scripts/$arch/$arg;; 7) sed -i s/YOURCATEGORY/Network/g ./am-scripts/$arch/$arg;;
		8) sed -i s/YOURCATEGORY/Office/g ./am-scripts/$arch/$arg;; 9) sed -i s/YOURCATEGORY/Science/g ./am-scripts/$arch/$arg;; 10) sed -i s/YOURCATEGORY/Settings/g ./am-scripts/$arch/$arg;; 11) sed -i s/YOURCATEGORY/System/g ./am-scripts/$arch/$arg;;
		12|*) sed -i s/YOURCATEGORY/Utility/g ./am-scripts/$arch/$arg;;
		esac
		echo "-----------------------------------------------------------------------";
		read -r -p " ◆ CHOOSE A FILE EXTENSION, IE
 APPIMAGE (1), DEB (2), TAR.BZ2 (3), TAR.GZ (4), TAR.XZ (5) OR ZIP (6): " RESPONSE
		case "$RESPONSE" in
		1) sed -i s/NAMETHATEXTENSION/AppImage/g ./am-scripts/$arch/$arg;;
		2) sed -i s/NAMETHATEXTENSION/deb/g ./am-scripts/$arch/$arg;;
		3) sed -i s/NAMETHATEXTENSION/tar.bz2/g ./am-scripts/$arch/$arg;;
		4) sed -i s/NAMETHATEXTENSION/tar.gz/g ./am-scripts/$arch/$arg;;
		5) sed -i s/NAMETHATEXTENSION/tar.xz/g ./am-scripts/$arch/$arg;;
		6) sed -i s/NAMETHATEXTENSION/zip/g ./am-scripts/$arch/$arg;;
		esac 
		echo "-----------------------------------------------------------------------";
		read -r -p " ◆ COPY/PASTE THE URL OF THE ICON HERE 
 URL: " RESPONSE
		case "$RESPONSE" in
		*) sed -i s#YOURICONURL#$RESPONSE#g ./am-scripts/$arch/$arg
		esac
		echo "-----------------------------------------------------------------------";
		read -r -p " ◆ ADD A PATH FOR THE EXTRACTED BINARY INTO THE ARCHIVE,
 FOR EXAMPLE 'opt/$arg' OR 'usr/share/$arg'
 (LEAVE BLANK IF YOU MANAGE APPIMAGES OR ZIP PACKAGES)  
 PATH/TO/FILES/IN/THE/ARCHIVE: " RESPONSE
		case "$RESPONSE" in
		*) sed -i s#PATHTOAPP#$RESPONSE#g ./am-scripts/$arch/$arg
		esac 
		echo "-----------------------------------------------------------------------";
		echo ""; echo " All files are saved in $(xdg-user-dir DESKTOP)/am-scripts
		" ;;

    	3) mkdir -p ./am-scripts ./am-scripts/$arch ./am-scripts/ABOUT && wget -c -q $URL/templates/AM-SAMPLE-AUR-generic -O ./am-scripts/$arch/$arg && sed -i s/SAMPLE/$arg/g ./am-scripts/$arch/$arg &&
		echo "-----------------------------------------------------------------------";
		read -r -p " ◆ NAME OF THE APP: " RESPONSE
		case "$RESPONSE" in
		*) sed -i s#NAMETHATAPP#$RESPONSE#g ./am-scripts/$arch/$arg
		COMMENT=$(wget -q https://aur.archlinux.org/packages/$arg -O - | grep -A1 Description | tail -1 | cut -c 30- | rev | cut -c 6- | rev)
		UPSTREAMURL=$(wget -q https://aur.archlinux.org/packages/$arg -O - | grep -A3 Upstream | grep -Eo "(http|https)://[a-zA-Z0-9./?=_%:-]*" | head -1)
		echo " " >> ./am-scripts/ABOUT/$arg; echo " $COMMENT" >> ./am-scripts/ABOUT/$arg; echo " " >> ./am-scripts/ABOUT/$arg; echo " SITE: $UPSTREAMURL" >> ./am-scripts/ABOUT/$arg && 
		echo "◆ $arg : $COMMENT" >> ./am-scripts/list
		esac
		echo " LIST OF CATEGORIES:"; echo ""; echo " 0) AudioVideo"; echo " 1) Audio"; echo " 2) Video"; echo " 3) Development"; echo " 4) Education"; echo " 5) Game";
		echo " 6) Graphics"; echo " 7) Network"; echo " 8) Office"; echo " 9) Science"; echo " 10) Settings"; echo " 11) System"; echo " 12) Utility (default)"; echo "";
		read -r -p " CHOOSE A CATEGORY : " response
		case "$response" in
		0) sed -i s/YOURCATEGORY/AudioVideo/g ./am-scripts/$arch/$arg;;	1) sed -i s/YOURCATEGORY/Audio/g ./am-scripts/$arch/$arg;; 2) sed -i s/YOURCATEGORY/Video/g ./am-scripts/$arch/$arg;; 3) sed -i s/YOURCATEGORY/Development/g ./am-scripts/$arch/$arg;;
		4) sed -i s/YOURCATEGORY/Education/g ./am-scripts/$arch/$arg;; 5) sed -i s/YOURCATEGORY/Game/g ./am-scripts/$arch/$arg;; 6) sed -i s/YOURCATEGORY/Graphics/g ./am-scripts/$arch/$arg;; 7) sed -i s/YOURCATEGORY/Network/g ./am-scripts/$arch/$arg;;
		8) sed -i s/YOURCATEGORY/Office/g ./am-scripts/$arch/$arg;; 9) sed -i s/YOURCATEGORY/Science/g ./am-scripts/$arch/$arg;; 10) sed -i s/YOURCATEGORY/Settings/g ./am-scripts/$arch/$arg;; 11) sed -i s/YOURCATEGORY/System/g ./am-scripts/$arch/$arg;;
		12|*) sed -i s/YOURCATEGORY/Utility/g ./am-scripts/$arch/$arg;;
		esac
		echo "-----------------------------------------------------------------------";
		read -r -p " ◆ CHOOSE A FILE EXTENSION, IE
 APPIMAGE (1), DEB (2), TAR.BZ2 (3), TAR.GZ (4), TAR.XZ (5) OR ZIP (6): " RESPONSE
		case "$RESPONSE" in
		1) sed -i s/NAMETHATEXTENSION/AppImage/g ./am-scripts/$arch/$arg;;
		2) sed -i s/NAMETHATEXTENSION/deb/g ./am-scripts/$arch/$arg;;
		3) sed -i s/NAMETHATEXTENSION/tar.bz2/g ./am-scripts/$arch/$arg;;
		4) sed -i s/NAMETHATEXTENSION/tar.gz/g ./am-scripts/$arch/$arg;;
		5) sed -i s/NAMETHATEXTENSION/tar.xz/g ./am-scripts/$arch/$arg;;
		6) sed -i s/NAMETHATEXTENSION/zip/g ./am-scripts/$arch/$arg;;
		esac 
		echo "-----------------------------------------------------------------------";
		read -r -p " ◆ COPY/PASTE THE URL OF THE ICON HERE 
 URL: " RESPONSE
		case "$RESPONSE" in
		*) sed -i s#YOURICONURL#$RESPONSE#g ./am-scripts/$arch/$arg
		esac
		echo "-----------------------------------------------------------------------";
		read -r -p " ◆ ADD A PATH FOR THE EXTRACTED BINARY INTO THE ARCHIVE,
 FOR EXAMPLE 'opt/$arg' OR 'usr/share/$arg'
 (LEAVE BLANK IF YOU MANAGE APPIMAGES OR ZIP PACKAGES) 
 PATH/TO/FILES/IN/THE/ARCHIVE: " RESPONSE
		case "$RESPONSE" in
		*) sed -i s#PATHTOAPP#$RESPONSE#g ./am-scripts/$arch/$arg
		esac 
		echo "-----------------------------------------------------------------------";
		echo ""; echo " All files are saved in $(xdg-user-dir DESKTOP)/am-scripts
		" ;;
    	4) mkdir -p ./am-scripts ./am-scripts/$arch ./am-scripts/ABOUT && wget -c -q $URL/templates/AM-SAMPLE-pkg2appimage -O ./am-scripts/$arch/$arg && sed -i s/SAMPLE/$arg/g ./am-scripts/$arch/$arg &&
		echo " " >> ./am-scripts/ABOUT/$arg; echo " $COMMENT" >> ./am-scripts/ABOUT/$arg; echo " " >> ./am-scripts/ABOUT/$arg; echo " SITE: " >> ./am-scripts/ABOUT/$arg && 
		echo '◆ '$arg' : '$COMMENT'' >> ./am-scripts/list; echo ""; echo " All files are saved in $(xdg-user-dir DESKTOP)/am-scripts
		" ;;
    	5) mkdir -p ./am-scripts ./am-scripts/$arch ./am-scripts/ABOUT && wget -c -q $URL/templates/AM-SAMPLE-pkg2appimage-custom -O ./am-scripts/$arch/$arg && sed -i s/SAMPLE/$arg/g ./am-scripts/$arch/$arg &&
		echo " " >> ./am-scripts/ABOUT/$arg; echo " $COMMENT" >> ./am-scripts/ABOUT/$arg; echo " " >> ./am-scripts/ABOUT/$arg; echo " SITE: " >> ./am-scripts/ABOUT/$arg && 
		echo '◆ '$arg' : '$COMMENT'' >> ./am-scripts/list; echo ""; echo " All files are saved in $(xdg-user-dir DESKTOP)/am-scripts
		" ;;
    	6) mkdir -p ./am-scripts ./am-scripts/$arch ./am-scripts/ABOUT && wget -c -q $URL/templates/AM-SAMPLE-Firefox-webapp -O ./am-scripts/$arch/ffwa-$arg && sed -i s/SAMPLE/$arg/g ./am-scripts/$arch/ffwa-$arg &&
		echo "-----------------------------------------------------------------------";
		read -r -p " ◆ NAME OF THE APP: " RESPONSE
		case "$RESPONSE" in
		*) sed -i s#GIVEMEANAME#$RESPONSE#g ./am-scripts/$arch/ffwa-$arg
		echo " " >> ./am-scripts/ABOUT/ffwa-$arg; echo " WebApp & Firefox Profile for $RESPONSE." >> ./am-scripts/ABOUT/ffwa-$arg; echo " " >> ./am-scripts/ABOUT/ffwa-$arg; echo " SITE: MYWEBSITE" >> ./am-scripts/ABOUT/ffwa-$arg && 
		echo "◆ ffwa-$arg : WebApp & Firefox Profile for $RESPONSE." >> ./am-scripts/list
		esac
		echo " LIST OF CATEGORIES:"; echo ""; echo " 0) AudioVideo"; echo " 1) Audio"; echo " 2) Video"; echo " 3) Development"; echo " 4) Education"; echo " 5) Game";
		echo " 6) Graphics"; echo " 7) Network"; echo " 8) Office"; echo " 9) Science"; echo " 10) Settings"; echo " 11) System"; echo " 12) Utility (default)"; echo "";
		read -r -p " CHOOSE A CATEGORY : " response
		case "$response" in
		0) sed -i s/YOURCATEGORY/AudioVideo/g ./am-scripts/$arch/ffwa-$arg;;	1) sed -i s/YOURCATEGORY/Audio/g ./am-scripts/$arch/ffwa-$arg;; 2) sed -i s/YOURCATEGORY/Video/g ./am-scripts/$arch/ffwa-$arg;; 3) sed -i s/YOURCATEGORY/Development/g ./am-scripts/$arch/ffwa-$arg;;
		4) sed -i s/YOURCATEGORY/Education/g ./am-scripts/$arch/ffwa-$arg;; 5) sed -i s/YOURCATEGORY/Game/g ./am-scripts/$arch/ffwa-$arg;; 6) sed -i s/YOURCATEGORY/Graphics/g ./am-scripts/$arch/ffwa-$arg;; 7) sed -i s/YOURCATEGORY/Network/g ./am-scripts/$arch/ffwa-$arg;;
		8) sed -i s/YOURCATEGORY/Office/g ./am-scripts/$arch/ffwa-$arg;; 9) sed -i s/YOURCATEGORY/Science/g ./am-scripts/$arch/ffwa-$arg;; 10) sed -i s/YOURCATEGORY/Settings/g ./am-scripts/$arch/ffwa-$arg;; 11) sed -i s/YOURCATEGORY/System/g ./am-scripts/$arch/ffwa-$arg;;
		12|*) sed -i s/YOURCATEGORY/Utility/g ./am-scripts/$arch/ffwa-$arg;;
		esac
		echo "-----------------------------------------------------------------------";
		read -r -p " ◆ URL OF THE WEBAPP: " RESPONSE
		case "$RESPONSE" in
		*) sed -i s#MYWEBSITE#$RESPONSE#g ./am-scripts/$arch/ffwa-$arg; sed -i s#MYWEBSITE#$RESPONSE#g ./am-scripts/ABOUT/ffwa-$arg;;
		esac 
		echo "-----------------------------------------------------------------------";
		read -r -p " ◆ COPY/PASTE THE URL OF THE ICON HERE 
 URL: " RESPONSE
		case "$RESPONSE" in
		*) sed -i s#YOURICONURL#$RESPONSE#g ./am-scripts/$arch/ffwa-$arg
		esac
		echo "-----------------------------------------------------------------------";
		echo ""; echo " All files are saved in $(xdg-user-dir DESKTOP)/am-scripts
		" ;;
    	*) echo ""; echo " No valid argument was chosen: process aborted! " | tr a-z A-Z; echo ""; break;;
	esac
	done
	esac
	fi
	done
	done
	done
	shift;;
  '-u'|'update') 
	while [ -n "$1" ]
	do
	case $2 in
	'') echo ""; echo ' "AM" CAN MANAGE UPDATES FOR THE FOLLOWING PROGRAMS: '; echo "";
  		cd /opt && find -name 'AM-updater' -printf " %h\n" | sort -u | xargs -n 1 basename; echo "" ;
		echo ' ALL OTHERS ARE FIXED VERSIONS OR CAN MANAGE UPDATES BY THEMSELF'; echo ""; sleep 1;
		read -p " This may take several minutes, do you wish to continue (Y,n)?" yn
		case $yn in
		[Nn]* ) echo ""; exit;;
		[Yy]*|* ) echo ""; echo " THE UPDATE VERIFICATION PROCESS IS IN PROGRESS, PLEASE WAIT..."; sleep 2; echo ""; echo "-----------------------------------------------------------------------";
		  	echo " >> START OF ALL PROCESSES << "; echo "-----------------------------------------------------------------------"; echo "";
		  	for f in /opt/*/; do cd $f && if test -f ./AM-updater; then
			echo ' Updating "'$(echo $f | cut -c 5- | tr -d '/')'"...' &&
			SECONDS=0; $(sh -x ./AM-updater > /dev/null 2>&1); duration=$SECONDS;
			echo " "$(echo $f | cut -c 5- | tr -d '/')" is updated!" | tr a-z A-Z && echo " $(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed!" && echo "";
			else
			echo ""  > /dev/null 2>&1; fi; done;
			rm -R -f /opt/am/.cache/* /opt/*/tmp; echo "-----------------------------------------------------------------------"; am -s; 
			echo "-----------------------------------------------------------------------";
			echo " >> END OF ALL PROCESSES << "; 
		  	echo "-----------------------------------------------------------------------";echo ""; sleep 2;
		  	echo ' ALL THE PROGRAMS MANAGED BY "AM" ARE UPDATED! '; echo "" && exit; break;;
		esac;;
	*) if test -f /opt/$2/AM-updater; then
			echo "" && echo ' Updating '$2'...' | tr a-z A-Z && echo "" && /opt/$2/AM-updater && echo "" &&
			SECONDS=0; $(sh -x ./AM-updater > /dev/null 2>&1); duration=$SECONDS;
			echo " " $2" is updated!" | tr a-z A-Z && echo " $(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed!" && echo "" && break;
		else
			echo "" && echo ' "AM" CANNOT MANAGE UPDATES FOR "'$2'"' | tr a-z A-Z &&
			UPDATERS=$(cd /opt/$2 && find . -name "*update*" -print)
			if [[ -n "$UPDATERS" ]]; then
				echo ' This program probably includes its own update system!' | tr a-z A-Z &&
				echo ' References to the word "update" were found in its directory!'
			else
				echo "" && break
			fi
			echo "" && exit;
		fi
	esac
	shift
	done;;
  '-w'|'web')
	while [ -n "$1" ]
	do
	if curl --output /dev/null --silent --head --fail $URL/programs/.about/$2  1>/dev/null; then
	case $2 in
	*) for var in $2;
	do rm -R -f /opt/am/.cache/about; mkdir /opt/am/.cache/about;
		cd /opt/am/.cache/about && wget -q $URL/programs/.about/$2 && echo "" && echo " SITE/SOURCES:" && echo "" &&
		grep -o " http[^ ]*" ./$2 && echo "" && exit; done
	esac
	else
	echo ""; 
	echo ' "'$2'" IS NOT A VALID ARGUMENT, PLEASE RUN THE "am -l" COMMAND'; echo ""; 
	echo ' TO SEE THE LIST OF ALL THE APPLICATIONS AVAILABLE FOR '$arch''; echo "";
	echo ' OR START A SEARCH (WITH KEYWORDS) BY USING THE "am -q" COMMAND'; echo "";
	exit;
	fi
	done
	shift;;
  '--disable-completion')
	if test -f /etc/bash_completion.d/am-completion.sh; then
	sudo rm -R -f /etc/bash_completion.d/am-completion.sh;
	else
	echo " Completion script is NOT enabled! "
	fi;;
  '--enable-completion')
	if test -f /etc/bash_completion.d/am-completion.sh; then
	echo " Completion script is already enabled!";
	else
	echo " Bash completion is a functionality through which bash helps users "
	echo " type their commands faster and easier. It accomplishes that by " 
	echo " presenting possible options when users press the TAB key while typing"
	echo " a command."
	echo " If you want to enable the completion for all users, you can just put"
	echo " the script under /etc/bash_completion.d/ and it will automatically be"
	echo " loaded by Bash, ROOT REQUIRED!"; echo ""
	read -p ' Do you wish to create a bash completion script for "AM" (y,N)?' yn
	case $yn in
		'N'|'n') exit;;
		'Y'|'y') echo '#!/usr/bin/env bash' >> /opt/am/am-completion.sh; echo 'complete -W "$(cat /opt/am/list 2>/dev/null)" am' >> /opt/am/am-completion.sh
			 chmod a+x /opt/am/am-completion.sh
			 rm -R -f /opt/am/remove; echo '#!/bin/sh' >> /opt/am/remove
			 echo 'rm -R -f /usr/local/bin/am /opt/am /etc/bash_completion.d/am-completion.sh' >> /opt/am/remove
			 chmod a+x /opt/am/remove; chown -R $currentuser /opt/am/remove 2>/dev/null 
			 if test -f /etc/bash_completion.d; then
				sudo mv /opt/am/am-completion.sh /etc/bash_completion.d/
			 else
				sudo mkdir -p /etc/bash_completion.d; sudo mv /opt/am/am-completion.sh /etc/bash_completion.d/
			 fi;;
		*) exit;;
	esac 
	fi;;
  'lock')
	while [ -n "$1" ]
	do
	if test -f /opt/$2/AM-updater; then
	case $2 in
	*) for var in $2;
	do echo ""; read -p " Do you wish to keep $2  at the current version (y,N)?" yn
		case $yn in
		[Yy]* ) echo "";  mv /opt/$2/AM-updater /opt/$2/AM-LOCK 1>/dev/null &&
			echo " $2 has been locked at current version!" && echo "" && exit; break;;
		[Nn]*|* ) echo ""; echo " $2 is still updatable, exiting!"; echo ""; exit;; esac done;;
	esac
	else
	echo ""; echo ' AM cannot manage updates for '$2', "AM-updater" file not found!'; echo ""; exit;
	fi
	done
	shift;;
  'unlock')
	while [ -n "$1" ]
	do
	if test -f /opt/$2/AM-LOCK; then
	case $2 in
	*) for var in $2;
	do echo ""; read -p " Do you wish to unlock updates for $2 (Y,n)?" yn
		case $yn in
		[Nn]* ) echo ""; echo " $2 is still locked at current version!"; echo ""; exit;;
		[Yy]*|* ) echo "";  mv /opt/$2/AM-LOCK /opt/$2/AM-updater 1>/dev/null &&
			echo ' '$2' can now receive updates, use the "am -u" command to update everything!' && echo "" && exit; break;; esac done;;
	esac
	else
	echo ""; echo ' '$2' cannot be unlocked, "AM-LOCK" file not found!'; echo ""; exit;
	fi
	done
	shift;;
  'version'|'-v'|'--version') echo "4.0.0-9";;
  *) exec /opt/am/APP-MANAGER ;;
esac
