#!/bin/sh

APP=filezilla

# CREATING THE FOLDER
mkdir /opt/$APP
cd /opt/$APP;

# ADD THE REMOVER
echo '#!/bin/sh' >> /opt/$APP/remove
echo "rm -R -f /usr/share/applications/AM-$APP.desktop /opt/$APP /usr/local/bin/$APP" >> /opt/$APP/remove
chmod a+x /opt/$APP/remove
APP=filezilla
mkdir tmp;
cd tmp;

# DOWNLOADING THE DEPENDENCIES
wget https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-$(uname -m).AppImage -O appimagetool
wget https://raw.githubusercontent.com/ivan-hc/AM-application-manager/main/tools/pkg2appimage # 64 BIT ONLY (comment to disable)
# wget https://github.com/ivan-hc/pkg2appimage-32bit/releases/download/continuous/pkg2appimage-i386.AppImage -O pkg2appimage # 32 BIT ONLY (uncomment to enable)
chmod a+x ./appimagetool ./pkg2appimage

# CREATING THE APPIMAGE: APPDIR FROM A RECIPE...
echo "app: filezilla
binpatch: true

ingredients:
  dist: stable
  sources:
    - deb http://deb.debian.org/debian/ stable main contrib non-free
    - deb http://deb.debian.org/debian-security/ stable-security main contrib non-free
    - deb http://deb.debian.org/debian stable-updates main contrib non-free
    - deb http://deb.debian.org/debian stable-backports main contrib non-free
  packages:
    - filezilla" >> recipe.yml;

cp /opt/$APP/tmp/recipe.yml /opt/$APP/recipe.yml

./pkg2appimage ./recipe.yml;

cp /opt/$APP/tmp/$APP/$APP.AppDir/$APP.png /opt/$APP/$APP.png

# ...DOWNLOADING LIBUNIONPRELOAD...
wget https://github.com/project-portable/libunionpreload/releases/download/amd64/libunionpreload.so
chmod a+x libunionpreload.so
mv ./libunionpreload.so ./$APP/$APP.AppDir/

# ...REPLACING THE EXISTING APPRUN WITH A CUSTOM ONE...
rm -R -f ./$APP/$APP.AppDir/AppRun
function1="'^Exec=.*'"
function2="'s|%.||g'"
echo '#!/bin/sh
HERE="$(dirname "$(readlink -f "${0}")")"
export UNION_PRELOAD="${HERE}"
export LD_PRELOAD="${HERE}/libunionpreload.so"
export PATH="${HERE}"/usr/bin/:"${PATH}"
export LD_LIBRARY_PATH=/usr/lib/x86_64-linux-gnu/:"${HERE}"/usr/lib/:"${HERE}"/usr/lib/i386-linux-gnu/:"${HERE}"/usr/lib/x86_64-linux-gnu/:"${HERE}"/lib/:"${HERE}"/lib/i386-linux-gnu/:"${HERE}"/lib/x86_64-linux-gnu/:"${LD_LIBRARY_PATH}"
export XDG_DATA_DIRS="${HERE}"/usr/share/:"${HERE}"/usr/share/filezilla/:"${XDG_DATA_DIRS}"
export GSETTINGS_SCHEMA_DIR="${HERE}"/usr/lib/x86_64-linux-gnu/glib-2.0/:"${GSETTINGS_SCHEMA_DIR}"
EXEC=$(grep -e '$function1' "${HERE}"/*.desktop | head -n 1 | cut -d "=" -f 2- | sed -e '$function2')
exec ${EXEC} "$@"' >> AppRun
chmod a+x AppRun
cp ./AppRun /opt/$APP/
mv ./AppRun ./$APP/$APP.AppDir

# ...IMPORT THE LAUNCHER AND THE ICON TO THE APPDIR (uncomment if not available)...
#cp ./$APP/$APP.AppDir/usr/share/icons/hicolor/22x22/apps/* ./$APP/$APP.AppDir/ 2>/dev/null
#cp ./$APP/$APP.AppDir/usr/share/icons/hicolor/24x24/apps/* ./$APP/$APP.AppDir/ 2>/dev/null
#cp ./$APP/$APP.AppDir/usr/share/icons/hicolor/32x32/apps/* ./$APP/$APP.AppDir/ 2>/dev/null
#cp ./$APP/$APP.AppDir/usr/share/icons/hicolor/48x48/apps/* ./$APP/$APP.AppDir/ 2>/dev/null
#cp ./$APP/$APP.AppDir/usr/share/icons/hicolor/64x64/apps/* ./$APP/$APP.AppDir/ 2>/dev/null
#cp ./$APP/$APP.AppDir/usr/share/icons/hicolor/128x128/apps/* ./$APP/$APP.AppDir/ 2>/dev/null
#cp ./$APP/$APP.AppDir/usr/share/icons/hicolor/256x256/apps/* ./$APP/$APP.AppDir/ 2>/dev/null
#cp ./$APP/$APP.AppDir/usr/share/icons/hicolor/512x512/apps/* ./$APP/$APP.AppDir/ 2>/dev/null
#cp ./$APP/$APP.AppDir/usr/share/icons/hicolor/scalable/apps/* ./$APP/$APP.AppDir/ 2>/dev/null
#cp ./$APP/$APP.AppDir/usr/share/applications/* ./$APP/$APP.AppDir/ 2>/dev/null

# ...EXPORT THE APPDIR TO AN APPIMAGE!
ARCH=x86_64 ./appimagetool -n ./$APP/$APP.AppDir;
underscore=_
mkdir version
mv ./$APP/$APP$underscore*.deb ./version/
version=$(ls /opt/$APP/tmp/version)
echo "$version" >> /opt/$APP/version

cd ..;
mv ./tmp/*.AppImage ./$APP;
chmod a+x ./$APP

rm -R -f ./tmp

# LINK
ln -s /opt/$APP/$APP /usr/local/bin/$APP

# SCRIPT TO UPDATE THE PROGRAM
initial=$(echo $APP | head -c 1)
echo '#!/bin/sh
version0=$(cat /opt/'$APP'/version)
url="http://http.us.debian.org/debian/pool/main/'$initial'/'$APP'/$version0"
if curl --output /dev/null --silent --head --fail "$url"; then
  echo "Update not needed, exit!"
else
  notify-send "A new version of '$APP' is available, please wait!"
  mkdir /opt/'$APP'/tmp
  cd /opt/'$APP'/tmp
  wget https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage -O appimagetool
  wget -r -A .AppImage -nd https://github.com/AppImage/pkg2appimage/releases/tag/continuous && mv pkg2appimage* pkg2appimage
  chmod a+x ./appimagetool ./pkg2appimage
  cp /opt/'$APP'/recipe.yml /opt/'$APP'/tmp/recipe.yml
  ./pkg2appimage ./recipe.yml;
  wget https://github.com/project-portable/libunionpreload/releases/download/amd64/libunionpreload.so
  chmod a+x libunionpreload.so
  mv ./libunionpreload.so ./'$APP'/'$APP'.AppDir/
  rm -R -f ./'$APP'/'$APP'.AppDir/AppRun
  cp /opt/'$APP'/AppRun ./'$APP'/'$APP'.AppDir/
  ARCH=x86_64 ./appimagetool -n ./'$APP'/'$APP'.AppDir
  mkdir version
  mv ./'$APP'/'$APP''$underscore'*.deb ./version/
  cd ..
  version=$(ls /opt/'$APP'/tmp/version)
  if test -f ./tmp/version/$version; then rm -R -f ./version
  fi
  echo "$version" >> /opt/'$APP'/version
  mv ./tmp/*.AppImage ./'$APP';
  chmod a+x ./'$APP'
  rm -R -f ./tmp
fi' >> /opt/$APP/AM-updater
chmod a+x /opt/$APP/AM-updater

# LAUNCHER
echo "[Desktop Entry]
Name=FileZilla
GenericName=FTP client
GenericName[da]=FTP-klient
GenericName[de]=FTP-Client
GenericName[fr]=Client FTP
Comment=Download and upload files via FTP, FTPS and SFTP
Comment[da]=Download og upload filer via FTP, FTPS og SFTP
Comment[de]=Dateien über FTP, FTPS und SFTP übertragen
Comment[fr]=Transférer des fichiers via FTP, FTPS et SFTP
Exec=filezilla
Terminal=false
Icon=/opt/$APP/filezilla.png
Type=Application
Categories=Network;FileTransfer;
Version=1.0" >> /usr/share/applications/AM-$APP.desktop

currentuser=$(who | awk '{print $1}')
chown -R $currentuser /opt/$APP

echo "

 Filezilla is provided by https://filezilla-project.org
  
";
