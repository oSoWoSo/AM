#!/bin/sh

# AM INSTALL SCRIPT VERSION 3.5
set -u
APP=kdenlive
SITE="https://kdenlive.org"

# CREATE DIRECTORIES AND ADD REMOVER
[ -n "$APP" ] && mkdir -p "/opt/$APP/tmp" "/opt/$APP/icons" && cd "/opt/$APP/tmp" || exit 1
printf "#!/bin/sh\nset -e\nrm -f /usr/local/bin/$APP\nrm -R -f /opt/$APP" > ../remove
printf '\n%s' "rm -f /usr/local/share/applications/$APP-AM.desktop" >> ../remove
chmod a+x ../remove || exit 1

# DOWNLOAD AND PREPARE THE APP, $version is also used for updates
version=$(curl -Ls https://kdenlive.org/en/download/ | grep -Eo "(http|https)://[a-zA-Z0-9./?=_%:-]*" | grep AppImage | head -1)
wget "$version" || exit 1
# Keep this space in sync with other installation scripts
# Use tar fx ./*tar* here for example in this line in case a compressed file is downloaded.
cd ..
mv ./tmp/*mage ./"$APP"
# Keep this space in sync with other installation scripts
rm -R -f ./tmp || exit 1
echo "$version" > ./version
chmod a+x ./"$APP" || exit 1

# LINK TO PATH
ln -s "/opt/$APP/$APP" "/usr/local/bin/$APP"

# SCRIPT TO UPDATE THE PROGRAM
cat >> ./AM-updater << 'EOF'
#!/bin/sh
set -u
APP=kdenlive
SITE="https://kdenlive.org"
version0=$(cat "/opt/$APP/version")
version=$(curl -Ls https://kdenlive.org/en/download/ | grep -Eo "(http|https)://[a-zA-Z0-9./?=_%:-]*" | grep AppImage | head -1)
[ -n "$version" ] || { echo "Error getting link"; exit 1; }
if command -v appimageupdatetool >/dev/null 2>&1; then
	cd "/opt/$APP" || exit 1
	appimageupdatetool -Or ./"$APP" && chmod a+x ./"$APP" && echo "$version" > ./version && exit 0
fi
if [ "$version" != "$version0" ]; then
	mkdir "/opt/$APP/tmp" && cd "/opt/$APP/tmp" || exit 1
	notify-send "A new version of $APP is available, please wait"
	wget "$version" || exit 1
	# Use tar fx ./*tar* here for example in this line in case a compressed file is downloaded.
	cd ..
	mv --backup=t ./tmp/*mage ./"$APP"
	chmod a+x ./"$APP" || exit 1
	echo "$version" > ./version
	rm -R -f ./*zs-old ./*.part ./tmp ./*~
	notify-send "$APP is updated!"
else
	echo "Update not needed!"
fi
EOF
chmod a+x ./AM-updater || exit 1

# LAUNCHER & ICON
./"$APP" --appimage-extract *.desktop 1>/dev/null && mv ./squashfs-root/*.desktop ./"$APP".desktop
./"$APP" --appimage-extract .DirIcon 1>/dev/null && mv ./squashfs-root/.DirIcon ./DirIcon
COUNT=0
while [ "$COUNT" -lt 10 ]; do # Tries to get the actual icon/desktop if it is a symlink to another symlink
	if [ -L ./"$APP".desktop ]; then
		LINKPATH="$(readlink ./"$APP".desktop | sed 's|^\./||' 2>/dev/null)"
		./"$APP" --appimage-extract "$LINKPATH" 1>/dev/null && mv ./squashfs-root/"$LINKPATH" ./"$APP".desktop
	fi
	if [ -L ./DirIcon ]; then
		LINKPATH="$(readlink ./DirIcon | sed 's|^\./||' 2>/dev/null)"
		./"$APP" --appimage-extract "$LINKPATH" 1>/dev/null && mv ./squashfs-root/"$LINKPATH" ./DirIcon
	fi
	[ ! -L ./"$APP".desktop ] && [ ! -L ./DirIcon ] && break
	COUNT=$((COUNT + 1))
done
sed -i "s#Exec=[^ ]*#Exec=$APP#g; s#Icon=.*#Icon=/opt/$APP/icons/$APP#g" ./"$APP".desktop
mv ./"$APP".desktop /usr/local/share/applications/"$APP"-AM.desktop && mv ./DirIcon ./icons/"$APP" 1>/dev/null
rm -R -f ./squashfs-root

# ROLLBACK SCRIPT
cat >> /opt/$APP/$APP-rollback << 'EOF'
#!/usr/bin/env bash

APP=kdenlive
rm -f ./rollback-args* ./AM-rollback

# STABLE AND MORE RECENT VERSIONS
STABLE=$(curl -Ls https://download.kde.org/stable/kdenlive/ | grep -Eo "[0-9.?]*" | grep -i ".12\|.08\|.04" | uniq | sort -nr)
for arg in $STABLE; do
	for var in $arg; do
		printf "%s\n" $(curl -Ls https://download.kde.org/stable/kdenlive/$var/linux/ | grep -Eo "[a-zA-Z0-9./?=_%:-]*" | grep -i kdenlive | uniq | sort -nr | grep -v '/' | grep -i appimage) >> "./rollback-args-1"
	done
done

# ARCHIVED OLD RELEASES (THAT MAY NOT WORK)
ARCHIVED=$(curl -Ls https://download.kde.org/Attic/kdenlive/ | grep -Eo "[0-9.?]*" | grep -i ".12\|.08\|.04" | uniq | sort -nr)
for arg in $ARCHIVED; do
	for var in $arg; do
		printf "%s\n" $(curl -Ls https://download.kde.org/Attic/kdenlive/$var/linux/ | grep -Eo "[a-zA-Z0-9./?=_%:-]*" | grep -i kdenlive | uniq | sort -nr | grep -v '/' | grep -i appimage) >> "./rollback-args-2"
	done
done

# PREPARE THE LIST OF VERSIONS BY MERGING THE TWO ABOVE
for arg in $(cat ./rollback-args-1); do
	for var in $arg; do
		rel=$(echo $arg | cut -c 10- | cut -c -5)
		printf "%s\n" https://download.kde.org/stable/kdenlive/$rel/linux/$arg >> "./rollback-args"
	done
done
for arg in $(cat ./rollback-args-2); do
	for var in $arg; do
		rel=$(echo $arg | cut -c 10- | cut -c -5)
		printf "%s\n" https://download.kde.org/Attic/kdenlive/$rel/linux/$arg >> "./rollback-args"
	done
done

# LET ROLLBACK KDENLIVE
echo -e "-----------------------------------------------------------------------\nYou have chosen to roll back $APP.\nRollback will be done from https://kdenlive.org\n-----------------------------------------------------------------------"
printf "Select a URL from this menu (read carefully) or press CTRL+C to abort:\n-----------------------------------------------------------------------\n"; sleep 1;
select d in $(cat "./rollback-args"); do test -n "$d" && break; echo ">>> Invalid Selection"; done
cp ./AM-updater ./AM-rollback
sed -i 's/version0/#version0/g' ./AM-rollback
sed -i '/show-progress/c\wget -q --show-progress '$d'' ./AM-rollback
./AM-rollback
rm -f ./version
echo $d >> ./version
rm -f ./rollback-args* ./AM-rollback
echo -e "\nROLLBACK SUCCESSFUL!"
exit
EOF
chmod a+x /opt/$APP/$APP-rollback
