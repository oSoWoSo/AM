#!/bin/sh

APP=kdiskmark
REPO="JonMagon/KDiskMark"

CATEGORIES="System"
ICONURL="https://raw.githubusercontent.com/JonMagon/KDiskMark/master/data/icons/256-apps-kdiskmark.png"

USER=$(echo $REPO | sed 's:/[^/]*$::')
REPO2=$(echo $REPO | sed 's:.*/::')
FILENAMEEXTENTION="/.*/.*.AppImage"
URL=https://github.com/$REPO/releases/latest
COMMENT=$(curl https://api.github.com/repos/$REPO 2>/dev/null | grep description | sed 's/"description": "//' | sed 's/",//')
APPNAME=$(echo $REPO2 | sed 's/-/ /g' | sed 's/_/ /g')

# CREATE THE FOLDER
mkdir /opt/$APP
cd /opt/$APP

# ADD THE REMOVER
echo '#!/bin/sh' >> /opt/$APP/remove
echo "rm -R -f /usr/share/applications/AM-$APP.desktop /opt/$APP /usr/local/bin/$APP" >> /opt/$APP/remove
chmod a+x /opt/$APP/remove

# DOWNLOAD THE ARCHIVE
mkdir tmp
cd ./tmp

download=$(wget -q https://api.github.com/repos/$REPO/releases/latest -O - | grep -E browser_download_url | awk -F '[""]' '{print $4}' | grep -w -v i386 | grep -w -v i686 | grep -w -v arm64 | grep -w -v armv7l | egrep ''$FILENAMEEXTENTION'' -o | head -1);
wget https:$download
version=$(wget -q https://api.github.com/repos/$REPO/releases/latest -O - | grep -E tag_name | awk -F '[""]' '{print $4}')
echo "$version" >> /opt/$APP/version
if ls . | grep mage; then
	cd ..
	mv ./tmp/*mage ./$APP
	chmod a+x /opt/$APP/$APP
	rmdir ./tmp
elif ls . | grep .deb; then
	ar x ./*.deb
	tar fx ./data.tar.xz
	cd ..
	mv ./tmp//* ./
	rm -R -f ./tmp
elif ls . | grep .tar.bz2; then
	tar fx *.tar.bz2
	dir=$(ls . | grep -w -v *.tar.*)
	cd ..
	mv ./tmp/$(echo $dir)/* ./
	rm -R -f ./tmp
elif ls . | grep .tar.gz; then
	tar fx *.tar.gz
	dir=$(ls . | grep -w -v *.tar.*)
	cd ..
	mv ./tmp/$(echo $dir)/* ./
	rm -R -f ./tmp
elif ls . | grep .tar.xz; then
	tar fx *.tar.xz
	dir=$(ls . | grep -w -v *.tar.*)
	cd ..
	mv ./tmp/$(echo $dir)/* ./
	rm -R -f ./tmp
elif ls ./tmp/ | grep .zip; then
	unzip *.zip
	dir=$(ls . | grep -w -v *.zip)
	cd ..
	mv ./tmp/$(echo $dir)/* ./
	rm -R -f ./tmp
fi

#-------------------------------------

# LINK
ln -s /opt/$APP/$APP /usr/local/bin/$APP

# SCRIPT TO UPDATE THE PROGRAM
cat >> /opt/$APP/AM-updater << 'EOF'
#!/usr/bin/env bash
APP=kdiskmark
REPO="JonMagon/KDiskMark"
FILENAMEEXTENTION="/.*/.*.AppImage"
version0=$(cat /opt/$APP/version)
url=https://github.com/$REPO/releases/latest
if curl -L -s $url | grep -ioF "$version0"; then
  echo "Update not needed!"
else
  notify-send "A new version of $APP is available, please wait"
  mkdir /opt/$APP/tmp
  cd /opt/$APP/tmp
  download=$(wget -q https://api.github.com/repos/$REPO/releases/latest -O - | grep -E browser_download_url | awk -F '[""]' '{print $4}' | grep -w -v i386 | grep -w -v i686 | grep -w -v arm64 | grep -w -v armv7l | egrep ''$FILENAMEEXTENTION'' -o | head -1);
  wget https:$download
  version=$(wget -q https://api.github.com/repos/$REPO/releases/latest -O - | grep -E tag_name | awk -F '[""]' '{print $4}')
  if ls . | grep mage; then
	cd ..
  	if test -f ./tmp/*mage; then rm ./version
  	fi
  	echo $version >> ./version
  	mv --backup=t ./tmp/*mage ./$APP
  	chmod a+x /opt/$APP/$APP
  	rm -R -f ./tmp ./*~
  elif ls . | grep .deb; then
	ar x ./*.deb
	tar fx ./data.tar.xz
	cd ..
  	if test -f ./tmp/*.deb; then rm ./version
  	fi
  	echo $version >> ./version
  	mv --backup=t ./tmp//* ./
  	rm -R -f ./tmp ./*~
  elif ls . | grep .tar.bz2; then
	tar fx *.tar.bz2
	dir=$(ls . | grep -w -v *.tar.*)
	cd ..
  	if test -f ./tmp/*.tar.bz2; then rm ./version
  	fi
  	echo $version >> ./version
	mv --backup=t ./tmp/$(echo $dir)/* ./
	rm -R -f ./tmp
  elif ls . | grep .tar.gz; then
	tar fx *.tar.gz
	dir=$(ls . | grep -w -v *.tar.*)
	cd ..
  	if test -f ./tmp/*.tar.gz; then rm ./version
  	fi
  	echo $version >> ./version
	mv --backup=t ./tmp/$(echo $dir)/* ./
	rm -R -f ./tmp
  elif ls . | grep .tar.xz; then
	tar fx *.tar.xz
	dir=$(ls . | grep -w -v *.tar.*)
	cd ..
  	if test -f ./tmp/*.tar.xz; then rm ./version
  	fi
  	echo $version >> ./version
	mv --backup=t ./tmp/$(echo $dir)/* ./
	rm -R -f ./tmp
  elif ls ./tmp/ | grep .zip; then
	unzip *.zip
	dir=$(ls . | grep -w -v *.zip)
	cd ..
  	if test -f ./tmp/*.zip; then rm ./version
  	fi
  	echo $version >> ./version
	mv --backup=t ./tmp/$(echo $dir)/* ./
	rm -R -f ./tmp
  fi
  notify-send "$APP is updated!"
fi
EOF
chmod a+x /opt/$APP/AM-updater

# LAUNCHER
rm /usr/share/applications/AM-$APP.desktop
echo "[Desktop Entry]
Name=KDiskMark
GenericName=KDiskMark
Comment=A disk drive benchmark tool
Comment[cs]=Nástroj pro otestování výkonnosti datového úložiště
Comment[de]=Ein Festplatten-Benchmark-Tool
Comment[es_MX]=Una herramienta para benchmark de unidades de disco
Comment[fr]=Un outil pour mesurer la performance des disques physiques
Comment[hu]=Lemezek teljesítményét mérő alkalmazás
Comment[it]=Uno strumento per misurare le prestazioni di dischi e memorie fisiche
Comment[pl]=Narzędzie do testowania wydajności dysków
Comment[pt_BR]=Uma ferramenta de benchmark de discos
Comment[ru]=Тестирование производительности накопителей
Comment[sv]=Prestandatest för hårddiskar
Comment[tr]=Disk Sürücü performans ölçüm aracı
Comment[zh_CN]=磁盘测速工具
Keywords=benchmark;disk;
Keywords[es_MX]=benchmark;disco;
Keywords[de]=benchmark;laufwerk;disk;
Keywords[fr]=benchmark;disque;performance;
Keywords[hu]=benchmark;teljesítmény;mérés;lemez;meghajtó;
Keywords[it]=benchmark;disco;prestazioni;
Keywords[pl]=benchmark;pomiar;wydajność;dysk;napęd;
Keywords[pt_BR]=benchmark;disco;
Keywords[ru]=производительность;диск;накопитель;
Keywords[sv]=prestandatest;hårddisk;
Keywords[tr]=benchmark;disk;
Keywords[zh_CN]=基准测试;磁盘;
Exec=kdiskmark
Terminal=false
StartupNotify=false
Type=Application
Categories=System;
Icon=/opt/$APP/icons/$APP" >> /usr/share/applications/AM-$APP.desktop

# ICON
mkdir /opt/$APP/icons
wget $ICONURL -O /opt/$APP/icons/$APP

# CHANGE THE PERMISSIONS
currentuser=$(who | awk '{print $1}')
chown -R $currentuser /opt/$APP

# MESSAGE
echo "

 $APPNAME is provided by https://github.com/$USER

"
