#!/usr/bin/env bash

##############################################################################################
# THIS MODULE INCLUDES ALL THE ACTIONS INTENDED TO MANAGE THE APPS INSTALLED FROM THE DATABASE
# OPTIONS: BACKUP/RESTORE, DOWNGRADE, LOCK/UNLOCK, NOLIBFUSE, REMOVE
##############################################################################################

SUDOCMD="$SUDOCOMMAND"

# BACKUP
function _backup() {
	if [ ! -f "$APPSPATH"/"$2"/remove ]; then
		printf "\n \"$2\" is not a valid argument or is not installed.\n\n"
	else
		read -p " Do you wish to backup the current version of $2? (y/N): " yn
		if ! echo "$yn" | grep -i '^y' >/dev/null 2>&1; then
			printf "\n OPERATION ABORTED!\n\n"
		else
			mkdir -p "$HOME/.am-snapshots/$2"
			date="$(date +%F-%X | sed 's/://g' | sed 's/-//g')"
			cp -r "$APPSPATH"/"$2" "$HOME/.am-snapshots/$2/$date"
			echo " SAVED in $HOME/.am-snapshots/$2"
		fi
	fi
}

# RESTORE
function _overwrite() {
	if [ ! -d "$HOME/.am-snapshots/$2" ]; then
		printf "\n ERROR: No snapshot for \"$2\" found.\n\n"
	elif [ ! -f "$APPSPATH"/"$arg"/remove ]; then
		printf "\n \"$2\" is not a valid argument or is not installed.\n\n"
	else
		read -p " Do you wish to overwrite $2 with an older version (y,N)?" yn
		if ! echo "$yn" | grep -i '^y' >/dev/null 2>&1; then
			printf "\n OPERATION ABORTED!\n\n"
		else
			printf "\n Please, select a snapshot or press CTRL+C to abort:\n\n"
			sleep 1
			select d in "$HOME/.am-snapshots/$2"/*; do 
				test -n "$d" && break 
				echo ">>> Invalid Selection" 
			done
			cp -r --backup=t "$d"/* "$APPSPATH"/"$2"/
			rm -R -f ./tmp "$APPSPATH"/"$2"/*~
			echo " RESTORE COMPLETED SUCCESSFULLY!"
		fi
	fi
}

# DOWNGRADE
function _downgrade() {
	# Safety checks
	if [ ! -f "$APPSPATH"/"$2"/AM-updater ]; then
		echo " No AM-updater available for \"$2\", cannot detect any URL!" 
		return 1
	elif [ -f "$APPSPATH"/"$2"/"$2"-rollback ]; then
		"$APPSPATH"/"$2"/"$2"-rollback || return 1
		return 0
	elif ! grep -q "api.github.com" "$APPSPATH"/"$2"/AM-updater; then
		echo " The option \"$1\" only works for https://github.com"
		return 1
	fi
	cd "$APPSPATH"/"$2" || return 1
	extension=$(sort ./version | tr '.' '\n' | tail -1)
	if grep -q "^REPO=" ./AM-updater; then
		REPO=$(grep -i "REPO=" ./AM-updater | grep -o -P '(?<=").*(?=")')
	elif grep -q "^SITE=" ./AM-updater; then
		REPO=$(grep -i "SITE=" ./AM-updater | grep -o -P '(?<=").*(?=")')
	fi
	entries_list=$( grep "^version=" ./AM-updater \
								| sed '1,${ 
									s/version=$(//g
									s/head -1)/head -100/g 
									s#$REPO#'"$REPO"'#g 
									s#releases/latest#releases#g
									s#releases #releases?per_page=100 #g 
									}' )
	urls="$(eval "$entries_list" | grep -i "$extension$" )"
	if ! echo "$urls" | grep -q "[0-9]"; then
		echo " ERROR: No valid links found, sorry!"
		exit 1
	fi
	echo "-----------------------------------------------------------------------"
	echo "You have chosen to roll back $2."
	echo "Rollback will be done from https://github.com/$REPO"
	echo "-----------------------------------------------------------------------"
	echo "Select a URL from this menu (read carefully) or press CTRL+C to abort:"
	echo "-----------------------------------------------------------------------" 
	sleep 1
	select d in $urls; do 
		test -n "$d" && break 
		echo ">>> Invalid Selection"
	done
	cp ./AM-updater ./AM-rollback
	sed -i 's/version0/#version0/g' ./AM-rollback
	[ -f ./"$2".zsync ] && mv ./"$2".zsync ./"$2".zsync.old
	if wget --version | head -1 | grep -q ' 1.'; then
		sed -i '/wget/c\wget -q --show-progress '"$d"'' ./AM-rollback
	else
		sed -i '/wget/c\wget '"$d"'' ./AM-rollback
	fi
	./AM-rollback && rm -f ./AM-rollback || return 1
	mv ./"$2".zsync.old ./"$2".zsync 2>/dev/null
	echo "$d" > ./version
	echo "ROLLBACK SUCCESSFUL!"
}

# LOCK/UNLOCK
function _lock() {
	if [ ! -f "$APPSPATH"/"$2"/AM-updater ]; then
		printf " \"$(echo "$AMCLI" | tr '[:lower:]' '[:upper:]')\"" 
		printf " cannot manage updates for $2, \"AM-updater\" file not found!\n"
		return 1
	fi
	read -r -p " Do you wish to keep $2 at its current version? (y/N):" yn
	if echo "$yn" | grep -i '^y' >/dev/null 2>&1; then
		mv "$APPSPATH"/"$2"/AM-updater "$APPSPATH"/"$2"/AM-LOCK 1>/dev/null
		echo " $2 has been locked at current version!"
	else
		echo " Operation aborted!"
		return 1
	fi
}

function _unlock() {
	if ! test -f "$APPSPATH"/"$2"/AM-LOCK; then
		echo " \"$2\" cannot be unlocked, \"AM-LOCK\" file not found!"
		return 1
	fi
	read -r -p " Do you wish to unlock updates for $2? (Y/n):" yn
	if echo "$yn" | grep -i '^n' >/dev/null 2>&1; then
		echo " $2 is still locked at current version!"
		return 1
	else
		mv "$APPSPATH"/"$2"/AM-LOCK "$APPSPATH"/"$2"/AM-updater 1>/dev/null
		echo " \"$2\" can now receive updates!"
	fi
}

# NO LIBFUSE
function _nolibfuse() {
	target="$(echo "${2}" | tr '[:lower:]' '[:upper:]')"
	# safety checks
	if ! cd "$APPSPATH"/"$2" 2>/dev/null; then
		echo " ⚠️ Error: \"$target\" is NOT installed." 
		return 1
	fi
	string="$(strings -d "./$2" 2>/dev/null)"
	if ! echo "$string" | grep -q -- 'run it with the --appimage-extract'; then
		echo " ⚠️ Error: $target is NOT an AppImage."
		return 1
	elif ! echo "$string" | grep -q -- 'AppImages require FUSE to run'; then
		echo " ◆ $target is already a new generation AppImage."
		return 1
	elif [ -f ./*.zsync ]; then
		echo "-----------------------------------------------------------------------"
		echo " Warning! Your AppImage uses \"zsync\" to update."
		echo " The .zsync file will be removed and will no longer work"
		echo " your \"AM-updater\" will likely still be able to update the AppImage"
		echo " by comparing the old vs new version url, but it is not guaranteed"
		read -p " Do you want to proceede anyway? (N/y): " yn
		if ! echo "$yn" | grep -i '^y' >/dev/null 2>&1; then
				return 1
		fi
	fi

	export ARCH="$(uname -m)"
	appimagetool="https://github.com/AppImage/appimagetool/releases/download/continuous/appimagetool-$ARCH.AppImage"
	printf " ...downloading appimagetool\r"
	wget -q "$appimagetool" -O ./appimagetool || return 1
	printf '#!/bin/sh\nexit 0' > ./desktop-file-validate # hack due to https://github.com/AppImage/appimagetool/pull/47
	chmod a+x ./appimagetool ./desktop-file-validate
	printf " ...extracting the AppImage\r"
	./"$2" --appimage-extract >/dev/null 2>&1 && chmod 0755 ./squashfs-root
	printf " ...trying to convert in new generation AppImage\r"
	PATH="$PATH:$PWD" ./appimagetool -n ./squashfs-root >/dev/null 2>&1
	if [ ! -f ./*.AppImage ]; then
		echo " 💀Error when trying to convert $target. Operation Aborted."
		rm -R -f ./appimagetool ./squashfs-root ./desktop-file-validate
		return 1
	fi

	mv ./"$2" ./"$2".old && mv ./*.AppImage ./"$2" || return 1
	echo " ◆ $target has been converted to a new generation AppImage."
	rm -rf ./appimagetool ./squashfs-root ./desktop-file-validate ./*.zsync
	if [ -f ./AM-updater ] && ! grep -q 'nolibfuse' ./AM-updater; then
		sed -i "s/^else/	echo y | $AMCLIPATH nolibfuse \"\$APP\"\n	notify-send \"\$APP has been converted too\!\"\nelse/g" ./AM-updater 2>/dev/null
		echo " The next update may replace this AppImage with a Type2 one"
		echo " so I added this command to the bottom of the \"AM-updater\" script!"
	fi
	echo " Contact the upstream developers to make them officially upgrade!"
	read -p " Do you wish to remove the old libfuse2 AppImage? (Y/n):" yn
	if echo "$yn" | grep -i '^y' >/dev/null 2>&1; then
			rm -f ./*.old
	fi
}

# REMOVE
function _remove() {
	$SUDOCMD echo "" >/dev/null
	echo "------------------------------------------------------------------------------"
	if [ ! -d "$APPSPATH"/"$2" ]; then
		echo -e " \"${RED}$arg\033[0m\" is not a valid \"APPNAME\", see \"$AMCLI -f\" for more."
		return 1
	fi
	read -p " ◆ Do you wish to remove \"$2\"? (Y/n):" yn
	if echo "$yn" | grep -i '^y' >/dev/null 2>&1; then
		$SUDOCMD "$APPSPATH"/"$2"/remove || return 1
		sleep 0.1
		echo -e " \"${Green}$2\033[0m\" has been removed!"
	else
		echo -e " \"${LightBlue}$2\033[0m\" has not been removed!"
	fi
}

function _hard_remove() {
	$SUDOCMD echo "" >/dev/null
	echo "------------------------------------------------------------------------------"
	if [ ! -d "$APPSPATH"/"$2" ]; then
		echo -e " \"${RED}$2\033[0m\" is not a valid \"APPNAME\", see \"$AMCLI -f\" for more."
		return 1
	fi
	$SUDOCMD "$APPSPATH"/"$arg"/remove || return 1
	sleep 0.1
	echo -e " \"${Green}$2\033[0m\" has been removed!"
}

###########################################################################
# OPTIONS AVAILABLE IN THIS MODULE
###########################################################################

# Main logic
[ -z "$2" ] && echo " USAGE: $AMCLI $1 [ARGUMENT]" && exit 1
case "$1" in
	'backup'|'-b')
		# Do a snapshot of an installed app
		ARGS="$(echo "$@" | cut -f2- -d ' ')"
		for arg in $ARGS; do
			_backup "${@}"
			shift
		done
		;;

	'downgrade'|'--rollback')
		# Downgrade the installed app to a previous version, from its online source
		_online_check
		ARGS="$(echo "$@" | cut -f2- -d ' ')"
		for arg in $ARGS; do
			_downgrade "${@}"
			_clean_amcachedir
			_list_updatable_apps
			shift
		done
		;;

	'lock')
		# Lock the version of an installed app
		ARGS="$(echo "$@" | cut -f2- -d ' ')"
		for arg in $ARGS; do
			_lock "${@}"
			shift
		done
		;;

	'unlock')
		# Unlock the version of an installed app
		ARGS="$(echo "$@" | cut -f2- -d ' ')"
		for arg in $ARGS; do
			_unlock "${@}"
			shift
		done
		;;

	'nolibfuse')
		# Convert old AppImages to a new standard and get rid of libfuse2 dependency
		_online_check
		ARGS="$(echo "$@" | cut -f2- -d ' ')"
		for arg in $ARGS; do
			_nolibfuse "${@}"
			_remove_info_files
			shift
		done
		;;

	'overwrite'|'-o')
		# Restore an app to a previous version using a snapshot (see "backup" or "-b", above)
		ARGS="$(echo "$@" | cut -f2- -d ' ')"
		for arg in $ARGS; do
			_overwrite "${@}"
			_remove_info_files
			shift
		done
		;;

	'remove'|'-r')
		# Remove apps
		ARGS="$(echo "$@" | cut -f2- -d ' ')"
		for arg in $ARGS; do
			_remove "${@}"
			_remove_info_files
			shift
		done
		echo "------------------------------------------------------------------------------"
		;;

	'-R')
		# Remove apps without confirmation
		ARGS="$(echo "$@" | cut -f2- -d ' ')"
		for arg in $ARGS; do
			_hard_remove "${@}"
			_remove_info_files
			shift
		done
		echo "------------------------------------------------------------------------------"
		;;
esac
