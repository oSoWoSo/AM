#!/usr/bin/env bash

##############################################################################################
# THIS MODULE INCLUDES ALL THE ACTIONS INTENDED TO MANAGE THE APPS INSTALLED FROM THE DATABASE
# OPTIONS: BACKUP/RESTORE, DOWNGRADE, LOCK/UNLOCK, NOLIBFUSE, REMOVE
##############################################################################################

SUDOCMD="$SUDOCOMMAND"

###########################################################################
# BACKUP/RESTORE
###########################################################################

function _backup() {
	ARGS="$(echo "$@" | cut -f2- -d ' ')"
	for arg in $ARGS; do
		if [ ! -f "$APPSPATH"/"$arg"/remove ]; then
			printf "\n \"$arg\" is not a valid argument or is not installed.\n\n"
		else
			read -p " Do you wish to backup the current version of $arg? (y/N): " yn
			if ! echo "$yn" | grep -i '^y' >/dev/null 2>&1; then
				printf "\n OPERATION ABORTED!\n\n"
			else
				mkdir -p "$HOME/.am-snapshots/$arg"
				date="$(date +%F-%X | sed 's/://g' | sed 's/-//g')"
				cp -r "$APPSPATH"/"$arg" "$HOME/.am-snapshots/$arg/$date"
				echo " SAVED in $HOME/.am-snapshots/$arg"
			fi
		fi
	done
}

function _overwrite() {
	ARGS="$(echo "$@" | cut -f2- -d ' ')"
	for arg in $ARGS; do
		if [ ! -d $HOME/.am-snapshots/$arg ]; then
			printf "\n ERROR: No snapshot for \"$arg\" found.\n\n"
		elif [ ! -f "$APPSPATH"/"$arg"/remove ]; then
			printf "\n \"$arg\" is not a valid argument or is not installed.\n\n"
		else
			read -p " Do you wish to overwrite this version of $arg with an old one (y,N)?" yn
			if ! echo "$yn" | grep -i '^y' >/dev/null 2>&1; then
				printf "\n OPERATION ABORTED!\n\n"
			else
				printf "\n Please, select a snapshot or press CTRL+C to abort:\n\n"
				sleep 1
				select d in $HOME/.am-snapshots/$arg/*; do 
					test -n "$d" && break 
					echo ">>> Invalid Selection" 
				done
				cp -r --backup=t "$d"/* "$APPSPATH"/"$arg"/
				rm -R -f ./tmp "$APPSPATH"/"$arg"/*~
				echo " RESTORE COMPLETED SUCCESSFULLY!"
			fi
		fi
		_remove_info_files
	done
}

###########################################################################
# DOWNGRADE
###########################################################################

function _downgrade() {
	if test -f "$APPSPATH"/"$2"/AM-updater; then
		if test -f "$APPSPATH"/"$2"/"$2"-rollback; then
			cd "$APPSPATH"/"$2" || return
			./"$2"-rollback
			exit
		elif grep -q "api.github.com" "$APPSPATH"/"$2"/AM-updater; then
			cd "$APPSPATH"/"$2" || return
			rm -f "$AMCACHEDIR/rollback-args";
			extension=$(sort ./version | tr '.' '\n' | tail -1)
			if grep -q "^REPO=" ./AM-updater; then
				REPO=$(grep -i "REPO=" ./AM-updater | grep -o -P '(?<=").*(?=")')
			elif grep -q "^SITE=" ./AM-updater; then
				REPO=$(grep -i "SITE=" ./AM-updater | grep -o -P '(?<=").*(?=")')
			fi
			entries_list=$(grep "^version=" ./AM-updater | sed '1,${ s/version=$(//g; s/head -1)/head -100/g; s#$REPO#'"$REPO"'#g; s#releases/latest#releases#g; s#releases #releases?per_page=100 #g; }')
			printf "%s\n" "$(eval "$entries_list")" | tr ' ' '\n' | grep -i "$extension$" >> "$AMCACHEDIR/rollback-args"
			if ! grep -q "[0-9]" "$AMCACHEDIR"/rollback-args; then
				echo " ERROR: No valid links found, sorry!"
				exit
			else
				echo "-----------------------------------------------------------------------"
				echo "You have chosen to roll back $2."
				echo "Rollback will be done from https://github.com/$REPO"
				echo "-----------------------------------------------------------------------"
				printf "Select a URL from this menu (read carefully) or press CTRL+C to abort:\n-----------------------------------------------------------------------\n"; sleep 1;
				select d in $(cat "$AMCACHEDIR/rollback-args"); do test -n "$d" && break; echo ">>> Invalid Selection"; done

				cp ./AM-updater ./AM-rollback
				sed -i 's/version0/#version0/g' ./AM-rollback

				if test -f ./"$2".zsync; then mv ./"$2".zsync ./"$2".zsync.old;	fi

				if wget --version | head -1 | grep -q ' 1.'; then
					sed -i '/wget/c\wget -q --show-progress '"$d"'' ./AM-rollback
				else
					sed -i '/wget/c\wget '"$d"'' ./AM-rollback
				fi
				./AM-rollback
				rm -f ./AM-rollback

				if test -f ./"$2".zsync.old; then mv ./"$2".zsync.old ./"$2".zsync; fi

				echo "$d" > ./version
				_clean_amcachedir
				_list_updatable_apps
				echo -e "\nROLLBACK SUCCESSFUL!"
				exit
			fi
		else
			echo " The option \"$1\" only works for https://github.com"; exit
		fi
	else
		echo " No AM-updater available for \"$2\", cannot detect any URL!"; exit
	fi
}

###########################################################################
# LOCK/UNLOCK
###########################################################################

function _lock_unlock() {
	case "$1" in
	'lock')
		if ! test -f "$APPSPATH"/"$2"/AM-updater; then
			echo -e "\n \"$(echo "$AMCLI" | tr '[:lower:]' '[:upper:]')\" cannot manage updates for $2, \"AM-updater\" file not found!\n"
			exit
		fi
		
		case $2 in
		*)
			read -r -p " Do you wish to keep $2  at the current version (y,N)?" yn
			case $yn in
			[Yy]* )
				mv "$APPSPATH"/"$2"/AM-updater "$APPSPATH"/"$2"/AM-LOCK 1>/dev/null
				echo " $2 has been locked at current version!"
				;;
			[Nn]*|* )
				echo " Operation aborted!"
				exit
				;;
			esac
			;;
		esac
		;;
	'unlock')
		if ! test -f "$APPSPATH"/"$2"/AM-LOCK; then
			echo " \"$2\" cannot be unlocked, \"AM-LOCK\" file not found!"; exit
		fi
		case $2 in
		*)
			read -r -p " Do you wish to unlock updates for $2 (Y,n)?" yn
			case $yn in
			[Nn]* )
				echo " $2 is still locked at current version!"
				exit
				;;
			[Yy]*|* )
				mv "$APPSPATH"/"$2"/AM-LOCK "$APPSPATH"/"$2"/AM-updater 1>/dev/null
				echo " \"$2\" can now receive updates!"
				exit
				;;
			esac
			;;
		esac
		;;
	esac
}

###########################################################################
# NOLIBFUSE
###########################################################################

function _nolibfuse_if_zsync_file_exists() {
	if test -f ./*.zsync; then
		echo "-----------------------------------------------------------------------"
		echo -e " Warning! Your AppImage uses \"zsync\" to update. The .zsync file will\n no longer work and will be removed.\n"
		echo -e " If your \"AM-updater\" script can compare versions, the update method\n will be changed, by downloading the new AppImage version in full,\n from the source.\n"
		read -r -p " Do you want to proceede anyway (N,y)?" yn
		case "$yn" in
		'y'|'Y') echo "-----------------------------------------------------------------------";;
		'n'|'N'|*) echo "-----------------------------------------------------------------------"; exit;;
		esac
	fi
}

function _nolibfuse_download_appimagetool() {
	wget -q "https://github.com/AppImage/appimagetool/releases/download/continuous/appimagetool-$arch.AppImage" -O appimagetool
	chmod a+x ./appimagetool
}

function _nolibfuse_command_to_convert_to_new_gen_appimages() {
	chmod 0755 ./squashfs-root
	export ARCH="$(uname -m)"
	PATH="$PATH:$PWD" ./appimagetool --comp zstd ./squashfs-root >/dev/null 2>&1
}

function _nolibfuse_if_appimage_has_been_converted() {
	rm -R -f ./appimagetool ./squashfs-root ./desktop-file-validate
	if test -f ./AM-updater; then
		if test -f ./*.zsync; then
			rm -f ./*.zsync
		fi
		if ! grep -q 'nolibfuse' ./AM-updater; then
			sed -i "s/^else/	echo y | $AMCLIPATH nolibfuse \"\$APP\"\n	notify-send \"\$APP has been converted too\!\"\nelse/g" ./AM-updater 2>/dev/null
			printf '\n%s\n' " The next update may replace this AppImage with a Type2 one"
			echo " so I added this command to the bottom of the \"AM-updater\" script!"
		fi
	fi
	echo -e "\n Contact the upstream developers to make them officially upgrade! \n"
	read -r -p " Do you wish to remove the old Type2 AppImage (Y,n)?" yn
	case $yn in
	[Nn]* )
		exit
		;;
	[Yy]*|* )
		rm -R -f ./*.old
		if test -f ./*.zsync; then
			rm -f ./*.zsync
		fi
		exit
		;;
	esac
}

function _fake_desktop-file-validate() {
	if ! command -v desktop-file-validate >/dev/null 2>&1; then
		printf '#!/bin/sh\nexit 0' > ./desktop-file-validate 
		chmod a+x ./desktop-file-validate
	fi
}

function _do_nolibfuse() {
	cd "$APPSPATH" || exit 1
	if test -f "./$2/$2" 2>/dev/null; then
		cd ./"$2" || return
		appimage_new_message=$(strings -d "./$2" 2>/dev/null | grep -F 'if you run it with the --appimage-extract option')
		appimage_old_message=$(strings -d "./$2" 2>/dev/null | grep -F 'AppImages require FUSE to run')
		if [ -z "$appimage_new_message" ]; then
			echo " ⚠️ Error: $(echo "${2}" | tr '[:lower:]' '[:upper:]') is NOT an AppImage."
			exit
		else
			if [ -z "$appimage_old_message" ]; then
				echo " ◆ $(echo "${2}" | tr '[:lower:]' '[:upper:]') is already a new generation AppImage."
				exit
			else
				_nolibfuse_if_zsync_file_exists
				_nolibfuse_download_appimagetool
				_fake_desktop-file-validate
				echo -ne " ...extracting the AppImage\r"
				./"$2" --appimage-extract 2> /dev/null | grep -v "squashfs-root"
				echo -ne " ...trying to convert in new generation AppImage\r"
				_nolibfuse_command_to_convert_to_new_gen_appimages
				if test -f ./*.AppImage; then
					_remove_info_files
					mv ./"$2" ./"$2".old
					mv ./*.AppImage ./"$2"
					echo " ◆ $(echo "$2" | tr '[:lower:]' '[:upper:]') has been converted to a new generation AppImage."
					_nolibfuse_if_appimage_has_been_converted
				else
					echo " 💀Errors while trying to export $(echo "$2" | tr '[:lower:]' '[:upper:]') from Type2 AppImage. Aborted."
					rm -R -f ./appimagetool ./squashfs-root ./desktop-file-validate; exit
				fi
			fi
		fi
	else
		echo " ⚠️ Error: \"$(echo "${2}" | tr '[:lower:]' '[:upper:]')\" is NOT installed."
		exit
	fi
}

###########################################################################
# REMOVE
###########################################################################

function _remove() {
	$SUDOCMD echo "" > /dev/null
	echo "------------------------------------------------------------------------------"
	case "$1" in
	'-R')
		if ls "$APPSPATH"/"$arg" > /dev/null 2>&1; then
			$SUDOCMD "$APPSPATH"/"$arg"/remove && sleep 0.5 && echo -e " \"${Green}$arg\033[0m\" has been removed!"
		else
			echo -e " \"${RED}$arg\033[0m\" is not a valid \"APPNAME\", see \"$AMCLI -f\" for more."
		fi
		;;
	'remove'|'-r')
		if ls "$APPSPATH"/"$arg" > /dev/null 2>&1; then
			case $arg in
			*) 
				read -r -p " ◆ Do you wish to remove \"$arg\" (Y,n)?" yn
				case $yn in
				[Nn]* ) 
					echo -e " \"${LightBlue}$arg\033[0m\" has not been removed!";;
				[Yy]*|* ) 
					$SUDOCMD "$APPSPATH"/"$arg"/remove && sleep 0.5 && echo -e " \"${Green}$arg\033[0m\" has been removed!";;
				esac
			esac
		else
			echo -e " \"${RED}$arg\033[0m\" is not a valid \"APPNAME\", see \"$AMCLI -f\" for more."
		fi
	esac
}

###########################################################################
# OPTIONS AVAILABLE IN THIS MODULE
###########################################################################

case $2 in
  '') echo " USAGE: $AMCLI $1 [ARGUMENT]"; exit;;
esac

case "$1" in
	'backup'|'-b')
		# Do a snapshot of an installed app
		_backup "${@}"
		shift
		;;

	'downgrade'|'--rollback')
		# Downgrade the installed app to a previous version, from the online source
		_online_check
		while [ -n "$1" ]; do
			_downgrade "${@}"
		done
		shift
		;;

	'lock'|'unlock')
		# Lock or unlock the version of an installed app
		_lock_unlock "${@}"
		;;

	'nolibfuse')
		# Convert old AppImages to a new standard and get rid of libfuse2 dependency
		_online_check
		while [ -n "$1" ]; do
			_do_nolibfuse "${@}"
		done
		shift
		;;

	'overwrite'|'-o')
		# Restore an app to a previous version using a snapshot (see "backup" or "-b", above)
		_overwrite "${@}"
		shift
		;;

	'remove'|'-r'|'-R')
		# Remove programs
		ARGS=$(echo "$@" | cut -f2- -d ' ')
		for arg in $ARGS; do
			_remove "$@"
			_remove_info_files
		done
		echo "------------------------------------------------------------------------------"
		;;
esac
