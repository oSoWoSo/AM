#!/usr/bin/env bash

case $2 in
'') echo " USAGE: $AMCLI $1 [ARGUMENT]"; exit;;
esac

while [ -n "$1" ]; do
	rm -f $AMPATH/.cache/template-args
	echo $@ | tr ' ' '\n' >> $AMPATH/.cache/template-args && echo STOP >> $AMPATH/.cache/template-args
	ARGS=$(tail -n +2 $AMPATH/.cache/template-args)

	for arg in $ARGS; do
		if [ $arg == STOP ]; then
			exit
		else
			case $arg in
			*) 
			for var in $arg; do
			cd $(xdg-user-dir DESKTOP)
			echo "##############################################################"; echo ""
			echo ' Create templates for "'$arg'"
			' | tr a-z A-Z
			echo "--------------------------------------------------------------"; echo "" 
			echo " EACH MODEL IS BASED ON A DIFFERENT METHOD OF BUILDING/UPDATING THE PROGRAM.
			"
			echo ' PLEASE, SELECT A TEMPLATE FOR "'$(echo $arg | tr a-z A-Z)'": 
			'
			echo '  0) APPIMAGE updatable with "appimageupdatetool"' | tr a-z A-Z
			echo '  1) APPIMAGE updatable using a separated zsync file' | tr a-z A-Z
			echo "  2) ANY ARCHIVE from github.com (always updatable)" | tr a-z A-Z
			echo "  3) ANY ARCHIVE from AUR (always updatable)" | tr a-z A-Z
			echo "  4) APPIMAGE, build your own with pkg2appimage and appimagetool" | tr a-z A-Z
			echo "  5) APPIMAGE, build your own with pkg2appimage using a custom AppRun" | tr a-z A-Z
			echo '  6) WEBAPP based on a Firefox profile (requires "firefox" in $PATH)' | tr a-z A-Z
			echo "  7) APPIMAGE from github.com (always updatable)" | tr a-z A-Z
			echo "  8) APPIMAGE from any website out there (for advanced users)" | tr a-z A-Z
			echo "  9) APPIMAGE from the AUR (always updatable)" | tr a-z A-Z
			echo "  10) ANY PROGRAM from any website (for advanced users)" | tr a-z A-Z
			echo " "
			read -r -p " WHAT KIND OF PROGRAM DO YOU WANT TO WRITE A SCRIPT FOR? : " response

			case "$response" in

    			# APPIMAGE UPDATABLE USING APPIMAGEUPDATETOOL
    			0)

				mkdir -p ./am-scripts ./am-scripts/$arch ./am-scripts/portable-linux-apps.github.io/apps &&
    				# DOWNLOAD THE TEMPLATE AND CONVERT THE ARGUMENT INTO A COMMAND
    				wget -c -q $AMREPO/templates/AM-SAMPLE-for-appimageupdate -O ./am-scripts/$arch/$arg &&
    				sed -i s/SAMPLE/$arg/g ./am-scripts/$arch/$arg &&
    				# IF YOU CAN, USE A ONE-LINE COMMAND TO DOWNLOAD THE APPIMAGE
    				read -r -ep " USE A ONE-LINE COMMAND TO DOWNLOAD THE LATEST APPIMAGE $(echo -e '\n :') " response

				case $response in
				*) 
					mv ./am-scripts/$arch/$arg ./am-scripts/$arch/$arg.old
					sed -n '1,17p' ./am-scripts/$arch/$arg.old >> ./am-scripts/$arch/$arg
					echo ''$response'' >> ./am-scripts/$arch/$arg
					sed -n '19,105p' ./am-scripts/$arch/$arg.old >> ./am-scripts/$arch/$arg
					rm -f ./am-scripts/$arch/$arg.old;;
				esac

				# ADD THE URL TO THE MAIN PAGE OF THE WEBSITE
				read -r -ep " ◆ ADD THE URL TO THE MAIN PAGE OF THE WEBSITE $(echo -e '\n : ')" RESPONSE

				case "$RESPONSE" in
				*) 
					sed -i s#REPLACETHIS#$RESPONSE#g ./am-scripts/$arch/$arg
				esac

				echo "-----------------------------------------------------------------------"
				# ADD A DESCRIPTION FOR THIS APPLICATION
				read -r -ep " ◆ ADD A BRIEF DESCRIPTION FOR THIS APPLICATION $(echo -e '\n : ')" COMMENT

				case "$COMMENT" in
				*) 
					# CREATE A WEBPAGE FOR https://portable-linux-apps.github.io CONTAINING ALL THE INFO ABOUT THIS APP
					echo "# $(echo $arg | tr a-z A-Z)" >> ./am-scripts/portable-linux-apps.github.io/apps/$arg.md
					echo -e "\n $COMMENT\n\n SITE: $RESPONSE\n\n | [Applications](https://portable-linux-apps.github.io/apps.html) | [Home](https://portable-linux-apps.github.io)\n | --- | --- |" >> ./am-scripts/portable-linux-apps.github.io/apps/$arg.md &&
					# CREATE A NEW LINE FOR THE APPLICATION'S LIST
					echo "◆ $arg : $COMMENT" >> ./am-scripts/list
				esac

				echo "-----------------------------------------------------------------------"
				# END OF THIS FUNCTION
				echo -e "\n All files are saved in $(xdg-user-dir DESKTOP)/am-scripts\n";;

			# APPIMAGE UPDATABLE USING ZSYNC
			1)

				mkdir -p ./am-scripts ./am-scripts/$arch ./am-scripts/portable-linux-apps.github.io/apps &&
    				# DOWNLOAD THE TEMPLATE AND CONVERT THE ARGUMENT INTO A COMMAND
    				wget -c -q $AMREPO/templates/AM-SAMPLE-for-zsync -O ./am-scripts/$arch/$arg &&
    				sed -i s/SAMPLE/$arg/g ./am-scripts/$arch/$arg &&
    				# IF YOU CAN, USE A ONE-LINE COMMAND TO DOWNLOAD THE APPIMAGE
    				read -r -ep " USE A ONE-LINE COMMAND TO CHECK ONLY THE URL TO THE APPIMAGE $(echo -e '\n THE DEFAULT PROGRAM ASSIGNED TO DOWNLOAD THIS LINK WILL BE "WGET"\n USE YOUR BEST SKILLS TO GET THE URL OF THE LATEST VERSION AVAILABLE\n :') " response

				case $response in
				*) 
					mv ./am-scripts/$arch/$arg ./am-scripts/$arch/$arg.old
					sed -n '1,3p' ./am-scripts/$arch/$arg.old >> ./am-scripts/$arch/$arg
					echo 'URL=$('$response')' >> ./am-scripts/$arch/$arg
					sed -n '5,36p' ./am-scripts/$arch/$arg.old >> ./am-scripts/$arch/$arg
					echo 'URL=$('$response')' >> ./am-scripts/$arch/$arg
					sed -n '38,118p' ./am-scripts/$arch/$arg.old >> ./am-scripts/$arch/$arg
					rm -f ./am-scripts/$arch/$arg.old;;
				esac

    				# ADD THE URL TO THE MAIN PAGE OF THE WEBSITE
				read -r -ep " ◆ ADD THE URL TO THE MAIN PAGE OF THE WEBSITE $(echo -e '\n : ')" RESPONSE

				case "$RESPONSE" in
				*) 
					sed -i s#REPLACETHIS#$RESPONSE#g ./am-scripts/$arch/$arg
				esac

				echo "-----------------------------------------------------------------------"
				# ADD A DESCRIPTION FOR THIS APPLICATION
				read -r -ep " ◆ ADD A BRIEF DESCRIPTION FOR THIS APPLICATION $(echo -e '\n : ')" COMMENT

				case "$COMMENT" in
				*) 
					# CREATE A WEBPAGE FOR https://portable-linux-apps.github.io CONTAINING ALL THE INFO ABOUT THIS APP
					echo "# $(echo $arg | tr a-z A-Z)" >> ./am-scripts/portable-linux-apps.github.io/apps/$arg.md
					echo -e "\n $COMMENT\n\n SITE: $RESPONSE\n\n | [Applications](https://portable-linux-apps.github.io/apps.html) | [Home](https://portable-linux-apps.github.io)\n | --- | --- |" >> ./am-scripts/portable-linux-apps.github.io/apps/$arg.md &&
					# CREATE A NEW LINE FOR THE APPLICATION'S LIST
					echo "◆ $arg : $COMMENT" >> ./am-scripts/list
				esac

				echo "-----------------------------------------------------------------------"
				# END OF THIS FUNCTION
				echo -e "\n All files are saved in $(xdg-user-dir DESKTOP)/am-scripts\n";;

			# DOWNLOAD ANY ARCHIVE FROM GITHUB
			2)

				mkdir -p ./am-scripts ./am-scripts/$arch ./am-scripts/portable-linux-apps.github.io/apps &&
    				# DOWNLOAD THE TEMPLATE AND CONVERT THE ARGUMENT INTO A COMMAND
    				wget -c -q $AMREPO/templates/AM-SAMPLE-GitHub-generic -O ./am-scripts/$arch/$arg &&
    				sed -i s/SAMPLE/$arg/g ./am-scripts/$arch/$arg &&
				echo "-----------------------------------------------------------------------"
				# ADD THE NAME OF THE GITHUB REPOSITORY, ALSO ADD SOME BASIC INFO IF AVAILABLE
				read -r -ep " ◆ ADD THE NAME OF THE REPOSITORY (EXAMPLE 'NAME/REPOSITORY') $(echo -e '\n https://github.com/')" GITHUBREPO

				case "$GITHUBREPO" in
				*) 
					sed -i s#REPLACETHIS#$GITHUBREPO#g ./am-scripts/$arch/$arg
					# GET THE DESCRIPTION OF THIS REPOSITORY TO ADD IN ALL CREATED FILES
					COMMENT=$(curl $HeaderAuthWithGITPAT https://api.github.com/repos/$GITHUBREPO 2>/dev/null | grep description | sed 's/"description": "//' | sed 's/",//' | cut -c 3-)
					# CREATE A WEBPAGE FOR https://portable-linux-apps.github.io CONTAINING ALL THE INFO ABOUT THIS APP
					echo "# $(echo $arg | tr a-z A-Z)" >> ./am-scripts/portable-linux-apps.github.io/apps/$arg.md
					echo -e "\n $COMMENT\n\n SITE: https://github.com/$GITHUBREPO\n\n | [Applications](https://portable-linux-apps.github.io/apps.html) | [Home](https://portable-linux-apps.github.io)\n | --- | --- |" >> ./am-scripts/portable-linux-apps.github.io/apps/$arg.md && 
					# CREATE A NEW LINE FOR THE APPLICATION'S LIST
					echo "◆ $arg : $COMMENT" >> ./am-scripts/list
				esac

				# ADD AN EXTENSION OR AN UNIQUE PART OF THE NAME OF THE ARCHIVE
				read -r -ep " ◆ ADD THE EXTENSION OR AN UNIQUE PART OF THE ARCHIVE'S NAME $(echo -e '\n EXAMPLE, "amd64.zip" OR "x64.tar" ): ')" EXTENSION

				case "$EXTENSION" in
				*) 
					sed -i s#FILENAMEEXTENSION#$EXTENSION#g ./am-scripts/$arch/$arg
				esac

				# CHECK THE DOWNLOAD LINK, THE ONE THAT POINTS TO THE LATEST RELEASE, NOTE THAT IT MAY BE A DEVELOPMENT VERSION, ADD "/latest" AFTER "/releases" TO POINT TO THE LAST STABLE VERSION
				read -p ' Do you wish to check the link to the latest version (Y,n)?' yn

				case $yn in
				'N'|'n');;
				'Y'|'y'|*) 
					echo ""; wget -q $HeaderAuthWithGITPAT https://api.github.com/repos/$GITHUBREPO/releases -O - | grep -w -v i386 | grep -w -v i686 | grep -w -v aarch64 | grep -w -v arm64 | grep -w -v armv7l | grep browser_download_url | grep -i "$EXTENSION" | cut -d '"' -f 4 | head -1
					echo -e "\n The URL above is an example of what both\n the install and update scripts will point to.\n";;
				esac

				read -p ' If correct, press "ENTER", otherwise press "N": ' yn

				case $yn in
				'N'|'n') 
					read -p ' Press 1 to add something or 2 to remove something: ' response
					case "$response" in
					1) 
						read -r -ep ' URL must contain ("x64", "x86_64"... or leave blank): ' response

						case "$response" in
						'') ;;
						*) 
							sed -i 's#browser_download_url#browser_download_url | grep -i '$response' #g' ./am-scripts/$arch/$arg
							read -p ' Do you wish to check the link for the last time (Y,n)?' yn

							case $yn in
							'N'|'n') ;;
							'Y'|'y'|*) 
						echo ""; wget -q $HeaderAuthWithGITPAT https://api.github.com/repos/$GITHUBREPO/releases -O - | grep -w -v i386 | grep -w -v i686 | grep -w -v aarch64 | grep -w -v arm64 | grep -w -v armv7l \
							| grep browser_download_url | grep -i "$response" | grep -i $EXTENSION | cut -d '"' -f 4 | head -1
						echo -e "\n The URL above is an example of what both\n the install and update scripts will point to.\n";;
							esac;;
						esac;;
					2) 
						read -r -ep ' URL must NOT contain ("txt", "ARM"... or leave blank): ' response

						case "$response" in
						'') ;;
						*) 
							sed -i 's#browser_download_url#browser_download_url | grep -w -v '$response' #g' ./am-scripts/$arch/$arg
							read -p ' Do you wish to check the link for the last time (Y,n)?' yn

							case $yn in
							'N'|'n') ;;
							'Y'|'y'|*) 
						echo ""; wget -q $HeaderAuthWithGITPAT https://api.github.com/repos/$GITHUBREPO/releases -O - | grep -w -v i386 | grep -w -v i686 | grep -w -v aarch64 | grep -w -v arm64 | grep -w -v armv7l \
							| grep browser_download_url | grep -w -v "$response" | grep -i $EXTENSION | cut -d '"' -f 4 | head -1
						echo -e "\n The URL above is an example of what both\n the install and update scripts will point to.\n";;
							esac;;
						esac;;
					esac;;
				'Y'|'y'|*) ;;
				esac

				echo "-----------------------------------------------------------------------"
				# IF YOU CAN, USE A ONE-LINE COMMAND TO EXTRACT THE ARCHIVE, CREATE ICONS AN MORE
    				echo -e "\n NOW, SUPPOSE YOU DOWNLOADED THE ARCHIVE TO './tmp', THEN RUN \n THE COMMAND 'cd ..'. WE WILL STILL NEED TO:\n\n  - extract the archive;\n  - transfer content into the directory we are in;\n  - include an icon and .desktop file in the same place (if needed).\n\n"
    				echo -e " WHAT ARE THE COMMANDS TO RUN BEFORE './tmp' IS REMOVED?\n" 
    				read -r -ep " IF YOU CAN, RESUME EVERYTHING IN ONE LINE COMMAND $(echo -e '\n :') " response

				case $response in
				*) 
					mv ./am-scripts/$arch/$arg ./am-scripts/$arch/$arg.old
					sed -n '1,22p' ./am-scripts/$arch/$arg.old >> ./am-scripts/$arch/$arg
					echo "$response" >> ./am-scripts/$arch/$arg
					sed -n '24,43p' ./am-scripts/$arch/$arg.old >> ./am-scripts/$arch/$arg
					echo "  $response" >> ./am-scripts/$arch/$arg
					sed -n '45,80p' ./am-scripts/$arch/$arg.old >> ./am-scripts/$arch/$arg
					rm -f ./am-scripts/$arch/$arg.old;;
				esac

				echo "-----------------------------------------------------------------------"
				# END OF THIS FUNCTION
				echo -e "\n All files are saved in $(xdg-user-dir DESKTOP)/am-scripts\n";;

			# DOWNLOAD ANY ARCHIVE FROM THE ARCH USER REPOSITORY
			3)

				mkdir -p ./am-scripts ./am-scripts/$arch ./am-scripts/portable-linux-apps.github.io/apps &&
				# DOWNLOAD THE TEMPLATE AND CONVERT THE ARGUMENT INTO A COMMAND, ALSO ADD SOME BASIC INFO IF AVAILABLE
				wget -c -q $AMREPO/templates/AM-SAMPLE-AUR-generic -O ./am-scripts/$arch/$arg &&
				sed -i s/SAMPLE/$arg/g ./am-scripts/$arch/$arg &&
				echo "-----------------------------------------------------------------------"
				read -r -ep " ◆ ADD THE REAL NAME OF THE PACKAGE BASE, ON AUR$(echo -e '\n : ')" AUR

				case "$AUR" in
				*) 
					sed -i s#AURREPO#$AUR#g ./am-scripts/$arch/$arg
				esac

				# ADD AN EXTENSION OR AN UNIQUE PART OF THE NAME OF THE ARCHIVE
				read -r -ep " ◆ ADD THE EXTENSION OR AN UNIQUE PART OF THE ARCHIVE'S NAME $(echo -e '\n EXAMPLE, "amd64", "x86_64", "tar.gz"... ): ')" EXTENSION

				case "$EXTENSION" in
				*) 
					sed -i s#FILENAMEEXTENSION#$EXTENSION#g ./am-scripts/$arch/$arg
				esac

				# ADD THE URL TO THE MAIN PAGE OF THE WEBSITE
				UPSTREAMURL=$(wget -q https://aur.archlinux.org/packages/$AUR -O - | grep -A3 "Upstream URL" | tail -1 | cut -c 30- | cut -f1 -d'"')
				sed -i s#REPLACETHIS#$UPSTREAMURL#g ./am-scripts/$arch/$arg
				# ADD A DESCRIPTION FOR THIS APPLICATION
				COMMENT=$(wget -q https://aur.archlinux.org/packages/$AUR -O - | grep -A1 Description | tail -1 | cut -c 30- | rev | cut -c 6- | rev) 
				# CREATE A WEBPAGE FOR https://portable-linux-apps.github.io CONTAINING ALL THE INFO ABOUT THIS APP
				echo "# $(echo $arg | tr a-z A-Z)" >> ./am-scripts/portable-linux-apps.github.io/apps/$arg.md
				echo -e "\n $COMMENT\n\n SITE: $UPSTREAMURL\n\n SOURCE: https://aur.archlinux.org/packages/$AUR\n\n | [Applications](https://portable-linux-apps.github.io/apps.html) | [Home](https://portable-linux-apps.github.io)\n | --- | --- |" >> ./am-scripts/portable-linux-apps.github.io/apps/$arg.md &&
				# CREATE A NEW LINE FOR THE APPLICATION'S LIST
				echo "◆ $arg : $COMMENT" >> ./am-scripts/list
				echo "-----------------------------------------------------------------------"
				echo " THIS IS A PREVIEW OF THE DOWNLOAD LINK:"
				echo "$(echo $(wget -q https://aur.archlinux.org/packages/$AUR -O - | grep -Eo "(http|https)://[a-zA-Z0-9./?=_%:-]*" | grep -i "$EXTENSION" | grep -w -v ".asc" | grep -w -v ".zsync" | grep -w -v "archlinux.org" | head -1))"
				echo "-----------------------------------------------------------------------"
				# IF YOU CAN, USE A ONE-LINE COMMAND TO EXTRACT THE ARCHIVE, CREATE ICONS AN MORE
    				echo -e "\n NOW, SUPPOSE YOU DOWNLOADED THE ARCHIVE TO './tmp', THEN RUN \n THE COMMAND 'cd ..'. WE WILL STILL NEED TO:\n\n  - extract the archive;\n  - transfer content into the directory we are in;\n  - include an icon and .desktop file in the same place (if needed).\n\n"
    				echo -e " WHAT ARE THE COMMANDS TO RUN BEFORE './tmp' IS REMOVED?\n" 
    				read -r -ep " IF YOU CAN, RESUME EVERYTHING IN ONE LINE COMMAND $(echo -e '\n :') " response

				case $response in
				*) 
					mv ./am-scripts/$arch/$arg ./am-scripts/$arch/$arg.old
					sed -n '1,22p' ./am-scripts/$arch/$arg.old >> ./am-scripts/$arch/$arg
					echo "$response" >> ./am-scripts/$arch/$arg
					sed -n '24,42p' ./am-scripts/$arch/$arg.old >> ./am-scripts/$arch/$arg
					echo "  $response" >> ./am-scripts/$arch/$arg
					sed -n '44,79p' ./am-scripts/$arch/$arg.old >> ./am-scripts/$arch/$arg
					rm -f ./am-scripts/$arch/$arg.old;;
				esac

				echo "-----------------------------------------------------------------------"
				# END OF THIS FUNCTION
				echo -e "\n All files are saved in $(xdg-user-dir DESKTOP)/am-scripts\n";;

			# CREATE AN APPIMAGE ON-THE-FLY USING DEFAULT TOOLS
			4)

				mkdir -p ./am-scripts ./am-scripts/$arch ./am-scripts/portable-linux-apps.github.io/apps &&
    				# DOWNLOAD THE TEMPLATE AND CONVERT THE ARGUMENT INTO A COMMAND
    				wget -c -q $AMREPO/templates/AM-SAMPLE-pkg2appimage -O ./am-scripts/$arch/$arg &&
    				sed -i s/SAMPLE/$arg/g ./am-scripts/$arch/$arg &&
				# CREATE A WEBPAGE FOR https://portable-linux-apps.github.io CONTAINING ALL THE INFO ABOUT THIS APP
				echo "# $(echo $arg | tr a-z A-Z)" >> ./am-scripts/portable-linux-apps.github.io/apps/$arg.md
				echo "\n $COMMENT\n\n SITE: \n\n | [Applications](https://portable-linux-apps.github.io/apps.html) | [Home](https://portable-linux-apps.github.io)\n | --- | --- |" >> ./am-scripts/portable-linux-apps.github.io/apps/$arg.md &&  
				# CREATE A NEW LINE FOR THE APPLICATION'S LIST
				echo '◆ '$arg' : '$COMMENT'' >> ./am-scripts/list
				# END OF THIS FUNCTION
				echo -e "\n All files are saved in $(xdg-user-dir DESKTOP)/am-scripts\n";;

			# CREATE AN APPIMAGE ON-THE-FLY USING CUSTOM OPTIONS
			5)

    				# DOWNLOAD THE TEMPLATE AND CONVERT THE ARGUMENT INTO A COMMAND
    				wget -c -q $AMREPO/templates/AM-SAMPLE-pkg2appimage-custom -O ./am-scripts/$arch/$arg &&
    				sed -i s/SAMPLE/$arg/g ./am-scripts/$arch/$arg &&
				# LIBUNIONPRELOAD
				read -p ' Do you wish to add libunionpreload (y,N)?' yn

				case $yn in
				'Y'|'y') 
					sed -i 's/#export LD_PRELOAD/export LD_PRELOAD/g' ./am-scripts/$arch/$arg
					sed -i 's/#chmod/chmod/g' ./am-scripts/$arch/$arg
					sed -i 's/#mv ./mv ./g' ./am-scripts/$arch/$arg
					sed -i 's/#wget/wget/g' ./am-scripts/$arch/$arg;;
				'N'|'n'|*) ;;
				esac

				# SYSTEM LIBRARIES
				read -p ' Do you wish to include system libraries (Y,n)?' yn

				case $yn in
				'N'|'n') 
					sed -i 's/##export LD_LIBRARY_PATH/export LD_LIBRARY_PATH/g' ./am-scripts/$arch/$arg;;
				'Y'|'y'|*) 
					sed -i 's/#export LD_LIBRARY_PATH/export LD_LIBRARY_PATH/g' ./am-scripts/$arch/$arg;;
				esac

				# BINARY PATH
				read -p ' Do you wish to specify the binary`s path manually (y,N)?' yn

				case $yn in 
				'Y'|'y') 
					read -r -ep " ◆ ADD THE PATH (EXAMPLE '/usr/lib.../$arg') $(echo -e '\n: ')" RESPONSE

					case "$RESPONSE" in
					*) 
						sed -i s/#exec/exec/g ./am-scripts/$arch/$arg
						sed -i s#CUSTOMPATH#$RESPONSE#g ./am-scripts/$arch/$arg
					esac;;
				'N'|'n'|*) 
					sed -i s/##exec/exec/g ./am-scripts/$arch/$arg;;
				esac

				# CREATE A WEBPAGE FOR https://portable-linux-apps.github.io CONTAINING ALL THE INFO ABOUT THIS APP
				echo "# $(echo $arg | tr a-z A-Z)" >> ./am-scripts/portable-linux-apps.github.io/apps/$arg.md
				echo -e "\n $COMMENT\n\n SITE: \n\n | [Applications](https://portable-linux-apps.github.io/apps.html) | [Home](https://portable-linux-apps.github.io)\n | --- | --- |" >> ./am-scripts/portable-linux-apps.github.io/apps/$arg.md &&  
				# CREATE A NEW LINE FOR THE APPLICATION'S LIST
				echo '◆ '$arg' : '$COMMENT'' >> ./am-scripts/list; echo ""
				# END OF THIS FUNCTION
				echo -e "\n All files are saved in $(xdg-user-dir DESKTOP)/am-scripts\n";;

			# CREATE A CUSTOM FIREFOX PROFILE ("firefox" MUST BE IN "$PATH" TO MADE IT WORK)
			6)

				mkdir -p ./am-scripts ./am-scripts/$arch ./am-scripts/portable-linux-apps.github.io/apps &&
    				# DOWNLOAD THE TEMPLATE AND CONVERT THE ARGUMENT INTO A COMMAND
    				wget -c -q $AMREPO/templates/AM-SAMPLE-Firefox-webapp -O ./am-scripts/$arch/ffwa-$arg &&
    				sed -i s/SAMPLE/$arg/g ./am-scripts/$arch/ffwa-$arg &&
				echo "-----------------------------------------------------------------------"
				read -r -ep " ◆ NAME OF THE APP: " RESPONSE

				case "$RESPONSE" in
				*) 
					sed -i s#GIVEMEANAME#$RESPONSE#g ./am-scripts/$arch/ffwa-$arg
					# CREATE A WEBPAGE FOR https://portable-linux-apps.github.io CONTAINING ALL THE INFO ABOUT THIS APP
					echo "# $(echo ffwa-$arg | tr a-z A-Z)" >> ./am-scripts/portable-linux-apps.github.io/apps/ffwa-$arg.md
					echo -e "\n WebApp & Firefox Profile for $RESPONSE.\n\n SITE: MYWEBSITE\n\n | [Applications](https://portable-linux-apps.github.io/apps.html) | [Home](https://portable-linux-apps.github.io)\n | --- | --- |" >> ./am-scripts/portable-linux-apps.github.io/apps/ffwa-$arg.md &&  
					# CREATE A NEW LINE FOR THE APPLICATION'S LIST
					echo "◆ ffwa-$arg : WebApp & Firefox Profile for $RESPONSE." >> ./am-scripts/list
				esac

				# PUT THE APP INTO A CATEGORY, THIS IS NEEDED FOR OUR CUSTOM DESKTOP FILE
				echo -e " LIST OF CATEGORIES:\n 0) AudioVideo\n 1) Audio\n 2) Video\n 3) Development\n 4) Education\n 5) Game\n 6) Graphics\n 7) Network\n 8) Office\n 9) Science\n 10) Settings\n 11) System\n 12) Utility (default)\n "
				read -r -p " CHOOSE A CATEGORY : " response

				case "$response" in
				0) 
					sed -i s/YOURCATEGORY/AudioVideo/g ./am-scripts/$arch/$arg;;
				1) 
					sed -i s/YOURCATEGORY/Audio/g ./am-scripts/$arch/$arg;; 
				2) 
					sed -i s/YOURCATEGORY/Video/g ./am-scripts/$arch/$arg;; 
				3) 
					sed -i s/YOURCATEGORY/Development/g ./am-scripts/$arch/$arg;;
				4) 
					sed -i s/YOURCATEGORY/Education/g ./am-scripts/$arch/$arg;; 
				5) 
					sed -i s/YOURCATEGORY/Game/g ./am-scripts/$arch/$arg;; 
				6) 
					sed -i s/YOURCATEGORY/Graphics/g ./am-scripts/$arch/$arg;; 
				7) 
					sed -i s/YOURCATEGORY/Network/g ./am-scripts/$arch/$arg;;
				8) 
					sed -i s/YOURCATEGORY/Office/g ./am-scripts/$arch/$arg;; 
				9) 
					sed -i s/YOURCATEGORY/Science/g ./am-scripts/$arch/$arg;; 
				10) 
					sed -i s/YOURCATEGORY/Settings/g ./am-scripts/$arch/$arg;; 
				11) 
					sed -i s/YOURCATEGORY/System/g ./am-scripts/$arch/$arg;;
				12|*) 
					sed -i s/YOURCATEGORY/Utility/g ./am-scripts/$arch/$arg;;
				esac

				echo "-----------------------------------------------------------------------"
				# ENTER THE URL OF THE SITE YOU WANT TO CREATE A CUSTOM FIREFOX PROFILE FOR
				read -r -ep " ◆ URL OF THE WEBAPP: " RESPONSE

				case "$RESPONSE" in
				*) 
					sed -i s#MYWEBSITE#$RESPONSE#g ./am-scripts/$arch/ffwa-$arg; sed -i s#MYWEBSITE#$RESPONSE#g ./am-scripts/portable-linux-apps.github.io/apps/ffwa-$arg.md;;
				esac 

				echo "-----------------------------------------------------------------------"
				# ENTER THE URL OF THE ICON THAT WILL APPEAR IN THE MENU
				read -r -ep " ◆ COPY/PASTE THE URL OF THE ICON HERE $(echo -e '\n URL: ')" RESPONSE

				case "$RESPONSE" in
				*) 
					sed -i s#YOURICONURL#$RESPONSE#g ./am-scripts/$arch/ffwa-$arg
				esac

				echo "-----------------------------------------------------------------------"
				# END OF THIS FUNCTION
				echo -e "\n All files are saved in $(xdg-user-dir DESKTOP)/am-scripts\n";;

			# DOWNLOAD THE APPIMAGE FROM GITHUB AND KEEP IT ALWAYS UPDATED (BEST WAY)
			7)

				mkdir -p ./am-scripts ./am-scripts/$arch ./am-scripts/portable-linux-apps.github.io/apps &&
				# DOWNLOAD THE TEMPLATE AND CONVERT THE ARGUMENT INTO A COMMAND, ALSO ADD SOME BASIC INFO IF AVAILABLE
				wget -c -q $AMREPO/templates/AM-SAMPLE-AppImage-from-GitHub -O ./am-scripts/$arch/$arg &&
				sed -i s/SAMPLE/$arg/g ./am-scripts/$arch/$arg &&
				echo "-----------------------------------------------------------------------"
				# ADD THE NAME OF THE GITHUB REPOSITORY
				read -r -ep " ◆ ADD THE NAME OF THE REPOSITORY (EXAMPLE 'NAME/REPOSITORY') $(echo -e '\n https://github.com/')" RESPONSE

				case "$RESPONSE" in
				*) 
					sed -i s#REPLACETHIS#$RESPONSE#g ./am-scripts/$arch/$arg
					# GET THE DESCRIPTION OF THIS REPOSITORY TO ADD IN ALL CREATED FILES
					COMMENT=$(curl $HeaderAuthWithGITPAT https://api.github.com/repos/$RESPONSE 2>/dev/null | grep description | sed 's/"description": "//' | sed 's/",//' | cut -c 3-)
					# CREATE A WEBPAGE FOR https://portable-linux-apps.github.io CONTAINING ALL THE INFO ABOUT THIS APP
					echo "# $(echo $arg | tr a-z A-Z)" >> ./am-scripts/portable-linux-apps.github.io/apps/$arg.md
					echo -e "\n $COMMENT\n\n SITE: https://github.com/$RESPONSE\n\n | [Applications](https://portable-linux-apps.github.io/apps.html) | [Home](https://portable-linux-apps.github.io)\n | --- | --- |" >> ./am-scripts/portable-linux-apps.github.io/apps/$arg.md &&
					# CREATE A NEW LINE FOR THE APPLICATION'S LIST
					echo "◆ $arg : $COMMENT" >> ./am-scripts/list
				esac

				echo "-----------------------------------------------------------------------"
				# CHECK THE DOWNLOAD LINK, THE ONE THAT POINTS TO THE LATEST RELEASE, NOTE THAT IT MAY BE A DEVELOPMENT VERSION, ADD "/latest" AFTER "/releases" TO POINT TO THE LAST STABLE VERSION
				read -p ' Do you wish to check the link to the latest version (Y,n)?' yn

				case $yn in
				'N'|'n') ;;
				'Y'|'y'|*) 
					echo ""; wget -q $HeaderAuthWithGITPAT https://api.github.com/repos/$RESPONSE/releases -O - | grep -w -v i386 | grep -w -v i686 | grep -w -v aarch64 | grep -w -v arm64 | grep -w -v armv7l | grep browser_download_url | grep -i appimage | cut -d '"' -f 4 | head -1
					echo -e "\n The URL above is an example of what both\n the install and update scripts will point to.\n";;
				esac

				read -p ' If correct, press "ENTER", otherwise press "N": ' yn

				case $yn in
				'N'|'n') 
					read -p ' Press 1 to add something or 2 to remove something: ' response

					case "$response" in
					1) 
						read -r -ep ' URL must contain ("x64", "x86_64"... or leave blank): ' response

						case "$response" in
						'') ;;
						*) 
							sed -i 's#browser_download_url#browser_download_url | grep -i '$response' #g' ./am-scripts/$arch/$arg
							read -p ' Do you wish to check the link for the last time (Y,n)?' yn

							case $yn in
							'N'|'n') ;;
							'Y'|'y'|*) 
						echo ""; wget -q $HeaderAuthWithGITPAT https://api.github.com/repos/$RESPONSE/releases -O - | grep -w -v i386 | grep -w -v i686 | grep -w -v aarch64 | grep -w -v arm64 | grep -w -v armv7l \
							| grep browser_download_url | grep -i "$response" | grep -i appimage | cut -d '"' -f 4 | head -1
						echo -e "\n The URL above is an example of what both\n the install and update scripts will point to.\n";;
							esac;;
						esac;;
					2) 
						read -r -ep ' URL must NOT contain ("txt", "ARM"... or leave blank): ' response

						case "$response" in
						'') ;;
						*) 
							sed -i 's#browser_download_url#browser_download_url | grep -w -v '$response' #g' ./am-scripts/$arch/$arg
							read -p ' Do you wish to check the link for the last time (Y,n)?' yn

							case $yn in
							'N'|'n') ;;
							'Y'|'y'|*) 
						echo ""; wget -q $HeaderAuthWithGITPAT https://api.github.com/repos/$RESPONSE/releases -O - | grep -w -v i386 | grep -w -v i686 | grep -w -v aarch64 | grep -w -v arm64 | grep -w -v armv7l \
							| grep browser_download_url | grep -w -v "$response" | grep -i appimage | cut -d '"' -f 4 | head -1
						echo -e "\n The URL above is an example of what both\n the install and update scripts will point to.\n";;
							esac;;
						esac;;
					esac;;
				'Y'|'y'|*) ;;
				esac

				echo "-----------------------------------------------------------------------"
				# END OF THIS FUNCTION
				echo -e "\n All files are saved in $(xdg-user-dir DESKTOP)/am-scripts\n";;

			# DOWNLOAD THE APPIMAGE FROM ANY WEBSITE
			8)

				mkdir -p ./am-scripts ./am-scripts/$arch ./am-scripts/portable-linux-apps.github.io/apps &&
				# DOWNLOAD THE TEMPLATE AND CONVERT THE ARGUMENT INTO A COMMAND, ALSO ADD SOME BASIC INFO IF AVAILABLE
				wget -c -q $AMREPO/templates/AM-SAMPLE-AppImage-from-Anywhere -O ./am-scripts/$arch/$arg &&
				sed -i s/SAMPLE/$arg/g ./am-scripts/$arch/$arg &&
				echo "-----------------------------------------------------------------------"
				# ADD THE URL TO THE MAIN PAGE OF THE WEBSITE
				read -r -ep " ◆ ADD THE URL TO THE MAIN PAGE OF THE WEBSITE $(echo -e '\n : ')" RESPONSE

				case "$RESPONSE" in
				*) 
					sed -i s#REPLACETHIS#$RESPONSE#g ./am-scripts/$arch/$arg
				esac

				echo "-----------------------------------------------------------------------"
				# ADD A DESCRIPTION FOR THIS APPLICATION
				read -r -ep " ◆ ADD A BRIEF DESCRIPTION FOR THIS APPLICATION $(echo -e '\n : ')" COMMENT

				case "$COMMENT" in
				*) 
					# CREATE A WEBPAGE FOR https://portable-linux-apps.github.io CONTAINING ALL THE INFO ABOUT THIS APP
					echo "# $(echo $arg | tr a-z A-Z)" >> ./am-scripts/portable-linux-apps.github.io/apps/$arg.md
					echo -e "\n $COMMENT\n\n SITE: $RESPONSE\n\n | [Applications](https://portable-linux-apps.github.io/apps.html) | [Home](https://portable-linux-apps.github.io)\n | --- | --- |" >> ./am-scripts/portable-linux-apps.github.io/apps/$arg.md &&
					# CREATE A NEW LINE FOR THE APPLICATION'S LIST
					echo "◆ $arg : $COMMENT" >> ./am-scripts/list
				esac

				echo "-----------------------------------------------------------------------"
				# IF YOU CAN, USE A ONE-LINE COMMAND TO DOWNLOAD THE APPIMAGE
    				read -r -ep " USE A ONE-LINE COMMAND TO CHECK ONLY THE URL TO THE APPIMAGE $(echo -e '\n THE DEFAULT PROGRAM ASSIGNED TO DOWNLOAD THIS LINK WILL BE "WGET"\n USE YOUR BEST SKILLS TO GET THE URL OF THE LATEST VERSION AVAILABLE\n :') " response

				case $response in
				*) 
					mv ./am-scripts/$arch/$arg ./am-scripts/$arch/$arg.old
					sed -n '1,18p' ./am-scripts/$arch/$arg.old >> ./am-scripts/$arch/$arg
					echo 'version=$('$response')' >> ./am-scripts/$arch/$arg
					sed -n '20,34p' ./am-scripts/$arch/$arg.old >> ./am-scripts/$arch/$arg
					echo 'version=$('$response')' >> ./am-scripts/$arch/$arg
					sed -n '36,118p' ./am-scripts/$arch/$arg.old >> ./am-scripts/$arch/$arg
					rm -f ./am-scripts/$arch/$arg.old;;
				esac

				echo "-----------------------------------------------------------------------"
				# END OF THIS FUNCTION
				echo -e "\n All files are saved in $(xdg-user-dir DESKTOP)/am-scripts\n";;

			# DOWNLOAD THE APPIMAGE FROM THE ARCH USER REPOSITORY
			9)

				mkdir -p ./am-scripts ./am-scripts/$arch ./am-scripts/portable-linux-apps.github.io/apps &&
				# DOWNLOAD THE TEMPLATE AND CONVERT THE ARGUMENT INTO A COMMAND, ALSO ADD SOME BASIC INFO IF AVAILABLE
				wget -c -q $AMREPO/templates/AM-SAMPLE-AppImage-from-AUR -O ./am-scripts/$arch/$arg &&
				sed -i s/SAMPLE/$arg/g ./am-scripts/$arch/$arg &&
				echo "-----------------------------------------------------------------------"
				read -r -ep " ◆ ADD THE REAL NAME OF THE PACKAGE BASE, ON AUR$(echo -e '\n : ')" AUR

				case "$AUR" in
				*) 
					sed -i s#AURREPO#$AUR#g ./am-scripts/$arch/$arg
				esac

				# ADD THE URL TO THE MAIN PAGE OF THE WEBSITE
				UPSTREAMURL=$(wget -q https://aur.archlinux.org/packages/$AUR -O - | grep -A3 "Upstream URL" | tail -1 | cut -c 30- | cut -f1 -d'"')
				sed -i s#REPLACETHIS#$UPSTREAMURL#g ./am-scripts/$arch/$arg
				# ADD A DESCRIPTION FOR THIS APPLICATION
				COMMENT=$(wget -q https://aur.archlinux.org/packages/$AUR -O - | grep -A1 Description | tail -1 | cut -c 30- | rev | cut -c 6- | rev) 
				# CREATE A WEBPAGE FOR https://portable-linux-apps.github.io CONTAINING ALL THE INFO ABOUT THIS APP
				echo "# $(echo $arg | tr a-z A-Z)" >> ./am-scripts/portable-linux-apps.github.io/apps/$arg.md
				echo -e "\n $COMMENT\n\n SITE: $UPSTREAMURL\n\n SOURCE: https://aur.archlinux.org/packages/$AUR\n\n | [Applications](https://portable-linux-apps.github.io/apps.html) | [Home](https://portable-linux-apps.github.io)\n | --- | --- |" >> ./am-scripts/portable-linux-apps.github.io/apps/$arg.md &&
				# CREATE A NEW LINE FOR THE APPLICATION'S LIST
				echo "◆ $arg : $COMMENT" >> ./am-scripts/list
				echo "-----------------------------------------------------------------------"
				echo " THIS IS A PREVIEW OF THE DOWNLOAD LINK:"
				echo "$(echo $(wget -q https://aur.archlinux.org/packages/$AUR -O - | grep -Eo "(http|https)://[a-zA-Z0-9./?=_%:-]*" | grep -i ".appimage" | grep -w -v ".asc" | grep -w -v ".zsync" | grep -w -v "archlinux.org" | head -1))"
				echo "-----------------------------------------------------------------------"
				# END OF THIS FUNCTION
				echo -e "\n All files are saved in $(xdg-user-dir DESKTOP)/am-scripts\n";;

			# DOWNLOAD ANY ARCHIVE FROM ANY WEBSITE
			10)

				mkdir -p ./am-scripts ./am-scripts/$arch ./am-scripts/portable-linux-apps.github.io/apps &&
				# DOWNLOAD THE TEMPLATE AND CONVERT THE ARGUMENT INTO A COMMAND, ALSO ADD SOME BASIC INFO IF AVAILABLE
				wget -c -q $AMREPO/templates/AM-SAMPLE-Anywhere-generic -O ./am-scripts/$arch/$arg &&
				sed -i s/SAMPLE/$arg/g ./am-scripts/$arch/$arg &&
				echo "-----------------------------------------------------------------------"
				# ADD THE URL TO THE MAIN PAGE OF THE WEBSITE
				read -r -ep " ◆ ADD THE URL TO THE MAIN PAGE OF THE WEBSITE $(echo -e '\n : ')" RESPONSE

				case "$RESPONSE" in
				*) 
					sed -i s#REPLACETHIS#$RESPONSE#g ./am-scripts/$arch/$arg
				esac

				echo "-----------------------------------------------------------------------"
				# ADD A DESCRIPTION FOR THIS APPLICATION
				read -r -ep " ◆ ADD A BRIEF DESCRIPTION FOR THIS APPLICATION $(echo -e '\n : ')" COMMENT

				case "$COMMENT" in
				*) 
					# CREATE A WEBPAGE FOR https://portable-linux-apps.github.io CONTAINING ALL THE INFO ABOUT THIS APP
					echo "# $(echo $arg | tr a-z A-Z)" >> ./am-scripts/portable-linux-apps.github.io/apps/$arg.md
					echo -e "\n $COMMENT\n\n SITE: $RESPONSE\n\n | [Applications](https://portable-linux-apps.github.io/apps.html) | [Home](https://portable-linux-apps.github.io)\n | --- | --- |" >> ./am-scripts/portable-linux-apps.github.io/apps/$arg.md &&
					# CREATE A NEW LINE FOR THE APPLICATION'S LIST
					echo "◆ $arg : $COMMENT" >> ./am-scripts/list
				esac

				echo "-----------------------------------------------------------------------"
				# IF YOU CAN, USE A ONE-LINE COMMAND TO CHECK THE DOWNLOAD LINK TO THE LAST RELEASE OR FROM THE DOWNLOAD PAGE OF THE WEBSITE
    				read -r -ep " USE A ONE-LINE COMMAND ONLY TO SHOW THE DOWNLOAD URL, NOTHING MORE. $(echo -e '\n THE DEFAULT PROGRAM ASSIGNED TO DOWNLOAD THIS LINK WILL BE "WGET"\n USE YOUR BEST SKILLS TO GET THE URL OF THE LATEST VERSION AVAILABLE\n :') " DOWNLOADURL

				case "$DOWNLOADURL" in
				*) 
					mv ./am-scripts/$arch/$arg ./am-scripts/$arch/$arg.old
					sed -n '1,18p' ./am-scripts/$arch/$arg.old >> ./am-scripts/$arch/$arg
					echo 'version=$('$DOWNLOADURL')' >> ./am-scripts/$arch/$arg
					sed -n '20,33p' ./am-scripts/$arch/$arg.old >> ./am-scripts/$arch/$arg
					echo 'version=$('$DOWNLOADURL')' >> ./am-scripts/$arch/$arg
					sed -n '35,80p' ./am-scripts/$arch/$arg.old >> ./am-scripts/$arch/$arg
					rm -f ./am-scripts/$arch/$arg.old;;
				esac 	 

				echo "-----------------------------------------------------------------------"
				# IF YOU CAN, USE A ONE-LINE COMMAND TO EXTRACT THE ARCHIVE, CREATE ICONS AN MORE
    				echo -e "\n NOW, SUPPOSE YOU DOWNLOADED THE ARCHIVE TO './tmp', THEN RUN \n THE COMMAND 'cd ..'. WE WILL STILL NEED TO:\n\n  - extract the archive;\n  - transfer content into the directory we are in;\n  - include an icon and .desktop file in the same place (if needed).\n\n"
    				echo -e " WHAT ARE THE COMMANDS TO RUN BEFORE './tmp' IS REMOVED?\n" 
    				read -r -ep " IF YOU CAN, RESUME EVERYTHING IN ONE LINE COMMAND $(echo -e '\n :') " response

				case $response in
				*) 
					mv ./am-scripts/$arch/$arg ./am-scripts/$arch/$arg.old
					sed -n '1,22p' ./am-scripts/$arch/$arg.old >> ./am-scripts/$arch/$arg
					echo "$response" >> ./am-scripts/$arch/$arg
					sed -n '24,42p' ./am-scripts/$arch/$arg.old >> ./am-scripts/$arch/$arg
					echo "  $response" >> ./am-scripts/$arch/$arg
					sed -n '44,80p' ./am-scripts/$arch/$arg.old >> ./am-scripts/$arch/$arg
					rm -f ./am-scripts/$arch/$arg.old;;
				esac

				echo "-----------------------------------------------------------------------"
				# END OF THIS FUNCTION
				echo -e "\n All files are saved in $(xdg-user-dir DESKTOP)/am-scripts\n";;

					*) 
				echo -e "\n No valid argument was chosen: process aborted! \n" | tr a-z A-Z; break;;
					esac
				done
			esac
		fi
	done
done

shift
