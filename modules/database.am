#!/bin/sh

############################################################################################
# THIS MODULE INCLUDES ALL THE ACTIONS INTENDED FOR THE MANAGEMENT OF LISTS AND SINGLE PAGES
############################################################################################

# FUNCTIONS RELATED TO "ABOUT"

_about_download_markdown() {
	disk_usage=""
	app_version=""
	markdown_url="$AMCATALOGUEMARKDOWNS/${1}.md"
	cache_dir="$AMCACHEDIR/about"
	app_status=" STATUS: NOT INSTALLED"
	package_name="$1"
	if curl -o /dev/null -sIf "$markdown_url"; then
		mkdir -p "$cache_dir" && wget -q "$markdown_url" -P "$cache_dir"
		sed -i '1,${ /^\s*#/ d; /^\s*!/ d; /\[Applications]/d; /\ --- /d; /\ | - | /d; /\!\[/d; }' "$cache_dir/$1.md"
		sed -i '$!N;s/^\s*\n\s*$//;P;D' "$cache_dir/$1.md"
		printf ' PACKAGE: %s\n' "$package_name" | tr '[:lower:]' '[:upper:]'
		if [ -f "$APPSPATH/$1/remove" ]; then
			disk_usage=$(du -sm "$APPSPATH/$1" | cut -f1)
			app_version=$(grep -w " ◆ $1	|" "$AMCACHEDIR"/version-args 2>/dev/null | sed 's:.*|	::')
			app_status=$(printf " STATUS: INSTALLED, ABOUT $disk_usage MB OF DISK SPACE IN USE\n VERSION: $app_version")
		fi
		printf '%s\n' "$app_status"
		cat -s "$cache_dir/$1.md"
		if [ -z "$cache_dir" ]; then
			exit 1
		fi
		rm -R -f "$cache_dir"
		
	else
		printf ' "%s" IS NOT A VALID ARGUMENT\n' "$package_name"
	fi
}

_about_generate_3rd_party() {
	disk_usage=""
	app_version=""
	app_status=" STATUS: NOT INSTALLED"
	package_name="$1"
	if grep -q "◆ $arg : " "$AMPATH/$arch-apps"; then
		printf ' PACKAGE: %s\n' "$arg" | tr '[:lower:]' '[:upper:]'
		if [ -f "$APPSPATH/$1/remove" ]; then
			disk_usage=$(du -sm "$APPSPATH/$1" | cut -f1)
			app_version=$(grep -w " ◆ $1	|" "$AMCACHEDIR"/version-args 2>/dev/null | sed 's:.*|	::')
			app_status=$(printf " STATUS: INSTALLED, ABOUT $disk_usage MB OF DISK SPACE IN USE\n VERSION: $app_version")
		fi
		printf '%s\n' "$app_status"
		grep "◆ $arg : " < "$AMPATH/$arch-apps" | cut -d':' -f2- | sed 's/^./\n /' | sed 's# SOURCE:#\n\n SOURCE:#g'
	else
		printf ' "%s" IS NOT A VALID ARGUMENT\n' "$package_name"
	fi
}

_about_download_lib() {
	printf "%s\n" " LIBRARY: $1" | tr '[:lower:]' '[:upper:]'
	if [ -f "$APPSPATH/$1/remove" ]; then 
		disk_usage=$(find /usr/local/lib -type f -name "$(echo "$1" | sed -e "s/[0-9]//")*" -exec du -sm {} + | tr '	' '\n' | head -1)
		printf "%s\n" " STATUS: INSTALLED, ABOUT $disk_usage MB OF DISK SPACE IN USE"
	else 
		printf "%s\n" " STATUS: NOT INSTALLED"
	fi
	echo ""
	grep "◆ $1 : " "$AMPATH/libs-list" | sed 's#.*:##' | sed 's/(/\n (/g'
	echo "" && echo " SITE/SOURCES:" && echo ""
	site_source=$(wget -qO- "$APPSDB/$1" | grep -Eo "(http|https)://[a-zA-Z0-9./?=_%:-]*" | head -1)
	echo " $site_source"
	echo ""
}

#--------------------------------------------------------------------------
# FUNCTIONS RELATED TO "LIST" AND "QUERY"

_clean_lists_and_queries() {
	# Remove references to URLs, "-a" elements in "-l" and "-q"
	sed -E 's#(http|https|ftp)://[^ ]*##g; s#(SITE|SOURCE):##g; s/$/\n/g' | fold -sw 75 | sed 's/^/   /g; s/  ◆ /◆ /g'
}

_list() {
	# Check the number of installed apps and libraries
	LIBNUMBER=$(grep "usr/local/lib" "$APPSPATH"/*/remove 2> /dev/null | wc -l)
	ITEMSNUMBER=$(cd "$APPSPATH" && find -name 'remove' -printf "%h\n" 2>/dev/null | sort -u | wc -l)
	if [ "$AMCLI" = am ]; then
		if test -f /opt/am/remove; then
			ITEMSNUMBER=$(("$ITEMSNUMBER"-1))
		fi
	fi
	APPSNUMBER=$(("$ITEMSNUMBER" - "$LIBNUMBER"))
	# Determine the number of available apps from the list
	AVAILABLE_APPS_NUMBER=$(grep -e "$" -c "$AMPATH/$arch-apps")
	# Generate a list of the installed apps with version
	if test -f "$AMCACHEDIR"/version-args; then
		INSTALLED=$(sort "$AMCACHEDIR"/version-args 2>/dev/null | sed 's/	|	/ /g' | grep -v "◆ am ")
		MESSAGE2="\n$INSTALLED\n"
	else
		_check_version
		INSTALLED=$(sort "$AMCACHEDIR"/version-args 2>/dev/null | sed 's/	|	/ /g' | grep -v "◆ am ")
		MESSAGE2="\n$INSTALLED\n"
	fi
	# Check if github.com is online, if not, the function will read the offline list
	wget -q --tries=10 --timeout=20 --spider https://github.com && _completion_lists
	# Check if among the installed apps are available libraries
	if [ "$LIBNUMBER" != 0 ]; then
		# Check if the installed libraries are more than one
		if [ "$LIBNUMBER" = 1 ]; then
			MESSAGE=" YOU HAVE INSTALLED $APPSNUMBER APPLICATIONS OUT OF $AVAILABLE_APPS_NUMBER AVAILABLE, AND $LIBNUMBER LIBRARY"
		else
			MESSAGE=" YOU HAVE INSTALLED $APPSNUMBER APPLICATIONS OUT OF $AVAILABLE_APPS_NUMBER AVAILABLE, AND $LIBNUMBER LIBRARIES"
		fi
	else
		MESSAGE=" YOU HAVE INSTALLED $APPSNUMBER APPLICATIONS OUT OF $AVAILABLE_APPS_NUMBER AVAILABLE"
	fi
}

_list_appimages() {
	# Determine the number of available apps
	if ! test -f "$AMCACHEDIR/$arch-appimages"; then
		_online_check && curl -Ls "$AMREPO/programs/$arch-appimages" > "$AMCACHEDIR/$arch-appimages"
	fi
	AVAILABLE_APPIMAGES_NUMBER=$(grep -e "$" -c "$AMCACHEDIR/$arch-appimages")
}

#--------------------------------------------------------------------------
# OPTIONS

case "$1" in
	'-a'|'about')
		_online_check
		if [ -z "$2" ]; then
			echo " USAGE: $AMCLI $1 [ARGUMENT]"; exit 1
		fi
		if ! test -f "$AMCACHEDIR"/version-args; then
			_check_version
		fi

		# Main logic
		if [ ! -f "$AMPATH/libs-list" ]; then
			wget -q "$LIBSLISTDB" -P "$AMPATH"
		fi
		ARGS="$(echo "$@" | cut -f2- -d ' ')"
		for arg in $ARGS; do
			if curl -o /dev/null -sIf "$AMCATALOGUEMARKDOWNS/${arg}.md" 1>/dev/null; then
				_about_download_markdown "$arg"
			elif grep -q "◆ $arg : " "$AMPATH/$arch-apps"; then
				_about_generate_3rd_party "$arg"
			elif grep -q "◆ $arg : " "$AMPATH/libs-list"; then
				_about_download_lib "$arg"
			else
				printf '%s is not a valid argument\n' " $arg" | tr '[:lower:]' '[:upper:]'
			fi
			printf "%s\n\n" "-----------------------------------------------------------------------"
		done
		;;

	'-l'|'list')
		_list
		if [ "$2" = --appimages ]; then
			if test -f "$AMCACHEDIR/$arch-appimages"; then
				_list_appimages
				LIST=$(sort "$AMCACHEDIR/$arch-appimages" | _clean_lists_and_queries)
				printf "\n$MESSAGE\n$MESSAGE2\n LIST OF THE $AVAILABLE_APPIMAGES_NUMBER APPIMAGES AVAILABLE IN THE 'AM' REPOSITORY:\n\n$LIST\n" | less -I
			fi
		else
			LIST=$(sort "$AMPATH/$arch-apps" | _clean_lists_and_queries)
			printf "\n$MESSAGE\n$MESSAGE2\n LIST OF THE $AVAILABLE_APPS_NUMBER APPLICATIONS AVAILABLE IN THE 'AM' REPOSITORY:\n\n$LIST\n" | less -I
		fi
		#printf "\n$MESSAGE\n$MESSAGE2\n"
		;;

	'-q'|'query')
		if [ -z "$2" ]; then
			echo " USAGE: $AMCLI $1 [ARGUMENT]"
			echo "        $AMCLI $1 --appimages [ARGUMENT]"
			echo "        $AMCLI $1 --pkg [ARGUMENT]"; exit 1
		fi
		wget -q --tries=10 --timeout=20 --spider https://github.com && _completion_lists
		if [ "$2" = --pkg ]; then
			ARGS=$(echo "$@" | cut -f3- -d ' ' | sed 's/ /, /g')
			printf "\n Search results for packages: $ARGS\n\n" | tr '[:lower:]' '[:upper:]'
			grep -i -E "$(echo "$@" | cut -f3- -d ' ' | tr -s ' ' '|')" "$AMPATH/$arch-apps" --color=always | _clean_lists_and_queries
			grep -i -E "$(echo "$@" | cut -f3- -d ' ' | tr -s ' ' '|')" "$AMPATH/libs-list" --color=always | _clean_lists_and_queries
			echo ""
			exit 0
		fi
		if [ "$2" = --appimages ]; then
			ARGS=$(echo "$@" | cut -f3- -d ' ')
			printf "\n Search results for \"$ARGS\":\n\n" | tr '[:lower:]' '[:upper:]'
			PATTERN="$(echo "$@" | cut -f3- -d ' ' | sed 's/ /(?=.*/g; s/$/)/g; s/(/)(/g; s/^/(?=.*/g;')"
			if ! test -f "$AMCACHEDIR/$arch-appimages"; then
				_online_check
				curl -Ls "$AMREPO/programs/$arch-appimages" > "$AMCACHEDIR/$arch-appimages"
			fi
			grep -P -i "$PATTERN" "$AMCACHEDIR/$arch-appimages" | _clean_lists_and_queries
		else
			ARGS=$(echo "$@" | cut -f2- -d ' ')
			printf "\n Search results for \"$ARGS\":\n\n" | tr '[:lower:]' '[:upper:]'
			PATTERN="$(echo "$@" | cut -f2- -d ' ' | sed 's/ /(?=.*/g; s/$/)/g; s/(/)(/g; s/^/(?=.*/g;')"
			grep -P -i "$PATTERN" "$AMPATH/$arch-apps" | _clean_lists_and_queries
			grep -P -i "$PATTERN" "$AMPATH/libs-list" | _clean_lists_and_queries
		fi
		echo ""
		exit 0
		;;
esac
