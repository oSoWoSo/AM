#!/bin/sh

############################################################################################
# THIS MODULE INCLUDES ALL THE ACTIONS INTENDED FOR THE MANAGEMENT OF LISTS AND SINGLE PAGES
############################################################################################

# Define functions
_pretty_list() {
	# Removes references to URLs, "-a" elements in "-l" and "-q"
	sed -E 's#(http|https|ftp)://[^ ]*##g; s#(SITE|SOURCE):##g; s/$/\n/g' | fold -sw 75 | sed 's/^/   /g; s/  ◆ /◆ /g'
}

_pretty_list_compat() {
	# Removes references to URLs, "-a" elements in "-l" and "-q"
	sed -E 's#(http|https|ftp)://[^ ]*##g; s#(SITE|SOURCE):##g' | fold -sw 75 | sed 's/^/   /g; s/  ◆ /◆ /g' && printf '\n'
}

_download_markdown() {
	disk_usage=""
	app_version=""
	markdown_url="$AMCATALOGUEMARKDOWNS/${1}.md"
	cache_dir="$AMCACHEDIR/about"
	app_status=" STATUS: NOT INSTALLED"
	package_name="$1"
	if curl -o /dev/null -sIf "$markdown_url"; then
		mkdir -p "$cache_dir" && wget -q "$markdown_url" -P "$cache_dir"
		sed -i '1,${ /^\s*#/ d; /^\s*!/ d; /\[Applications]/d; /\ --- /d; /\ | - | /d; /\!\[/d; }' "$cache_dir/$1.md"
		sed -i '$!N;s/^\s*\n\s*$//;P;D' "$cache_dir/$1.md"
		printf ' PACKAGE: %s\n' "$package_name" | tr '[:lower:]' '[:upper:]'
		if [ -f "$APPSPATH/$1/remove" ]; then
			disk_usage=$(du -sm "$APPSPATH/$1" | cut -f1)
			app_version=$(cat "$AMCACHEDIR"/version-args 2>/dev/null | grep -w " ◆ $1	|" | sed 's:.*|	::')
			app_status=$(printf " STATUS: INSTALLED, ABOUT $disk_usage MB OF DISK SPACE IN USE\n VERSION: $app_version")
		fi
		printf '%s\n' "$app_status"
		cat -s "$cache_dir/$1.md"
		[ -n "$cache_dir" ] && rm -R -f "$cache_dir"	
	else
		printf ' "%s" IS NOT A VALID ARGUMENT\n' "$package_name"
	fi
}

_generate_3rd_party() {
	disk_usage=""
	app_version=""
	app_status=" STATUS: NOT INSTALLED"
	package_name="$1"
	if grep -q "◆ $arg : " "$AMPATH/$arch-apps"; then
		printf ' PACKAGE: %s\n' "$arg" | tr '[:lower:]' '[:upper:]'
		if [ -f "$APPSPATH/$1/remove" ]; then
			disk_usage=$(du -sm "$APPSPATH/$1" | cut -f1)
			app_version=$(cat "$AMCACHEDIR"/version-args 2>/dev/null | grep -w " ◆ $1	|" | sed 's:.*|	::')
			app_status=$(printf " STATUS: INSTALLED, ABOUT $disk_usage MB OF DISK SPACE IN USE\n VERSION: $app_version")
		fi
		printf '%s\n' "$app_status"
		grep "◆ $arg : " < "$AMPATH/$arch-apps" | cut -d':' -f2- | sed 's/^./\n /' | sed 's# SOURCE:#\n\n SOURCE:#g'
	else
		printf ' "%s" IS NOT A VALID ARGUMENT\n' "$package_name"
	fi
}

_download_lib() {
	printf "%s\n" " LIBRARY: $1" | tr '[:lower:]' '[:upper:]'
	if [ -f "$APPSPATH/$1/remove" ]; then 
		disk_usage=$(find /usr/local/lib -type f -name "$(echo "$1" | sed -e "s/[0-9]//")*" -exec du -sm {} + | tr '	' '\n' | head -1)
		printf "%s\n" " STATUS: INSTALLED, ABOUT $disk_usage MB OF DISK SPACE IN USE"
	else 
		printf "%s\n" " STATUS: NOT INSTALLED"
	fi
	echo ""
	grep "◆ $1 : " "$AMPATH/libs-list" | sed 's#.*:##; s/(/\n (/g'
	printf '\n%s\n\n' " SITE/SOURCES:"
	site_source=$(wget -qO- "$APPSDB/$1" | grep -Eo "(http|https)://[a-zA-Z0-9./?=_%:-]*" | head -1)
	echo " $site_source"
	echo ""
}

_list() {
	LIBNUMBER=$(cat "$APPSPATH/*/remove" 2> /dev/null | grep "usr/local/lib" | wc -l)
	ITEMSNUMBER=$(cd "$APPSPATH" && find -name 'remove' -printf "%h\n" 2>/dev/null | sort -u | wc -l)
	if [ "$AMCLI" = am ]; then
		ITEMSNUMBER=$(("$ITEMSNUMBER"-1))
	fi
	APPSNUMBER=$(echo "$(("$ITEMSNUMBER" - "$LIBNUMBER"))")
	if test -f "$AMCACHEDIR"/version-args; then
		INSTALLED=$(sort "$AMCACHEDIR"/version-args 2>/dev/null | sed 's/	|	/ /g' | grep -v "◆ am ")
		MESSAGE2="\n$INSTALLED\n"
	else
		_check_version
		INSTALLED=$(sort "$AMCACHEDIR"/version-args 2>/dev/null | sed 's/	|	/ /g' | grep -v "◆ am ")
		MESSAGE2="\n$INSTALLED\n"
	fi

	_online_check && _completion_lists
	if cat "$APPSPATH/*/remove" 2> /dev/null | grep -q "usr/local/lib"; then
		if [ "$LIBNUMBER" = 1 ]; then
			MESSAGE=$(echo " YOU HAVE INSTALLED $APPSNUMBER APPLICATIONS OUT OF $(grep -e "$" -c $AMPATH/$arch-apps) AVAILABLE, AND $LIBNUMBER LIBRARY")
		else
			MESSAGE=$(echo " YOU HAVE INSTALLED $APPSNUMBER APPLICATIONS OUT OF $(grep -e "$" -c $AMPATH/$arch-apps) AVAILABLE, AND $LIBNUMBER LIBRARIES")
		fi
	else
		MESSAGE=$(echo " YOU HAVE INSTALLED $APPSNUMBER APPLICATIONS OUT OF $(grep -e "$" -c $AMPATH/$arch-apps) AVAILABLE")
	fi
}

_list_appimage() {
	if [ ! -f "$AMCACHEDIR/$arch-appimages" ]; then
		_online_check
		curl -Ls "$AMREPO/programs/$arch-appimages" > "$LIST"
	fi
}

# Main logic
case "$1" in
	'-a'|'about')
		[ -z "$2" ] && echo " USAGE: $AMCLI $1 [ARGUMENT]" && exit 1
		_online_check
		[ ! -f "$AMCACHEDIR"/version-args ] && _check_version
		[ ! -f "$AMPATH/libs-list" ] && wget -q "$LIBSLISTDB" -P "$AMPATH"
		ARGS="$(echo "$@" | cut -f2- -d ' ')" # Removes first argument
		for arg in $ARGS; do
			if curl -o /dev/null -sIf "$AMCATALOGUEMARKDOWNS/${arg}.md" 1>/dev/null; then
				_download_markdown "$arg"
			elif grep -q "◆ $arg : " "$AMPATH/$arch-apps"; then
				_generate_3rd_party
			elif grep -q "◆ $arg : " "$AMPATH/libs-list"; then
				_download_lib "$arg"
			else
				printf '%s is not a valid argument\n' " $arg" | tr '[:lower:]' '[:upper:]'
			fi
			printf "%s\n\n" "-----------------------------------------------------------------------"
		done
		;;

	'-l'|'list')
		_list
		printf "\n$MESSAGE\n$MESSAGE2\n LIST OF THE"
		if [ "$2" = --appimages ]; then
			LIST="$AMCACHEDIR/$arch-appimages"
			_list_appimage
			printf "$(grep -e "$" -c "$AMCACHEDIR/$arch-appimages")"
			printf "APPIMAGES AVAILABLE IN THE 'AM' REPOSITORY:\n\n"
		else
			LIST="$AMPATH/$arch-apps"
			printf "$(grep -e "$" -c "$AMPATH/$arch-apps")" 
			printf "APPLICATIONS AVAILABLE IN THE 'AM' REPOSITORY:\n\n"
		fi
		cat "$LIST" | _pretty_list | { less -I 2>/dev/null && clear; }
		;;

	'-q'|'query')
		[ -z "$2" ] && echo " USAGE: $AMCLI $1 [ARGUMENT]" && exit 1
		_online_check && _completion_lists
		if [ "$2" = --pkg ]; then
			ARGS="$(echo "$@" | cut -f3- -d ' ' | tr -s ' ' '|')"
			printf "\n Search results for packages: $ARGS\n\n" | tr '[:lower:]' '[:upper:]'
			grep -iE "$ARGS" "$AMPATH/$arch-apps" --color=always | _pretty_list_compat
			grep -iE "$ARGS" "$AMPATH/libs-list" --color=always | _pretty_list_compat
		elif [ "$2" = --appimages ]; then
			ARGS="$(echo "$@" | cut -f3- -d ' ')"
			printf "\n Search results for \"$ARGS\":\n\n" | tr '[:lower:]' '[:upper:]'
			PATTERN="$(echo "$ARGS" | sed 's/ /(?=.*/g; s/$/)/g; s/(/)(/g; s/^/(?=.*/g;')"
			if ! test -f "$AMCACHEDIR/$arch-appimages"; then
				_online_check
				curl -Ls "$AMREPO/programs/$arch-appimages" > "$AMCACHEDIR/$arch-appimages"
			fi
			grep -Pi "$PATTERN" "$AMCACHEDIR/$arch-appimages" | _pretty_list_compat
		else
			ARGS="$(echo "$@" | cut -f2- -d ' ')"
			printf "\n Search results for \"$ARGS\":\n\n" | tr '[:lower:]' '[:upper:]'
			PATTERN="$(echo "$ARGS" | sed 's/ /(?=.*/g; s/$/)/g; s/(/)(/g; s/^/(?=.*/g;')"
			grep -Pi "$PATTERN" "$AMPATH/$arch-apps" | _pretty_list_compat
			grep -Pi "$PATTERN" "$AMPATH/libs-list" | _pretty_list_compat
		fi
		;;
esac
