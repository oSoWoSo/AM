#!/usr/bin/env bash

#############################################################################
# THIS MODULE IS USED TO INSTALL APPS FROM THE DATABASE OR FROM LOCAL SCRIPTS
#############################################################################

BINDIR="${XDG_BIN_HOME:-$HOME/.local/bin}"
SUDOCMD="$SUDOCOMMAND"

# If you use the --latest option, add the "latest" flag to scripts that point to a very common "release"
_if_latest() {
	if grep -q 'force-latest' "$AMCACHEDIR"/install-args; then
		sed -i 's#/releases#/releases/latest#g' ./"$arg"
	fi
}

_spooky_check() {
	if grep -i spooky ./"$arg" >/dev/null 2>&1; then
		echo " WARNING: \"$arg\" does not have a transparent build process" 
		echo " We can't be sure as to what is inside the application"
		echo " We highly recommend that you sandbox this application"
		read -p " Do you wish to continue? (N/y): " yn
		if ! echo "$yn" | grep -i '^y' >/dev/null 2>&1; then
			printf "\n INSTALLATION ABORTED!\n"
			return 1
		fi
	fi
}

# Patch to apply to installation scripts
_apply_patches() {
	if [ "$AMCLI" = "appman" ]; then
		# Patches /usr/local for $HOME equivalent for AppMan
		sed -i -e "s#/usr/local/bin#\"$BINDIR\"#g" \
			-e "s#/usr/local/share#\"$DATADIR\"#g" \
			-e "s#/opt/#\"$APPSPATH\"/#g" ./"$arg"
	else
		"$SUDOCMD" mkdir -p /usr/local/{share/applications,bin}
	fi
	if ! grep -q -- "--debug" "$AMCACHEDIR"/install-args && wget --version | head -1 | grep -q ' 1.'; then
		# Patch "wget" (version 1.x) to have a progress bar and fix errors when applying patches
		sed -i "s#wget #wget -q --no-verbose --show-progress --progress=bar #g" ./"$arg"
	fi
	sed -i "s# https://api.github.com#$HeaderA	uthWithGITPAT https://api.github.com#g" ./"$arg"
	sed -i 's#DirIcon$#DirIcon  2>/dev/null#g' ./"$arg"
	sed -i 's#DirIcon ./icons/"$APP" 1#DirIcon ./icons/"$APP" 2#g' ./"$arg"
}

_am_remover_check() {
	# Put permission check in remove script and change ownership of directory
	if [ "$AMCLI" = am ]; then
		$SUDOCMD sed -i '1 a [ "$(id -u)" -ne 0 ] && echo "Permission denied" && exit 1' \
			"${LASTDIRPATH}"/remove 2>/dev/null
		$SUDOCMD chown -R $USER ${LASTDIRPATH} 2>/dev/null
	fi

}

# Post-installation processes
_post_installation_processes() {
	LASTDIR=$(ls -td "$APPSPATH"/* | head -1 | sed 's:.*/::')
	LASTDIRPATH="${APPSPATH}/${LASTDIR}"
	_am_remover_check
	# Check for AM-updater script sothat CLI can manage updates
	[ -f "${LASTDIRPATH}"/AM-updater ] && mkdir "${LASTDIRPATH}"/.am-installer 2>/dev/null \
		&& wget -q "$APPSDB"/"$arg" -O "${LASTDIRPATH}"/.am-installer/"$arg"
	find "${LASTDIRPATH}"/icons/* -xtype l -delete 2>/dev/null # Removes broken links
	# If you have a broken or missing icon in your "icons" directory, download one from the catalog
	[ -z "$(ls -A "${LASTDIRPATH}"/icons 2>/dev/null)" ] \
		&& wget -q "$AMCATALOGUEICONS"/"$arg".png -O "${LASTDIRPATH}"/icons/"$arg" 2>/dev/null
	# Patch .desktop to change paths if the app is installed locally
	if [ "$AMCLI" = "appman" ]; then
		# Likely not needed anymore: "s#Icon=/opt#Icon=$HOME/$APPSDIR#g"
		sed -i -e "s#Exec=$arg#Exec=$BINDIR/$arg#g" \
			-e 's#Exec=$APP#Exec='"$BINDIR"'/$APP#g' \
			-e "s#Exec=/usr/bin/#Exec=$BINDIR/#g" \
			-e "s#Exec=/opt/#Exec=$BINDIR/#g" "$DATADIR"/applications/*-AM.desktop 2>/dev/null
	fi
}

# End of the installation process
_ending_the_installation() {
	unset "$LASTDIR" # Is this needed?
	LASTDIR=$(ls -td "$APPSPATH"/* | head -1 | sed 's:.*/::')
	if [ -f "${LASTDIRPATH}"/remove ]; then
		if test -d "${LASTDIRPATH}"/tmp; then
			echo " 💀 ERROR DURING INSTALLATION, REMOVED $APPNAME!"
			$AMCLIPATH -R "$LASTDIR" 1>/dev/null
		elif test -f "$APPSPATH/$LASTDIR/version" && [ -z "$(cat "$APPSPATH/$LASTDIR/version")" ]; then
			echo " 💀 ERROR DURING INSTALLATION, REMOVED $APPNAME!"
			$AMCLIPATH -R "$LASTDIR" 1> /dev/null
		else
			chown -R $USER "$AMCACHEDIR"/about 2>/dev/null
			for metapackage in $METAPACKAGES; do
				if grep -q "$metapackage" ./"$arg" 2> /dev/null; then
					metascript="$LASTDIR"
				fi
			done
			APPSIZE=$(du -sm "${LASTDIRPATH}" | awk '{print $1}' )
			if [ -n "$metascript" ]; then
				METASCRIPT_NAME=$(echo "\"$metascript\"" | tr '[:lower:]' '[:upper:]')
				echo -ne " $METASCRIPT_NAME INSTALLED ($APPSIZE MB OF DISK SPACE)\n"
				unset metascript
			else
				echo -ne " $APPNAME INSTALLED ($APPSIZE MB OF DISK SPACE)\n"
			fi
			$SUDOCMD rm "$AMCACHEDIR"/"$arg"
			_check_version
			app_version=$(grep -w " ◆ $LASTDIR	|" 0<"$AMCACHEDIR"/version-args | sed 's:.*|	::')
			echo " ◆ $LASTDIR $app_version" >> "$AMCACHEDIR"/installed
		fi
	else
		echo " INSTALLATION ABORTED!"
	fi
}

# Check if the installation script contain a keyword related to a missing dependence
_dependency_check_utils() {
	app_deps="ar gcc glib-compile-schemas make tar unzip"
	for name in $app_deps; do
		if grep "^$name" ./"$arg" 1>/dev/null && ! command -v "$name" >/dev/null 2>&1; then
			[ "$name" = "ar" ] && name="binutils"
			echo " 💀 ERROR: cannot install \"$arg\" without \"$name\"" 
			return 1
		fi
	done
}

# Check if the installation script is a metapackage (example one of the 40+ kdegames scripts)
_metapackage_check() {
for metapackage in $METAPACKAGES; do
	if grep -q "$metapackage" ./"$arg" 2> /dev/null; then
		if [ -d "$APPSPATH"/"$metapackage"/tmp ]; then
			$SUDOCMD "$APPSPATH"/"$metapackage"/remove 2> /dev/null
		elif [ -d "$APPSPATH"/"$metapackage" ]; then
			METAPACKAGE_NAME=$(echo "$metapackage" | tr '[:lower:]' '[:upper:]')
			echo " ◆ \"$APPNAME\" IS PART OF \"$METAPACKAGE_NAME\", ALREADY INSTALLED" 
			return 1
		fi
	fi
done	
}


######################
# INSTALLATION PROCESS
######################

# This function is needed to parse the installation script and then execute it
_install_arg() {
	APPNAME=$(echo "\"$arg\"" | tr '[:lower:]' '[:upper:]')
	chmod a+x ./"$arg"
	_metapackage_check || return 1
	_dependency_check_utils || return 1
	if grep -q 'ffwa-' ./"$arg"; then
		ffbrowser=$(find ${PATH//:/ } -maxdepth 1 -name "firefox*" | sort | head -1)
		if [ -z "$ffbrowser" ]; then
			echo " 💀 ERROR: you cannot install \"$arg\" without installing \"firefox\""; return 0
		else
			sed -i 's#firefox --class#'"$(echo "$ffbrowser" | xargs -L 1 basename)"' --class#g' ./"$arg"
		fi
	elif grep -qi "^wget.*.sh.*chmod.*&&" ./"$arg"; then
		appimage_bulder_script=$(grep "^wget " ./"$arg" | tr '"' '\n' | grep -i "^http" | sed 's/$APP/'"$arg"'/g')
		if curl --output /dev/null --silent --head --fail "$appimage_bulder_script" 1> /dev/null; then
			for name in $app_deps; do
				if curl -Ls "$appimage_bulder_script" | grep "^$name" 1>/dev/null; then
					if ! command -v "$name" >/dev/null 2>&1; then
						[ "$name" = "ar" ] && name="binutils"
						echo " 💀 ERROR: cannot install \"$arg\" without \"$name\""
						return 0
					fi
				fi
			done
			if curl -Ls "$appimage_bulder_script" | grep -ie "appimagetool\|pkg2appimage" 1>/dev/null; then
				if ! command -v convert >/dev/null 2>&1; then
					echo " 💀 ERROR: cannot create \"$arg\" without \"convert\" (from \"imagemagick\")" 
					return 0
				fi
			fi
		else
			echo " 💀 ERROR: cannot create \"$arg\", the builder does not exists" 
			return 0
		fi
	fi
	# Check if you are installing an app or a library
	echo "◆ $APPNAME: starting installation script"
	if grep -qi "^wget.*.sh.*chmod.*&&" ./"$arg"; then
		printf "\n This script will create an AppImage on the fly, please wait...\n"
	elif grep -q "/usr/local/lib" ./"$arg"; then
		printf "\n ⚠️ This script will install a system library in /usr/local/lib\n\n"
		read -p " Do you wish to continue? (N/y): " yn
		if ! echo "$yn" | grep -i '^y' >/dev/null 2>&1; then
			printf "\n INSTALLATION ABORTED!\n"
			return 0
		fi
	fi
	_spooky_check || return 1
	_if_latest
	_apply_patches
	echo ""
	# Install script
	$SUDOCMD ./"$arg"
	echo ""
	_post_installation_processes
	_ending_the_installation
}

####################
# INSTALLATION CASES
####################

# This function is for local installation scripts
_install_local_script() {
	path2arg="$arg"
	arg=$(echo "$path2arg" | sed 's:.*/::')
	mkdir -p "$AMCACHEDIR"/tmp && rm -f "$AMCACHEDIR"/tmp/* \
		&& cp "$path2arg" "$AMCACHEDIR"/tmp/"$arg" && cd "$AMCACHEDIR" \
		&& mv ./tmp/"$arg" ./"$arg" && rmdir ./tmp || return
	if ! test -d "$APPSPATH"/"$arg"; then
		_install_arg
	else
		echo " ◆ \"$arg\" is already installed!" | tr '[:lower:]' '[:upper:]'
	fi
}

# This is for scripts hosted on the official online database or a third-party one
_install_normally() {
	mkdir -p "$AMCACHEDIR"/tmp && rm -f "$AMCACHEDIR"/tmp/* &&
	wget -q "$APPSDB"/"$arg" -O "$AMCACHEDIR"/tmp/"$arg" &&
	cd "$AMCACHEDIR" && mkdir -p tmp && cd tmp || return
	cd "$AMCACHEDIR" && mv ./tmp/"$arg" ./"$arg" && rmdir ./tmp || return
	_install_arg
}

# This function is entirely dedicated to third-party databases
_install_from_third_party_repo() {
	rm -R -f "$AMCACHEDIR/multirepo-args"
	MULTIREPO=$(grep "Source=" "$AMPATH/neodb" | sed 's/Source=//g')
	for anyrepo in $MULTIREPO; do
		if curl --output /dev/null --silent --head --fail "$anyrepo"/"$arg"  1> /dev/null; then
			echo "$anyrepo" >> "$AMCACHEDIR/multirepo-args"
		fi
	done
	if test -f "$AMCACHEDIR/multirepo-args"; then
		anyrepoargs=$(sort "$AMCACHEDIR/multirepo-args" 2> /dev/null | wc -l)
		if [ "$anyrepoargs" -gt 0 ]; then
			if curl --output /dev/null --silent --head --fail "$APPSDB"/"$arg"  1> /dev/null; then
				echo "$APPSDB" >> "$AMCACHEDIR/multirepo-args"
			fi
			anyrepoargall=$(sort "$AMCACHEDIR/multirepo-args" 2> /dev/null | wc -l)
			if [ "$anyrepoargall" = 1 ]; then
				mkdir -p "$AMCACHEDIR"/tmp && rm -f "$AMCACHEDIR"/tmp/* &&
				wget -q "$(head -1 "$AMCACHEDIR/multirepo-args")/$arg" -O "$AMCACHEDIR"/tmp/"$arg" &&
				cd "$AMCACHEDIR" && mv ./tmp/"$arg" ./"$arg" && rmdir ./tmp || return
				rm -R -f "$AMCACHEDIR/multirepo-args"
				_install_arg
			else
				printf '\n%s\n' " ◆ FOUND $APPNAME FROM MULTIPLE SOURCES:"
				printf '%s\n\n' " Select a URL from this menu (read carefully) or press CTRL+C to abort:" 
				sleep 1
				select d in $(cat "$AMCACHEDIR/multirepo-args"); do 
					test -n "$d" && break
					echo ">>> Invalid Selection" 
				done
				mkdir -p "$AMCACHEDIR"/tmp && rm -f "$AMCACHEDIR"/tmp/* &&
				wget -q "$d/$arg" -O "$AMCACHEDIR"/tmp/"$arg" &&
				cd "$AMCACHEDIR" && mv ./tmp/"$arg" ./"$arg" && rmdir ./tmp || return
				rm -R -f "$AMCACHEDIR/multirepo-args"
				_install_arg
			fi
		elif curl --output /dev/null --silent --head --fail "$APPSDB"/"$arg" 1>/dev/null; then
			mkdir -p "$AMCACHEDIR"/tmp && rm -f "$AMCACHEDIR"/tmp/* &&
			wget -q "$APPSDB"/"$arg" -O "$AMCACHEDIR"/tmp/"$arg" &&
			cd "$AMCACHEDIR" && mv ./tmp/"$arg" ./"$arg" && rmdir ./tmp || return
			rm -R -f "$AMCACHEDIR/multirepo-args"
			_install_arg
		else
			echo " 💀 ERROR: \"$arg\" does NOT exist in the database, see \"$AMCLI -l\""
		fi
	elif curl --output /dev/null --silent --head --fail "$APPSDB"/"$arg" 1>/dev/null; then
		_install_normally
	else
		echo " 💀 ERROR: \"$arg\" does NOT exist in the database, see \"$AMCLI -l\""
	fi
}

##################################
# OPTIONS AVAILABLE IN THIS MODULE
##################################

while [ -n "$1" ]; do
	case "$1" in
	'-i'|'install')
		case $2 in
		'--debug'|'--force-latest')
			[ -z "$3" ] && echo " USAGE: $AMCLI $1 $2 [ARGUMENT]" && exit 1
			;;
		'')
			echo " USAGE: $AMCLI $1 [ARGUMENT]"
			echo " USAGE: $AMCLI $1 --debug [ARGUMENT]"
			echo " USAGE: $AMCLI $1 --force-latest [ARGUMENT]"
			exit 1
			;;
		esac
		[ "$AMCLI" = "am" ] && { $SUDOCMD echo -ne "\r" || exit 1; }

		echo "############################################################################"
		echo "##                                                                        ##"
		echo "##                  START OF ALL INSTALLATION PROCESSES                   ##"
		echo "##                                                                        ##"
		echo "############################################################################"
		_clean_amcachedir 2>/dev/null
		echo "$@" | tr ' ' '\n' >> "$AMCACHEDIR"/install-args
		ARGS=$(tail -n +2 "$AMCACHEDIR"/install-args | grep -v -- "--")
		METAPACKAGES="kdegames kdeutils node platform-tools"

		for arg in $ARGS; do
			echo ""
			case $arg in
			'--debug')
				echo " You have decided to read the complete messages to debug the installation"
				echo "____________________________________________________________________________"
				;;
			'--force-latest')
				echo " You have decided to force downloads for the latest version (if it exists)"
				echo "____________________________________________________________________________"
				;;
			*)
				cd "$REALDIR" || return
				# If the "tmp" directory is not removed, the installation failed, so remove the app
				if [ -d "$APPSPATH"/"$arg"/tmp ]; then
					$SUDOCMD "$APPSPATH"/"$arg"/remove 2> /dev/null
				fi
				# Various cases that may occur during installation (for example if you use a third-party repository)
				if test -f "$APPSPATH"/"$arg"/remove; then
					echo " ◆ \"$arg\" is already installed!" | tr '[:lower:]' '[:upper:]'
				else
					if echo "$arg" | grep -q "/"; then
						if test -f "$arg" 2> /dev/null; then
							_install_local_script
						else
							echo " 💀 ERROR: the file \"$arg\" does NOT exist"
						fi
					elif test -f "$AMPATH/neodb"; then
						_install_from_third_party_repo
					elif curl --output /dev/null --silent --head --fail "$APPSDB"/"$arg"  1>/dev/null; then
						_install_normally
					else
						echo " 💀 ERROR: \"$arg\" does NOT exist in the database, see \"$AMCLI -l\""
					fi
				fi
				echo "____________________________________________________________________________"
				;;
			esac
		done
		if [ -f "$AMCACHEDIR"/installed ]; then
			echo "############################################################################"
			printf "\n                  END OF ALL INSTALLATION PROCESSES\n"
			printf "             The following new programs have been installed:\n\n"
			grep -w -v "◆ am" 0<"$AMCACHEDIR"/installed
			echo ""
			echo "############################################################################"
			exit 0
		else
			exit 1
		fi
		;;

	'-e'|'extra')
		if [ -z "$2" ] || [ -z "$3" ]; then
			echo " USAGE: $AMCLI $1 user/project [ARGUMENT]"
			echo " USAGE: $AMCLI $1 user/project [ARGUMENT] [KEYWORD]"
			exit 1
		fi
		mkdir -p "$CACHEDIR/extra"
		rm -f "$CACHEDIR/extra/$3"
		wget -q "$AMREPO"/templates/AM-SAMPLE-AppImage -O "$CACHEDIR/extra/$3" || exit 1
		sed -i "s#APP=SAMPLE#APP=$3#g" "$CACHEDIR/extra/$3"
		USER_PROJECT=$(echo "$2" | sed 's#https://github.com/##g' | cut -f1,2 -d'/')
		API_GITHUB_REPO="https://api.github.com/repos/$USER_PROJECT/releases"
		sed -i "s#REPLACETHIS#$USER_PROJECT#g" "$CACHEDIR/extra/$3"
		q="'"
		if [ "$arch" = "x86_64" ]; then
			FILTER=' | grep -vi "i386\\|i686\\|i586\\|i486\\|aarch64\\|arm64\\|armv7l"'
		elif [ "$arch" = "i686" ]; then
			FILTER=' | grep -ie "i386\\|i686\\|i586\\|i486" '
		elif [ "$arch" = "aarch64" ]; then
			FILTER=' | grep -ie "aarch64\\|arm64" '
		fi
		FUNCTION='curl -Ls '"$API_GITHUB_REPO"' | sed '"$q"'s/[()",{} ]/\\n/g'"$q"' | grep -oi "https.*mage$"'"$FILTER"' | head -1'
		sed -i "s#FUNCTION)#$FUNCTION)#g" "$CACHEDIR/extra/$3"
		[ -n "$4" ] && sed -i "s# head -1# grep -i \"$4\" | head -1#g" "$CACHEDIR/extra/$3"
		chmod a+x "$CACHEDIR/extra/$3"
		"$AMCLIPATH" -i "$CACHEDIR/extra/$3"
		exit 1
		;;
	esac
done

shift
