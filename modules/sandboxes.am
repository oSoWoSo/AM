#!/bin/sh

###################################################################################################
# THIS MODULE INCLUDES ALL ACTIONS INTENDED TO ISOLATE DOTFILES OR CONTAINERIZE INSTALLED APPIMAGES
###################################################################################################

# Set a dedicated .home directory for a selected AppImage
_home() {
	cd "$APPSPATH" || return
	if ! test -d ./"$arg"; then
		echo " ERROR: \"$arg\" is not installed"
	else
		case "$arg" in
		*)
			if [ -z "$(strings -d "./$arg/$arg" 2>/dev/null | grep -F "if you run it with the --appimage-extract option")" ] 2>/dev/null; then
				echo " ERROR: \"$arg\" is NOT an AppImage"
			else
				cd ./"$arg" || return
				mkdir -p ./"$arg.home"
				echo ' Setting $HOME to '"$APPSPATH/$arg/$arg"'.home for this AppImage'
			fi
		esac
	fi
}

case "$1" in
  '--sandbox')

	case $2 in
	'') 
		echo " USAGE: $AMCLI $1 [ARGUMENT]"; exit;;
	esac

	# This script makes it easy to sandbox AppImages installed with AppMan or AM
	# The default location for the sandboxed homes is at $HOME/.local/am-sandboxes
	# But that location can be changed by setting the $SANDBOXDIR env variable
	# aisap: https://github.com/mgord9518/aisap

	while [ -n "$1" ]; do
		# Safety checks
		if ! test -f "$APPSPATH/$2/remove"; then
			echo " '$2' is not a valid argument or is not installed."; exit
		elif [ "$2" = "aisap" ]; then
			echo " Error: You can't sandbox aisap"; exit 1
		elif ! command -v am 1>/dev/null && ! command -v appman 1>/dev/null; then
			echo -e " Error: You need AM or AppMan for this script work\nInstall AM/AppMan and try again"; exit 1
		elif ! command -v aisap 1>/dev/null; then
			echo -e " Error: You need aisap for this script work\n"
			read -p " ◆ DO YOU WISH TO INSTALL AISAP (y,n)?: " yn
			if echo "$yn" | grep -i '^y' >/dev/null 2>&1; then
				$AMCLIPATH -i aisap >/dev/null 2>&1
			fi
			command -v aisap 1>/dev/null && echo " aisap installed successfully" || exit 1
		fi

		# Set variables
		if [ "$AMCLI" = am ]; then
			TARGET="/usr/local/bin/$2"
		else
			mkdir -p "$HOME/.local/bin"
			TARGET="$HOME/.local/bin/$2"
		fi
		APPIMAGEPATH="$APPSPATH/$2"
		APPIMAGE="$APPIMAGEPATH/$2"

		# Check if TARGET is an AppImage or was already sandboxed
		if grep "aisap-am" "$TARGET" >/dev/null 2>&1; then
			echo " $2 is already sandboxed!"; exit 1
		elif ! strings -d "$APPIMAGE" | grep -- '--appimage-extract' 1>/dev/null; then
			echo " $TARGET doesn't look like an AppImage, aborting"; exit 1
		fi

		# Remove the exec permission from the AppImage and its updater for better safety™
		$SUDOCOMMAND rm -f "$TARGET" &&
		chmod a-x "$APPIMAGE" &&
		sed -i 's|chmod a+x|chmod a-x|g' "$APPIMAGEPATH/AM-updater" || exit 1

		# Check if we are using AM or AppMan
		echo -e "\n Making aisap script for \"$(echo "$AMCLI" | tr a-z A-Z)\"..."

		mkdir -p "$AMCACHEDIR/sandbox-scripts"
		cat <<-"HEREDOC" >> "$AMCACHEDIR/sandbox-scripts/$2"
		#!/bin/sh

		# aisap-am sandboxing script
		# Run this script with --disable-sandbox to do what the flag name implies

		# Dependency check
		if ! command -v aisap 1>/dev/null; then
			echo "You need aisap for this to work"
			notify-send -u critical "Sandbox error; Missing aisap dependency!"
			exit 1
		fi

		# Set variables and create sandboxed dir.
		APPEXEC=DUMMY
		chmod a-x "$APPEXEC" # Prevents accidental launch of the app outside the sandbox
		APPNAME="$(echo "$APPEXEC" | awk -F "/" '{print $NF}')"
		SANDBOXDIR="${SANDBOXDIR:-$HOME/.local/am-sandboxes}"
		DATADIR="${XDG_DATA_HOME:-$HOME/.local/share}"
		CONFIGDIR="${XDG_CONFIG_HOME:-$HOME/.config}"
		CACHEDIR="${XDG_CACHE_HOME:-$HOME/.cache}"

		# Try to find the right name of the app xdg directories, as sometimes it is not the same as $APPNAME
		APPDATA=$( ls "$DATADIR" | grep -i "$APPNAME" | head -1 )
		APPCONF=$( ls "$CONFIGDIR" | grep -i "$APPNAME" | head -1 ) 

		mkdir -p "$SANDBOXDIR/$APPNAME"
		if [ "$1" = "--disable-sandbox" ]; then
			APPIMAGEPATH="$(echo ${APPEXEC%/*})"
			echo -e "\n Giving exec permissions back to $APPEXEC..."
			chmod a+x "$APPEXEC" || exit 1
			echo " Patching $APPIMAGEPATH/AM-updater to give permissions back..."
			sed -i 's|chmod a-x|chmod a+x|g' "$APPIMAGEPATH/AM-updater" || exit 1
			THISFILE="$(realpath "$0")"
			echo -e " Replacing $THISFILE with a link to the AppImage...\n"
			SUDO ln -sf "$APPEXEC" "$THISFILE" || exit 1
			echo -e " \033[32m$APPEXEC successfully unsandboxed!\n"
			exit 0
		fi
		if [ -z "$APPNAME" ]; then exit 1; fi

		# Start at sandboxed home
		# Edit below this to add or remove access to parts of the system
		exec aisap --trust-once --level 2 \
		--data-dir "$SANDBOXDIR/$APPNAME" \
		--add-file "$DATADIR/${APPDATA:-$APPNAME}":rw \
		--add-file "$DATADIR"/themes \
		--add-file "$DATADIR"/icons \
		--add-file "$CONFIGDIR/${APPCONF:-$APPNAME}":rw \
		--add-file "$CONFIGDIR"/dconf \
		--add-file "$CONFIGDIR"/gtk3.0 \
		--add-file "$CONFIGDIR"/gtk4.0 \
		--add-file "$CONFIGDIR"/kdeglobals \
		--add-file "$CONFIGDIR"/qt5ct \
		--add-file "$CONFIGDIR"/qt6ct \
		--add-file "$CONFIGDIR"/Kvantum \
		--add-file "$HOME"/.local/lib \
		--add-file /usr/share \
		--rm-file xdg-download \
		--rm-file xdg-music \
		--rm-file xdg-pictures \
		--rm-file xdg-videos \
		--rm-file xdg-documents \
		--add-socket dbus \
		--add-socket x11 \
		--add-socket wayland \
		--add-socket pulseaudio \
		--add-socket network \
		--add-device dri -- \
		"$APPEXEC" "$@"
		HEREDOC
		$SUDOCOMMAND mv "$AMCACHEDIR/sandbox-scripts/$2" "$TARGET" && rmdir "$AMCACHEDIR/sandbox-scripts" || exit 1
		$SUDOCOMMAND chmod a+x "$TARGET" && $SUDOCOMMAND sed -i "s|DUMMY|$APPIMAGE|g; s|SUDO |$SUDOCOMMAND |g" "$TARGET" || exit 1
		echo -e "\n \033[33m\"$2\" successfully sandboxed!"
		echo -e "\n \033[0mThe sandboxed app home will be in "${SANDBOXDIR:-$HOME/.local/am-sandboxes}" once launched"
		echo -e "\n This location can be moved by setting the 'SANDBOXDIR' env variable"
		echo -e "\n --------------------------------------------------------------------------"
		echo -e "\n \033[33mUse the --disable-sandbox flag if you want to revert the changes"
		echo -e "\n \033[0mIn this case that is: \033[33m$2 --disable-sandbox\n\033[36m"
		read -p " Allow $2 access to ~/Downloads? (y/N): " yn
		if echo "$yn" | grep -i '^y' >/dev/null 2>&1; then
			$SUDOCOMMAND sed -i "s|--rm-file xdg-download|--add-file xdg-download:rw|g" "$TARGET" || exit 1
		fi
		read -p " Allow $2 access to ~/Documents? (y/N): " yn
		if echo "$yn" | grep -i '^y' >/dev/null 2>&1; then
			$SUDOCOMMAND sed -i "s|--rm-file xdg-documents|--add-file xdg-documents:rw|g" "$TARGET" || exit 1
		fi
		read -p " Allow $2 access to ~/Music (y/N): " yn
		if echo "$yn" | grep -i '^y' >/dev/null 2>&1; then
			$SUDOCOMMAND sed -i "s|--rm-file xdg-music|--add-file xdg-music:rw|g" "$TARGET" || exit 1
		fi
		read -p " Allow $2 access to ~/Pictures (y/N): " yn
		if echo "$yn" | grep -i '^y' >/dev/null 2>&1; then
			$SUDOCOMMAND sed -i "s|--rm-file xdg-pictures|--add-file xdg-pictures:rw|g" "$TARGET" || exit 1
		fi
		read -p " Allow $2 access to ~/Videos (y/N): " yn
		if echo "$yn" | grep -i '^y' >/dev/null 2>&1; then
			$SUDOCOMMAND sed -i "s|--rm-file xdg-videos|--add-file xdg-videos:rw|g" "$TARGET" || exit 1
		fi
		echo -e "\n \033[33mUser directories access configured successfully!"
		exit 0
	done

	shift
	;;

  '-H'|'--home')
	case $2 in
	'') echo " USAGE: $AMCLI $1 [ARGUMENT]"; exit;;
	esac

	while [ -n "$1" ]; do
		rm -f "$AMCACHEDIR/home-args"
		echo "$@" | tr ' ' '\n' >> "$AMCACHEDIR/home-args" && echo STOP >> "$AMCACHEDIR/home-args"
		ARGS=$(tail -n +2 "$AMCACHEDIR"/home-args)
		for arg in $ARGS; do
			if [ "$arg" = STOP ]; then
				exit
			else
				_home
			fi
		done
	done
	;;
esac
