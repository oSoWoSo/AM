#!/bin/sh

#########################################################################################################################
# THIS MODULE HELPS YOU INTEGRATE LOCAL APPIMAGES BY DRAG/DROP THEM INTO THE TERMINAL, LIKE ANY COMMON APPIMAGE ASSISTANT
#########################################################################################################################

_launcher_appimage_extract() {
	"$arg" --appimage-extract share/icons/*/*/* 1>/dev/null
	"$arg" --appimage-extract usr/share/icons/*/*/* 1>/dev/null
	"$arg" --appimage-extract share/icons/*/*/*/* 1>/dev/null
	"$arg" --appimage-extract usr/share/icons/*/*/*/* 1>/dev/null
	"$arg" --appimage-extract *.svg 1>/dev/null
	"$arg" --appimage-extract *.png 1>/dev/null
	"$arg" --appimage-extract *.desktop 1>/dev/null
	"$arg" --appimage-extract share/applications/*.desktop 1>/dev/null
	"$arg" --appimage-extract usr/share/applications/*.desktop 1>/dev/null
}

_launcher_appimage_integration() {
	printf "[Desktop Entry]\nVersion=1.0\nType=Application\nTerminal=false\nStartupNotify=true\nExec=%s\n" "$arg %U" > ./"$appimage".desktop
	cat ./squashfs-root/*.desktop | grep "^Name=" | head -1 >> ./"$appimage".desktop
	cat ./squashfs-root/*.desktop | grep -F '^Name[' >> ./"$appimage".desktop
	cat ./squashfs-root/*.desktop | grep "Categories=" >> ./"$appimage".desktop
	cat ./squashfs-root/*.desktop | grep "Comment=" | head -1 >> ./"$appimage".desktop
	cat ./squashfs-root/*.desktop | grep -F 'Comment[' >> ./"$appimage".desktop
	cat ./squashfs-root/*.desktop | grep "Icon=" | head -1 >> ./"$appimage".desktop
	cat ./squashfs-root/*.desktop | grep "MimeType=" | head -1 >> ./"$appimage".desktop
	uniq ./"$appimage".desktop > ./"$appimage"-1.desktop && mv ./"$appimage"-1.desktop ./"$appimage".desktop
	mv ./"$appimage".desktop "$DATADIR"/applications/AppImages/"$appimage".desktop 2>/dev/null
	mv ./squashfs-root/*.png "$DATADIR"/icons/ 2>/dev/null
	mv ./squashfs-root/*.svg "$DATADIR"/icons/ 2>/dev/null
	share_dirs="usr/share share"
	size_dirs="0x0 22x22 24x24 32x32 48x48 64x64 128x128 256x256 512x512"
	for share in $share_dirs; do
		for sizes in $size_dirs; do
			mv ./squashfs-root/"${share}"/icons/hicolor/"${sizes}"/apps/*.png "$DATADIR"/icons/ 2>/dev/null
		done
		mv ./squashfs-root/"${share}"/icons/hicolor/scalable/apps/*.svg "$DATADIR"/icons/ 2>/dev/null
		mv ./squashfs-root/"${share}"/pixmaps/*.png "$DATADIR"/icons/ 2>/dev/null
	done
	rm -Rf ./squashfs-root
}

_launcher_appimage_bin() {
	mkdir -p "$HOME"/.local/bin
	_check_if_home_local_bin_is_not_in_path
	read -r -p " Write a custom command to launch the app, or leave blank: " response
	if [ -z "$response" ]; then
		appimage_cmd=$(echo "$appimage" | tr '[:upper:]' '[:lower:]')
		if ! echo "$appimage" | grep -q -i ".appimage"; then
			printf '#!/bin/sh\n%s' "$arg" >> "$HOME"/.local/bin/"$appimage_cmd".appimage
			chmod a+x "$HOME"/.local/bin/"$appimage_cmd".appimage
			echo " New command: \"$appimage_cmd.appimage\" in ~/.local/bin"
		else
			printf '#!/bin/sh\n%s' "$arg" >> "$HOME"/.local/bin/"$appimage_cmd"
			chmod a+x "$HOME"/.local/bin/"$appimage_cmd"
			echo " New command: \"$appimage_cmd\" in ~/.local/bin"
		fi
	elif command -v "$response" 1>/dev/null; then
		echo " ERROR: the \"$response\" command alredy exists, retry!"
	else
		ln -s "$arg" "$HOME"/.local/bin/"$response"
	fi
}

_launcher(){
	if ! test -f "$arg"; then
		echo " ERROR: \"$arg\" not found"
	elif ! strings -d "$arg" 2>/dev/null | grep -F -q 'if you run it with the --appimage-extract option'; then
		echo " ERROR: \"$arg\" is NOT an AppImage"
	else
		printf " â—† File: %s\n" "$arg"
		appimage=$(basename -- "$arg")
		mkdir -p "$DATADIR"/applications/AppImages
		mkdir -p "$DATADIR"/icons
		chmod a+x "$arg"
		cd "$(dirname "$arg")" || return

		_launcher_appimage_extract 2>/dev/null
		_launcher_appimage_integration 2>/dev/null
		_launcher_appimage_bin
	fi
}

[ -z "$2" ] && echo " USAGE: $AMCLI $1 [ARGUMENT]" && exit 1
ARGS="$(echo "$@" | cut -f2- -d ' ')"
for arg in $ARGS; do
	echo "---------------------------------------------------------------------"
	_launcher
done
echo "---------------------------------------------------------------------"
